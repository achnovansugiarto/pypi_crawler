{
  "info": {
    "author": "AccelByte",
    "author_email": "dev@accelbyte.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# AccelByte Python SDK\n\nA software development kit (SDK) for interacting with AccelByte services written in Python.\n\nThis SDK was generated from OpenAPI specification documents included in the [spec](spec) directory.\n\n## Setup\n\nThis SDK requires Python 3.9 to be installed.\n\n### Install with Pip\n\nInstall dependencies.\n\n```sh\npip install requests httpx websockets PyYAML PyJWT[crypto] mmh3 bitarray\n```\n\nInstall from PyPI\n\n```sh\npip install accelbyte-py-sdk\n```\n\nor install from source.\n\n```sh\npip install git+https://github.com/AccelByte/accelbyte-python-sdk.git@{VERSION}#egg=accelbyte_py_sdk\n```\n\nReplace `{VERSION}` with a specific release version tag. When starting a new project, \nusing the latest release version is recommended. For the list of available versions, see [releases](https://github.com/AccelByte/accelbyte-python-sdk/releases). \n\n**Special note only for Windows environment**\n\nIf you encounter error `path too long` when attempting to install the SDK. The steps to solve this are:\n\n1. [Enable long paths in registry.](https://docs.python.org/3/using/windows.html#removing-the-max-path-limitation)\n\n2. Enable long paths in git.\n\n   ```\n   git config --global core.longpaths true\n   ```\n\n3. Restart the powershell window you used to take effect.\n\n4. Try installing SDK again.\n\n   ```\n   pip install git+https://github.com/AccelByte/accelbyte-python-sdk.git@{VERSION}#egg=accelbyte_py_sdk\n   ```\n\n### Environment Variables\n\nThe following environment variables need to be set when using `EnvironmentConfigRepository` (default).\n\n| Name             | Required                                                                               | Example                          |\n|------------------|----------------------------------------------------------------------------------------|----------------------------------|\n| AB_BASE_URL      | Yes                                                                                    | https://demo/accelbyte.io        |\n| AB_CLIENT_ID     | Yes                                                                                    | abcdef0123456789abcdef0123456789 |\n| AB_CLIENT_SECRET | Yes, only if you use a private `AB_CLIENT_ID`                                          | ab#c,d)ef(ab#c,d)ef(ab#c,d)ef(ab |\n| AB_NAMESPACE     | Yes, the SDK will automatically fill up the `{namespace}` path parameter (overridable) | accelbyte                        |\n| AB_APP_NAME      | No, the SDK will automatically fill up the `User-Agent` header (overridable)           | MyApp                            |\n| AB_APP_VERSION   | No, the SDK will automatically fill up the `User-Agent` header (overridable)           | 1.0.0                            |\n\n\n## Usage\n\n### Initializing\n\nYou'll have to initialize the SDK using the `initialize()` function.\n\n```python\nimport accelbyte_py_sdk\n\n\nif __name__ == \"__main__\":\n    accelbyte_py_sdk.initialize()\n    # uses EnvironmentConfigRepository by default\n    #   which in turn uses '$AB_BASE_URL', '$AB_CLIENT_ID', '$AB_CLIENT_SECRET', '$AB_NAMESPACE'\n```\n\nYou could also pass in options like so:\n\n```python\nfrom os import environ\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.core import MyConfigRepository\n\n\nif __name__ == \"__main__\":\n    base_url = environ[\"MY_BASE_URL\"]\n    client_id = environ[\"MY_CLIENT_ID\"]\n    client_secret = environ[\"MY_CLIENT_SECRET\"]\n    namespace = environ[\"MY_NAMESPACE\"]\n    app_name = environ[\"MY_APP_NAME\"]\n    app_version = environ[\"MY_APP_VERSION\"]\n\n    my_config_repository = MyConfigRepository(\n        base_url=base_url,\n        client_id=client_id,\n        client_secret=client_secret,\n        namespace=namespace,\n        app_name=app_name,\n        app_version=app_version\n    )\n    options = {\n        \"config\": my_config_repository\n    }\n\n    accelbyte_py_sdk.initialize(options)\n    # you could still set some of these options after initializing.\n    # ex. accelbyte_py_sdk.core.set_config_repository(my_config_repository)\n\n```\n\n### Logging In and Logging Out\n\n#### Login using Username and Password\n\n```python\nfrom os import environ\n\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.services.auth import login_user, logout\n\n\nif __name__ == \"__main__\":\n    accelbyte_py_sdk.initialize()\n\n    username = environ[\"AB_USERNAME\"]\n    password = environ[\"AB_PASSWORD\"]\n\n    token, error = login_user(username, password)\n    assert error is None\n\n    _, error = logout()\n    assert error is None\n\n```\n\nHere `login_user(username, password)` and `logout()` are wrapper functions.\n\n#### Login using OAuth Client (Public or Confidential)\n\n```python\nfrom os import environ\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.services.auth import login_client\n\n\nif __name__ == \"__main__\":\n    accelbyte_py_sdk.initialize()\n\n    client_id = environ[\"AB_CLIENT_ID\"]\n    client_secret = environ[\"AB_CLIENT_SECRET\"]\n\n    token, error = login_client(client_id, client_secret)\n    # passing '$AB_CLIENT_ID' and '$AB_CLIENT_SECRET' is same as:\n    # token, error = login_client()\n    assert error is not None\n\n```\n\n:bulb: Using `login_x(..., auto_refresh=True)` automatically refreshes the token once the expiration draws near.\n\n```python\n# set the refresh rate for 'login_client'\n# 0.5 means refresh when we 50% of the expiration duration has passed\nres, err = login_client(client_id, client_secret, auto_refresh=True, refresh_rate=0.5)\n```\n```python\n# set the refresh rate for 'login_user'\n# 0.5 means refresh when we 50% of the expiration duration has passed\nres, err = login_user(username, password, auto_refresh=True, refresh_rate=0.5)\n```\n\nThe auto refresh is only triggered when another request is fired. If you want to the refresh run automatically in the background. Use any of the `LoginXTimer` classes.\n\n```python\nfrom accelbyte_py_sdk.services.auth import LoginClientTimer, LoginPlatformTimer, LoginUserTimer, RefreshLoginTimer\n\nres, err = login_user(username, password)\nif err is not None:\n    exit(1)\n\n# creates a threading.Timer-like object that calls login_user every 1800 seconds repeatedly 'inf' times\ninterval = 1800\ntimer = LoginUserTimer(\n    interval,\n    username=username,\n    password=password,\n    repeats=-1,  # <0: repeat 'inf' times | 0 or None: repeat 0 times | >0: repeat n times \n    autostart=True,\n)\n```\n\nTo manually refresh the token:\n\n```python\nfrom accelbyte_py_sdk.core import get_token_repository\nfrom accelbyte_py_sdk.services.auth import refresh_login\n\ntoken_repo = get_token_repository()\nrefresh_token = token_repo.get_refresh_token()\n\ntoken, error = refresh_login(refresh_token)\nassert error is None\n```\n\n## Using multiple SDK instances\n\nThe examples above demonstrates using just one instance of the Python SDK (the default which is also global), but you could also instantiate multiple instances of the SDK and use them at the same time.\n\n```python\nimport accelbyte_py_sdk.services.auth as auth_service\nimport accelbyte_py_sdk.api.iam as iam_service\nimport accelbyte_py_sdk.api.iam.models as iam_models\n\nfrom accelbyte_py_sdk import AccelByteSDK\nfrom accelbyte_py_sdk.core import EnvironmentConfigRepository\nfrom accelbyte_py_sdk.core import InMemoryTokenRepository\n\n\n# Create 3 instances of the SDK\nclient_sdk = AccelByteSDK()\nuser_sdk1 = AccelByteSDK()\nuser_sdk2 = AccelByteSDK()\n\n\n# Initialize the SDKs\nclient_sdk.initialize(\n    options={\n        \"config\": EnvironmentConfigRepository(),\n        \"token\": InMemoryTokenRepository(),\n    }\n)\n\nuser_sdk1.initialize(\n    options={\n        \"config\": EnvironmentConfigRepository(),\n        \"token\": InMemoryTokenRepository(),\n    }\n)\n\nuser_sdk2.initialize(\n    options={\n        \"config\": user_sdk1.get_config_repository(),  # you could also share the config repo with User 1 SDK's\n        \"token\": InMemoryTokenRepository(),  # you could also do the same thing with token repos but that is not advisable. \n    }\n)\n\n\n# Login the SDKs\n_, error = auth_service.login_client(sdk=client_sdk)\n\nusername1, password1 = ...\n_, error = auth_service.login_user(username1, password1, sdk=user_sdk1)\n\nusername2, password2 = ...\n_, error = auth_service.login_user(username2, password2, sdk=user_sdk2)\n\n\n# Call an endpoint as User 1\nresult1, error = iam_service.public_create_user_v4(\n    body=iam_models.AccountCreateUserRequestV4.create_from_dict({...}),\n    sdk=user_sdk1,\n)\n\n# Call an endpoint as User 2\nresult2, error = iam_service.public_create_user_v4(\n    body=iam_models.AccountCreateUserRequestV4.create_from_dict({...}),\n    sdk=user_sdk2,\n)\n\n# Call an endpoint as the Admin IAM Client\nresult, error = admin_update_user_v4(\n    body=iam_models.ModelUserUpdateRequestV3.create_from_dict({...}),\n    user_id=result1.user_id,\n    sdk=client_sdk,\n)\n\n\n# Reset/Deintialize the SDKs after using\nclient_sdk1.deintialize()\nclient_sdk1.deintialize()\nclient_sdk1.deintialize()\n```\n\n## Interacting with a Service Endpoint\n\n### Example A\n\nIn this example we will create a new user using the `POST` endpoint `/iam/v3/public/namespaces/{namespace}/users`\n\n```python\nimport json\n\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.services.auth import login_client\n\n# Import the wrapper 'public_create_user_v3'\n# to know which wrapper to use open the docs/<service-name>-index.md and\n# use the search function to find the wrapper name\nfrom accelbyte_py_sdk.api.iam import public_create_user_v3\n\n# This POST endpoint also requires a body of 'ModelUserCreateRequestV3'\n# so you will need to import that too, import it using this scheme:\n#  from accelbyte_py_sdk.api.<service-name>.models import <model-name>\nfrom accelbyte_py_sdk.api.iam.models import ModelUserCreateRequestV3\nfrom accelbyte_py_sdk.api.iam.models import ModelUserCreateResponseV3\n\n\ndef main():\n    # 1 Initialize the SDK\n    accelbyte_py_sdk.initialize()\n\n    # 2 Login as a client (uses $AB_CLIENT_ID and $AB_CLIENT_SECRET)\n    _, error = login_client()\n\n    # 3 Create a user using the POST endpoint: /iam/v3/public/namespaces/{namespace}/users\n    #   * this endpoint requires:\n    #     - a 'body' (ModelUserCreateRequestV3)\n    #     - a 'namespace' (string)\n    #       'namespace' here is unique because it can be omitted, omitting it will result in\n    #       the SDK to automatically fill it out with the value of '$AB_NAMESPACE'\n    #   * more details on this endpoint can be found in:\n    #     accelbyte_py_sdk/api/iam/operations/users/public_create_user_v3.py\n    result, error = public_create_user_v3(\n        body=ModelUserCreateRequestV3.create(\n            auth_type=\"EMAILPASSWD\",\n            country=\"US\",\n            date_of_birth=\"2001-01-01\",\n            display_name=\"************\",\n            email_address=\"******@fakemail.com\",\n            password=\"******************\",\n        )\n    )\n\n    # 4 Check for errors\n    if error:\n      exit(1)\n\n    # 5 Do something with the result\n    print(json.dumps(result.to_dict(), indent=2))\n    # {\n    #   \"authType\": \"EMAILPASSWD\",\n    #   \"country\": \"US\",\n    #   \"dateOfBirth\": \"2001-01-01T00:00:00Z\",\n    #   \"displayName\": \"************\",\n    #   \"emailAddress\": \"******@fakemail.com\",\n    #   \"namespace\": \"******\",\n    #   \"userId\": \"********************************\"\n    # }\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n:bulb: All wrapper functions follow the return value format of `result, error`.\n\n:bulb: You could also write your own wrapper functions by using the models and operations in `accelbyte_py_sdk.api.<service-name>` and `accelbyte_py_sdk.api.<service-name>.models` respectively.\n\n:bulb: All wrapper functions have an asynchronous counterpart that ends with `_async`.\n\n### Example A (`async`)\n\nTo convert `Example A` asynchronously the following steps are needed.\n\n1. Import the asyncio package.\n\n    ```python\n    import asyncio\n    ```\n\n2. Convert the main method into `async`.\n\n    ```python\n    # def main():\n    async def main():\n    ```\n\n3. Change how the `main` function is invoked.\n\n    ```python\n    if __name__ == \"__main__\":\n        # main()\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n    ```\n\n4. Use `HttpxHttpClient`.\n\n    ```python\n    # accelbyte_py_sdk.initialize()\n    accelbyte_py_sdk.initialize(options={\"http\": \"HttpxHttpClient\"})\n    ```\n\n5. Use the `async` version of the wrapper by appending `_async`.\n\n    ```python\n    # from accelbyte_py_sdk.api.iam import public_create_user_v3\n    from accelbyte_py_sdk.api.iam import public_create_user_v3_async\n    ```\n\n6. Use the `async` wrapper with the `await` keyword.\n\n    ```python\n    # result, error = public_create_user_v3(\n    result, error = await public_create_user_v3_async(\n    ```\n\nHere is the full code:\n\n```python\nimport asyncio\nimport json\n\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.services.auth import login_client\n\n# Import the wrapper 'public_create_user_v3_async'\n# to know which wrapper to use open the docs/<service-name>-index.md and\n# use the search function to find the wrapper name\nfrom accelbyte_py_sdk.api.iam import public_create_user_v3_async\n\n# This POST endpoint also requires a body of 'ModelUserCreateRequestV3'\n# so you will need to import that too, import it using this scheme:\n#  from accelbyte_py_sdk.api.<service-name>.models import <model-name>\nfrom accelbyte_py_sdk.api.iam.models import ModelUserCreateRequestV3\nfrom accelbyte_py_sdk.api.iam.models import ModelUserCreateResponseV3\n\n\nasync def main():\n    # 1 Initialize the SDK\n    accelbyte_py_sdk.initialize(options={\"http\": \"HttpxHttpClient\"})\n\n    # 2 Login as a client (uses $AB_CLIENT_ID and $AB_CLIENT_SECRET)\n    _, error = login_client()\n\n    # 3 Create a user using the POST endpoint: /iam/v3/public/namespaces/{namespace}/users\n    #   * this endpoint requires:\n    #     - a 'body' (ModelUserCreateRequestV3)\n    #     - a 'namespace' (string)\n    #       'namespace' here is unique because it can be omitted, omitting it will result in\n    #       the SDK to automatically fill it out with the value of '$AB_NAMESPACE'\n    #   * more details on this endpoint can be found in:\n    #     accelbyte_py_sdk/api/iam/operations/users/public_create_user_v3.py\n    result, error = await public_create_user_v3_async(\n        body=ModelUserCreateRequestV3.create(\n            auth_type=\"EMAILPASSWD\",\n            country=\"US\",\n            date_of_birth=\"2001-01-01\",\n            display_name=\"************\",\n            email_address=\"******@fakemail.com\",\n            password=\"******************\",\n        )\n    )\n\n    # 4 Check for errors\n    if error:\n      exit(1)\n\n    # 5 Do something with the result\n    print(json.dumps(result.to_dict(), indent=2))\n    # {\n    #   \"authType\": \"EMAILPASSWD\",\n    #   \"country\": \"US\",\n    #   \"dateOfBirth\": \"2001-01-01T00:00:00Z\",\n    #   \"displayName\": \"************\",\n    #   \"emailAddress\": \"******@fakemail.com\",\n    #   \"namespace\": \"******\",\n    #   \"userId\": \"********************************\"\n    # }\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n```\n\n---\n\n## Configuring HTTP Retry\n\nTo use the `HTTP Retry` feature, set the `HttpClient`'s `retry_policy` and `backoff_policy`.\n\n```python\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.core import get_http_client\n\n# 1 Initialize the SDK\naccelbyte_py_sdk.initialize()\n\n# 2 Get the HTTP Client\nhttp_client = get_http_client()\n\n# 3 Configure the `retry_policy` and `backoff_policy`\n\n# 3a. Retry 3 times with 0.5 seconds delay in between\nfrom accelbyte_py_sdk.core import ConstantHttpBackoffPolicy\nfrom accelbyte_py_sdk.core import MaxRetriesHttpRetryPolicy\n\nhttp_client.retry_policy = MaxRetriesHttpRetryPolicy(3)\n\n# 3b. Retry when total elapsed time is less than 15 seconds, with an exponential backoff duration.\nfrom accelbyte_py_sdk.core import ExponentialHttpBackoffPolicy\nfrom accelbyte_py_sdk.core import MaxElapsedHttpRetryPolicy\n\nhttp_client.backoff_policy = ExponentialHttpBackoffPolicy(initial=1.0, multiplier=2.0)\nhttp_client.retry_policy = MaxElapsedHttpRetryPolicy(15)\n\n# 3c. Use custom retry and backoff policies.\nfrom datetime import timedelta\nfrom typing import Optional\n\ndef my_custom_retry_policy(request, response, /, *, retries: int = 0, elapsed: Optional[timedelta] = None, **kwargs) -> float:\n    return \"Retry-After\" in response.headers and retries == 1  # Retry if the 'Retry-After' header exists and we are on the 1st retry (2nd attempt).\n\ndef my_custom_backoff_policy(request, response, /, *, retries: int = 0, elapsed: Optional[timedelta] = None, **kwargs) -> float:\n    return response.headers.get(\"Retry-After\", 1)  # Use the value of the 'Retry-After' response header, default to 1.0s.\n\nhttp_client.backoff_policy = my_custom_backoff_policy\nhttp_client.retry_policy = my_custom_retry_policy\n\n# 3d. Combining multiple retry policies.\nfrom accelbyte_py_sdk.core import CompositeHttpRetryPolicy\nfrom accelbyte_py_sdk.core import MaxRetriesHttpRetryPolicy\nfrom accelbyte_py_sdk.core import StatusCodesHttpRetryPolicy\n\nhttp_client.retry_policy = CompositeHttpRetryPolicy(\n    StatusCodesHttpRetryPolicy(401, (501, 503)),  # Retry when response status code is 401, 501 to 503 (501, 502, or 503) -- AND\n    MaxRetriesHttpRetryPolicy(3)                  #       when number of retries is less than or equal to 3.\n)\n```\n\n---\n\n## Validating Tokens\n\nYou can use `accelbyte_py_sdk.token_validation.caching.CachingTokenValidator` or `accelbyte_py_sdk.token_validation.iam.IAMTokenValidator`.\n\n```python\ntoken_validator = CachingTokenValidator(sdk)  # or IAMTokenValidator(sdk)\n\n# access_token = ...\nerror = token_validator.validate_token(access_token)\nif error:\n    raise error\n```\n\n---\n\nSee [tests](tests/sdk/core/_request.py) for more usage.\n\n## Samples\n\nSample apps are available in the [samples](samples) directory\n\n## Documentation\n\nFor documentation about AccelByte services and SDK, see [docs.accelbyte.io](https://docs.accelbyte.io/)\n\n:bulb: Check out the index files in the [docs](docs) directory if you are looking for a specific endpoint.\n\n---\n\n## Misc\n\n### Utility Functions\n\nCheck if the SDK is initialized.\n\n```python\nimport accelbyte_py_sdk\n\n\nis_initialized = accelbyte_py_sdk.is_initialized()\n\nprint(is_initialized)\n# False\n```\n\nCreate a Basic Auth from a string tuple.\n\n```python\nimport accelbyte_py_sdk\n\n\nbasic_auth = accelbyte_py_sdk.core.create_basic_authentication(\"foo\", \"bar\")\n\nprint(basic_auth)\n# Basic Zm9vOmJhcg==\n```\n\nGets the stored access token.\n\n```python\nimport accelbyte_py_sdk\n\n\naccess_token, error = accelbyte_py_sdk.core.get_access_token()\n\nprint(access_token)\n# ************************************\n```\n\nGet `AB_*` environment configuration values.\n\n```python\nimport accelbyte_py_sdk\n\n\nbase_url, client_id, client_secret, namespace = accelbyte_py_sdk.core.get_env_config()\n\nprint(f\"{base_url}, {client_id}, {client_secret}, {namespace}\")\n# <$AB_BASE_URL>, <$AB_CLIENT_ID>, <$AB_CLIENT_SECRET>, <$AB_NAMESPACE>\n```\n\nGet `AB_*` environment user credential values.\n\n```python\nimport accelbyte_py_sdk\n\n\nusername, password = accelbyte_py_sdk.core.get_env_user_credentials()\n\nprint(f\"{base_url}: {client_id}\")\n# <$AB_USERNAME>: <$AB_PASSWORD>\n```\n\nSet logger level and add logger handlers.\n\n```python\nimport logging\n\n# 1. The SDK has helper functions for logging.\n\naccelbyte_py_sdk.core.set_logger_level(logging.INFO)          # 'accelbyte_py_sdk'\naccelbyte_py_sdk.core.set_logger_level(logging.INFO, \"http\")  # 'accelbyte_py_sdk.http'\naccelbyte_py_sdk.core.set_logger_level(logging.INFO, \"ws\")    # 'accelbyte_py_sdk.ws'\n\n\n# 2. You could also use this helper function for debugging.\n\naccelbyte_py_sdk.core.add_stream_handler_to_logger()          # sends content of the 'accelbyte_py_sdk' logger to 'sys.stderr'.\n\n\n# 3. There is a helper function that helps you get started with log files.\n\naccelbyte_py_sdk.core.add_buffered_file_handler_to_logger(    # flushes content of the 'accelbyte_py_sdk' logger to a file named 'sdk.log' every 10 logs.\n    filename=\"/path/to/sdk.log\",\n    capacity=10,\n    level=logging.INFO\n)\naccelbyte_py_sdk.core.add_buffered_file_handler_to_logger(    # flushes content of the 'accelbyte_py_sdk.http' logger to a file named 'http.log' every 3 logs.\n    filename=\"/path/to/http.log\",\n    capacity=3,\n    level=logging.INFO,\n    additional_scope=\"http\"\n)\n\n# 3.a. Or you could the same thing when initializing the SDK.\n\naccelbyte_py_sdk.initialize(\n    options={\n        \"log_files\": {\n            \"\": \"/path/to/sdk.log\",                           # flushes content of the 'accelbyte_py_sdk' logger to a file named 'sdk.log' every 10 logs.\n            \"http\": {                                         # flushes content of the 'accelbyte_py_sdk.http' logger to a file named 'http.log' every 3 logs.\n                \"filename\": \"/path/to/http.log\",\n                \"capacity\": 3,\n                \"level\": logging.INFO\n            }\n        }\n    }\n)\n\n# 4. By default logs from 'accelbyte_py_sdk.http' are stringified dictionaries, you can set your own formatter like so.\n\ndef format_request_response_as_yaml(data: dict) -> str:\n    return f\"---\\n{yaml.safe_dump(data, sort_keys=False).rstrip()}\\n...\"\n\nhttp_client = accelbyte_py_sdk.core.get_http_client()\nhttp_client.request_log_formatter = format_request_response_as_yaml\nhttp_client.response_log_formatter = format_request_response_as_yaml\n```\n\n---\n\n## In-depth Topics\n\n### Generated code\n\n#### Models\n\nEach definition in `#/definitions/` is turned into a Model.\n\nExample:\n\n```yaml\n# UserProfileInfo\nproperties:\n  avatarLargeUrl:\n    type: string\n  avatarSmallUrl:\n    type: string\n  avatarUrl:\n    type: string\n  customAttributes:\n    additionalProperties:\n      type: object\n    type: object\n  dateOfBirth:\n    format: date\n    type: string\n    x-nullable: true\n  firstName:\n    type: string\n  language:\n    type: string\n  lastName:\n    type: string\n  namespace:\n    type: string\n  status:\n    enum:\n    - ACTIVE\n    - INACTIVE\n    type: string\n  timeZone:\n    type: string\n  userId:\n    type: string\n  zipCode:\n    type: string\ntype: object\n\n```\n\n```python\n# accelbyte_py_sdk/api/basic/models/user_profile_info.py\n\nclass UserProfileInfo(Model):\n    \"\"\"User profile info (UserProfileInfo)\n\n    Properties:\n        avatar_large_url: (avatarLargeUrl) OPTIONAL str\n\n        avatar_small_url: (avatarSmallUrl) OPTIONAL str\n\n        avatar_url: (avatarUrl) OPTIONAL str\n\n        custom_attributes: (customAttributes) OPTIONAL Dict[str, Any]\n\n        date_of_birth: (dateOfBirth) OPTIONAL str\n\n        first_name: (firstName) OPTIONAL str\n\n        language: (language) OPTIONAL str\n\n        last_name: (lastName) OPTIONAL str\n\n        namespace: (namespace) OPTIONAL str\n\n        status: (status) OPTIONAL Union[str, StatusEnum]\n\n        time_zone: (timeZone) OPTIONAL str\n\n        user_id: (userId) OPTIONAL str\n\n        zip_code: (zipCode) OPTIONAL str\n    \"\"\"\n\n    # region fields\n\n    avatar_large_url: str                                                                          # OPTIONAL\n    avatar_small_url: str                                                                          # OPTIONAL\n    avatar_url: str                                                                                # OPTIONAL\n    custom_attributes: Dict[str, Any]                                                              # OPTIONAL\n    date_of_birth: str                                                                             # OPTIONAL\n    first_name: str                                                                                # OPTIONAL\n    language: str                                                                                  # OPTIONAL\n    last_name: str                                                                                 # OPTIONAL\n    namespace: str                                                                                 # OPTIONAL\n    status: Union[str, StatusEnum]                                                                 # OPTIONAL\n    time_zone: str                                                                                 # OPTIONAL\n    user_id: str                                                                                   # OPTIONAL\n    zip_code: str                                                                                  # OPTIONAL\n\n    # endregion fields\n```\n\nthere are also a number of utility functions generated with each model that should help in the ease of use.\n\n```python\n# accelbyte_py_sdk/api/basic/models/user_profile_info.py\n\n    ...\n\n    def with_user_id(self, value: str) -> UserProfileInfo:\n        self.user_id = value\n        return self\n\n    # other with_x() methods too\n\n    def to_dict(self, include_empty: bool = False) -> dict:\n        result: dict = {}\n        ...\n        return result\n\n    @classmethod\n    def create(\n        cls,\n        avatar_large_url: Optional[str] = None,\n        avatar_small_url: Optional[str] = None,\n        avatar_url: Optional[str] = None,\n        custom_attributes: Optional[Dict[str, Any]] = None,\n        date_of_birth: Optional[str] = None,\n        first_name: Optional[str] = None,\n        language: Optional[str] = None,\n        last_name: Optional[str] = None,\n        namespace: Optional[str] = None,\n        status: Optional[Union[str, StatusEnum]] = None,\n        time_zone: Optional[str] = None,\n        user_id: Optional[str] = None,\n        zip_code: Optional[str] = None,\n    ) -> UserProfileInfo:\n        instance = cls()\n        ...\n        return instance\n\n    @classmethod\n    def create_from_dict(cls, dict_: dict, include_empty: bool = False) -> UserProfileInfo:\n        instance = cls()\n        ...\n        return instance\n\n    @staticmethod\n    def get_field_info() -> Dict[str, str]:\n        return {\n            \"avatarLargeUrl\": \"avatar_large_url\",\n            \"avatarSmallUrl\": \"avatar_small_url\",\n            \"avatarUrl\": \"avatar_url\",\n            \"customAttributes\": \"custom_attributes\",\n            \"dateOfBirth\": \"date_of_birth\",\n            \"firstName\": \"first_name\",\n            \"language\": \"language\",\n            \"lastName\": \"last_name\",\n            \"namespace\": \"namespace\",\n            \"status\": \"status\",\n            \"timeZone\": \"time_zone\",\n            \"userId\": \"user_id\",\n            \"zipCode\": \"zip_code\",\n        }\n\n    ...\n```\n\n#### Operations\n\nEach path item in `#/paths` is turned into an Operation.\n\nExample:\n\n```yaml\n# GET /basic/v1/public/namespaces/{namespace}/users/{userId}/profiles\ndescription: 'Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required\n  permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;,\n  action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;:\n  11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;'\noperationId: publicGetUserProfileInfo\nparameters:\n- description: namespace, only accept alphabet and numeric\n  in: path\n  name: namespace\n  required: true\n  type: string\n- description: user's id, should follow UUID version 4 without hyphen\n  in: path\n  name: userId\n  required: true\n  type: string\nproduces:\n- application/json\nresponses:\n  '200':\n    description: Successful operation\n    schema:\n      $ref: '#/definitions/UserProfileInfo'\n  '400':\n    description: <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation\n      error</td></tr></table>\n    schema:\n      $ref: '#/definitions/ValidationErrorEntity'\n  '401':\n    description: <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>\n    schema:\n      $ref: '#/definitions/ErrorEntity'\n  '403':\n    description: <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient\n      permission</td></tr></table>\n    schema:\n      $ref: '#/definitions/ErrorEntity'\n  '404':\n    description: '<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable\n      to {action}: User profile not found in namespace [{namespace}]</td></tr></table>'\n    schema:\n      $ref: '#/definitions/ErrorEntity'\nsecurity:\n- authorization: []\n- HasPermission:\n  - NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]\n  authorization: []\nsummary: Get user profile\ntags:\n- UserProfile\nx-authorization:\n  action: '2'\n  resource: NAMESPACE:{namespace}:USER:{userId}:PROFILE\n\n```\n\nsame with the models there are also a number of utility functions generated with each operation that should help in the ease of use.\n\n```python\n# accelbyte_py_sdk/api/basic/operations/user_profile/get_user_profile_info.py\n\n# Copyright (c) 2021 AccelByte Inc. All Rights Reserved.\n# This is licensed software from AccelByte Inc, for limitations\n# and restrictions contact your company contract manager.\n# \n# Code generated. DO NOT EDIT!\n\n# template file: accelbyte_gaming services_py_codegen\n\n# pylint: disable=duplicate-code\n# pylint: disable=line-too-long\n# pylint: disable=missing-function-docstring\n# pylint: disable=missing-module-docstring\n# pylint: disable=too-many-arguments\n# pylint: disable=too-many-branches\n# pylint: disable=too-many-instance-attributes\n# pylint: disable=too-many-lines\n# pylint: disable=too-many-locals\n# pylint: disable=too-many-public-methods\n# pylint: disable=too-many-return-statements\n# pylint: disable=too-many-statements\n# pylint: disable=unused-import\n\n# AccelByte Gaming Services Basic Service (1.36.1)\n\nfrom __future__ import annotations\nfrom typing import Any, Dict, List, Optional, Tuple, Union\n\nfrom .....core import Operation\nfrom .....core import HeaderStr\nfrom .....core import HttpResponse\n\nfrom ...models import ErrorEntity\nfrom ...models import UserProfilePrivateInfo\nfrom ...models import ValidationErrorEntity\n\n\nclass GetUserProfileInfo(Operation):\n    \"\"\"Get user profile (getUserProfileInfo)\n\n    Get user profile.\n    Other detail info:\n\n      * Required permission : resource= \"ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE\" , action=2 (READ)\n      *  Returns : user profile\n      *  Action code : 11403\n\n    Required Permission(s):\n        - ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]\n\n    Properties:\n        url: /basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles\n\n        method: GET\n\n        tags: [\"UserProfile\"]\n\n        consumes: []\n\n        produces: [\"application/json\"]\n\n        securities: [BEARER_AUTH] or [BEARER_AUTH]\n\n        namespace: (namespace) REQUIRED str in path\n\n        user_id: (userId) REQUIRED str in path\n\n    Responses:\n        200: OK - UserProfilePrivateInfo (successful operation)\n\n        400: Bad Request - ValidationErrorEntity (20002: validation error)\n\n        401: Unauthorized - ErrorEntity (20001: unauthorized)\n\n        403: Forbidden - ErrorEntity (20013: insufficient permission)\n\n        404: Not Found - ErrorEntity (11440: Unable to {action}: User profile not found in namespace [{namespace}])\n    \"\"\"\n\n    # region fields\n\n    _url: str = \"/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles\"\n    _method: str = \"GET\"\n    _consumes: List[str] = []\n    _produces: List[str] = [\"application/json\"]\n    _securities: List[List[str]] = [[\"BEARER_AUTH\"], [\"BEARER_AUTH\"]]\n    _location_query: str = None\n\n    namespace: str                                                                                 # REQUIRED in [path]\n    user_id: str                                                                                   # REQUIRED in [path]\n\n    # endregion fields\n\n    # region properties\n\n    @property\n    def url(self) -> str:\n        return self._url\n\n    @property\n    def method(self) -> str:\n        return self._method\n\n    @property\n    def consumes(self) -> List[str]:\n        return self._consumes\n\n    @property\n    def produces(self) -> List[str]:\n        return self._produces\n\n    @property\n    def securities(self) -> List[List[str]]:\n        return self._securities\n\n    @property\n    def location_query(self) -> str:\n        return self._location_query\n\n    # endregion properties\n\n    # region get methods\n\n    # endregion get methods\n\n    # region get_x_params methods\n\n    def get_all_params(self) -> dict:\n        return {\n            \"path\": self.get_path_params(),\n        }\n\n    def get_path_params(self) -> dict:\n        result = {}\n        if hasattr(self, \"namespace\"):\n            result[\"namespace\"] = self.namespace\n        if hasattr(self, \"user_id\"):\n            result[\"userId\"] = self.user_id\n        return result\n\n    # endregion get_x_params methods\n\n    # region is/has methods\n\n    # endregion is/has methods\n\n    # region with_x methods\n\n    def with_namespace(self, value: str) -> GetUserProfileInfo:\n        self.namespace = value\n        return self\n\n    def with_user_id(self, value: str) -> GetUserProfileInfo:\n        self.user_id = value\n        return self\n\n    # endregion with_x methods\n\n    # region to methods\n\n    def to_dict(self, include_empty: bool = False) -> dict:\n        result: dict = {}\n        if hasattr(self, \"namespace\") and self.namespace:\n            result[\"namespace\"] = str(self.namespace)\n        elif include_empty:\n            result[\"namespace\"] = \"\"\n        if hasattr(self, \"user_id\") and self.user_id:\n            result[\"userId\"] = str(self.user_id)\n        elif include_empty:\n            result[\"userId\"] = \"\"\n        return result\n\n    # endregion to methods\n\n    # region response methods\n\n    # noinspection PyMethodMayBeStatic\n    def parse_response(self, code: int, content_type: str, content: Any) -> Tuple[Union[None, UserProfilePrivateInfo], Union[None, ErrorEntity, HttpResponse, ValidationErrorEntity]]:\n        \"\"\"Parse the given response.\n\n        200: OK - UserProfilePrivateInfo (successful operation)\n\n        400: Bad Request - ValidationErrorEntity (20002: validation error)\n\n        401: Unauthorized - ErrorEntity (20001: unauthorized)\n\n        403: Forbidden - ErrorEntity (20013: insufficient permission)\n\n        404: Not Found - ErrorEntity (11440: Unable to {action}: User profile not found in namespace [{namespace}])\n\n        ---: HttpResponse (Undocumented Response)\n\n        ---: HttpResponse (Unexpected Content-Type Error)\n\n        ---: HttpResponse (Unhandled Error)\n        \"\"\"\n        pre_processed_response, error = self.pre_process_response(code=code, content_type=content_type, content=content)\n        if error is not None:\n            return None, None if error.is_no_content() else error\n        code, content_type, content = pre_processed_response\n\n        if code == 200:\n            return UserProfilePrivateInfo.create_from_dict(content), None\n        if code == 400:\n            return None, ValidationErrorEntity.create_from_dict(content)\n        if code == 401:\n            return None, ErrorEntity.create_from_dict(content)\n        if code == 403:\n            return None, ErrorEntity.create_from_dict(content)\n        if code == 404:\n            return None, ErrorEntity.create_from_dict(content)\n\n        return self.handle_undocumented_response(code=code, content_type=content_type, content=content)\n\n    # endregion response methods\n\n    # region static methods\n\n    @classmethod\n    def create(\n        cls,\n        namespace: str,\n        user_id: str,\n    ) -> GetUserProfileInfo:\n        instance = cls()\n        instance.namespace = namespace\n        instance.user_id = user_id\n        return instance\n\n    @classmethod\n    def create_from_dict(cls, dict_: dict, include_empty: bool = False) -> GetUserProfileInfo:\n        instance = cls()\n        if \"namespace\" in dict_ and dict_[\"namespace\"] is not None:\n            instance.namespace = str(dict_[\"namespace\"])\n        elif include_empty:\n            instance.namespace = \"\"\n        if \"userId\" in dict_ and dict_[\"userId\"] is not None:\n            instance.user_id = str(dict_[\"userId\"])\n        elif include_empty:\n            instance.user_id = \"\"\n        return instance\n\n    @staticmethod\n    def get_field_info() -> Dict[str, str]:\n        return {\n            \"namespace\": \"namespace\",\n            \"userId\": \"user_id\",\n        }\n\n    @staticmethod\n    def get_required_map() -> Dict[str, bool]:\n        return {\n            \"namespace\": True,\n            \"userId\": True,\n        }\n\n    # endregion static methods\n\n```\n\n#### Creating\n\n:bulb: there are 4 ways to create an instance of these models and operations.\n\n```python\n# 1. using the python __init__() function then setting the parameters manually:\nmodel = ModelName()\nmodel.param_a = \"foo\"\nmodel.param_b = \"bar\"\n\n# 2. using the python __init__() function together with the 'with_x' methods:\n# # the 'with_x' functions are type annotated and will show warnings if a wrong type is passed.\nmodel = ModelName() \\\n    .with_param_a(\"foo\") \\\n    .with_param_b(\"bar\")\n\n# 3. using the ModelName.create(..) class method:\n# # parameters here are also type annotated and will throw a TypeError if a required field was not filled out.\nmodel = ModelName.create(\n    param_a=\"foo\",\n    param_b=\"bar\",\n)\n\n# 4. using the ModelName.create_from_dict(..) class method:\n# # this method also has a 'include_empty' option that would get ignore values that evaluate to False, None, or len() == 0.\nmodel_params = {\n    \"param_a\": \"foo\",\n    \"param_b\": \"bar\",\n    \"param_c\": False,\n    \"param_d\": None,\n    \"param_e\": [],\n    \"param_f\": {},\n}\nmodel = ModelName.create_from_dict(model_params)\n\n# all of these apply to all operations too.\n```\n\n#### Wrappers\n\nTo improve ergonomics the code generator also generates wrappers around the operations.\nThe purpose of these wrappers is to automatically fill up parameters that the SDK already knows.\n(e.g. namespace, client_id, access_token, etc.)\n\nThey are located at `accelbyte_py_sdk.api.<service-name>.wrappers` but can be accessed like so: `from accelbyte_py_sdk.api.<service-name> import <wrapper-name>`\n\n```python\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.api.iam import token_grant_v3\n\nif __name__ == \"__main__\":\n    accelbyte_py_sdk.initialize()\n\n    token, error = token_grant_v3(\n        grant_type=\"client_credentials\"\n    )\n    assert error is not None\n```\n\nThe wrapper function `token_grant_v3` is a wrapper for the `TokenGrantV3` operation.\nIt automatically passes in the information needed like the Basic Auth Headers.\nThe values are gotten from the current `ConfigRepository`.\n\ncontinuing from the previous examples (GetUserProfileInfo), its wrapper would be:\n\n```python\n# accelbyte_py_sdk/api/basic/wrappers/_user_profile.py\n\nfrom typing import Any, Dict, List, Optional, Tuple, Union\n\nfrom ....core import get_namespace as get_services_namespace\nfrom ....core import run_request\nfrom ....core import same_doc_as\n\nfrom ..operations.user_profile import GetUserProfileInfo\n\n\n@same_doc_as(GetUserProfileInfo)\ndef get_user_profile_info(user_id: str, namespace: Optional[str] = None):\n    if namespace is None:\n        namespace, error = get_services_namespace()\n        if error:\n            return None, error\n    request = GetUserProfileInfo.create(\n        user_id=user_id,\n        namespace=namespace,\n    )\n    return run_request(request)\n```\n\nthis wrapper function automatically fills up the required path parameter `namespace`.\n\nnow to use it only the `user_id` is now required.\n\n```python\nimport accelbyte_py_sdk\nfrom accelbyte_py_sdk.api.basic import get_user_profile_info\n\nif __name__ == \"__main__\":\n    accelbyte_py_sdk.initialize()\n\n    user_profile_info, error = get_user_profile_info(user_id=\"lorem\")\n    assert error is not None\n\n    print(f\"Hello there {user_profile_info.first_name}!\")\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "accelbyte-py-sdk",
    "package_url": "https://pypi.org/project/accelbyte-py-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/accelbyte-py-sdk/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/accelbyte-py-sdk/0.37.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "AccelByte Python SDK",
    "version": "0.37.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17472914,
  "releases": {
    "0.23.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "994b4fca9e461d2d3e6ea9ec9b6fe9780c8657494eaa61d4411ef7a0a23e3f2f",
          "md5": "8238c7e00808b84a0e606ceecc429518",
          "sha256": "8e96ab9a7e9ae5ea7bb0796aa8d76a579bc0345f11806fb7b11da887bf72770c"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.23.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8238c7e00808b84a0e606ceecc429518",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5821512,
        "upload_time": "2022-09-26T03:35:32",
        "upload_time_iso_8601": "2022-09-26T03:35:32.251845Z",
        "url": "https://files.pythonhosted.org/packages/99/4b/4fca9e461d2d3e6ea9ec9b6fe9780c8657494eaa61d4411ef7a0a23e3f2f/accelbyte_py_sdk-0.23.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b7ce90a5f39945939d14d42a21c4e2e618a69e62316701963a4c073cb0b7233",
          "md5": "ece870e14a863cec4d2cee2139612a07",
          "sha256": "74e199ab95428ca01363069bca542cbf4750b4120532f79b4403f86d20d95d71"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.23.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ece870e14a863cec4d2cee2139612a07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1505693,
        "upload_time": "2022-09-26T03:35:35",
        "upload_time_iso_8601": "2022-09-26T03:35:35.442724Z",
        "url": "https://files.pythonhosted.org/packages/2b/7c/e90a5f39945939d14d42a21c4e2e618a69e62316701963a4c073cb0b7233/accelbyte_py_sdk-0.23.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.24.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "266a4dcdd8a440d01e404b5282db2afa2a0e25f3e3c7b1ddf71129b1e5ce4f7a",
          "md5": "a38c03417aad554ccb7db1b3a047156f",
          "sha256": "5eba9154afd2b7b55820d4c6dd6d2eaa51b53a20d6e81769e7fd15601519ebcb"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.24.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a38c03417aad554ccb7db1b3a047156f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5807614,
        "upload_time": "2022-09-29T00:52:00",
        "upload_time_iso_8601": "2022-09-29T00:52:00.875290Z",
        "url": "https://files.pythonhosted.org/packages/26/6a/4dcdd8a440d01e404b5282db2afa2a0e25f3e3c7b1ddf71129b1e5ce4f7a/accelbyte_py_sdk-0.24.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db54cc56afab9336ee6117c9f3558a465af765fd6453396e757d67120c753068",
          "md5": "dd66f272731743d91b31a00558e9bb42",
          "sha256": "815c708afb638108309136964f8c14bceadaf58a6fadccd4fddab16fb6b4884b"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.24.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd66f272731743d91b31a00558e9bb42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1492361,
        "upload_time": "2022-09-29T00:52:06",
        "upload_time_iso_8601": "2022-09-29T00:52:06.215647Z",
        "url": "https://files.pythonhosted.org/packages/db/54/cc56afab9336ee6117c9f3558a465af765fd6453396e757d67120c753068/accelbyte_py_sdk-0.24.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.25.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c6b32e2c7409b5bb4f453ec628b09364cfe707f6e862d74cd860841cc60153b",
          "md5": "f52b4a64a4123cdb8d18b7e20c04e15d",
          "sha256": "8a6fc731ead0adf3082be04f37615e7c92697b02205f1d5fb79fb024de6dd5b6"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.25.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f52b4a64a4123cdb8d18b7e20c04e15d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5894890,
        "upload_time": "2022-10-11T03:24:50",
        "upload_time_iso_8601": "2022-10-11T03:24:50.939056Z",
        "url": "https://files.pythonhosted.org/packages/1c/6b/32e2c7409b5bb4f453ec628b09364cfe707f6e862d74cd860841cc60153b/accelbyte_py_sdk-0.25.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df972b8e8f33d3c874cb5a911e972b891a30a9ae690995ff250653ef54d36aed",
          "md5": "c7e3ac30e9a27b6787d40014119a3d9a",
          "sha256": "2ce61b5ac664674eb2d0a748e21c87cb8831d9161f314ce2c06abede9d79a25c"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.25.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c7e3ac30e9a27b6787d40014119a3d9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1514974,
        "upload_time": "2022-10-11T03:24:54",
        "upload_time_iso_8601": "2022-10-11T03:24:54.540889Z",
        "url": "https://files.pythonhosted.org/packages/df/97/2b8e8f33d3c874cb5a911e972b891a30a9ae690995ff250653ef54d36aed/accelbyte_py_sdk-0.25.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.25.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b430081ed4eb118890d3ec96544ec8cd82e479bd52dfbf7a07f0007cd1460267",
          "md5": "3ed9232fb4003cff9d3df07736d44e62",
          "sha256": "cc2b5d6913a44230327c3a4e63d726e2489dc8a0a30fc69d42c3dade07f64d17"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.25.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ed9232fb4003cff9d3df07736d44e62",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5894932,
        "upload_time": "2022-10-17T09:08:39",
        "upload_time_iso_8601": "2022-10-17T09:08:39.062066Z",
        "url": "https://files.pythonhosted.org/packages/b4/30/081ed4eb118890d3ec96544ec8cd82e479bd52dfbf7a07f0007cd1460267/accelbyte_py_sdk-0.25.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "010ccbd8b4af56f9b3998686119c3ed77c3286d922a95b044995df7f9f5aa842",
          "md5": "d7af2f7f147354997c18cc15a6e6b5a4",
          "sha256": "669a0efcd2416382c2bc7bb7a41ad4f8ed6e05ee803257f5c7a9e95bc0c6c951"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.25.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d7af2f7f147354997c18cc15a6e6b5a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1515222,
        "upload_time": "2022-10-17T09:08:43",
        "upload_time_iso_8601": "2022-10-17T09:08:43.237229Z",
        "url": "https://files.pythonhosted.org/packages/01/0c/cbd8b4af56f9b3998686119c3ed77c3286d922a95b044995df7f9f5aa842/accelbyte_py_sdk-0.25.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.26.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7698e07dc42b67a78cc159e690a5de138847d9e0c6147fee15497d83f14803c3",
          "md5": "5f296372e6fbf09897d15da3c2d4ecac",
          "sha256": "70cd967bb7b4f53c7cc23c227baaf4b8860f903eaeda52340efc6df75e946141"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.26.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f296372e6fbf09897d15da3c2d4ecac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5915216,
        "upload_time": "2022-10-25T05:46:43",
        "upload_time_iso_8601": "2022-10-25T05:46:43.633006Z",
        "url": "https://files.pythonhosted.org/packages/76/98/e07dc42b67a78cc159e690a5de138847d9e0c6147fee15497d83f14803c3/accelbyte_py_sdk-0.26.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d73481e324ed404014c49e5e5d7b3522e95efec4ff123bc91049e2b6cb2127c3",
          "md5": "fb8dd8d166565b3d009d6b7af06569d8",
          "sha256": "0aff3896181c0779e796d06a500c838d86e695be167c586d76c9578173429a44"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.26.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fb8dd8d166565b3d009d6b7af06569d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1522538,
        "upload_time": "2022-10-25T05:46:46",
        "upload_time_iso_8601": "2022-10-25T05:46:46.960740Z",
        "url": "https://files.pythonhosted.org/packages/d7/34/81e324ed404014c49e5e5d7b3522e95efec4ff123bc91049e2b6cb2127c3/accelbyte_py_sdk-0.26.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.26.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3706da7919744a0d32dad65db1765a258bc85540bce86cd73d0a43a5b0dd19d",
          "md5": "0f19c0e7d7ef9d091fb385d7a6b041f7",
          "sha256": "c49062dd552d68061f44d65a431c88a15242504ce06a764c2db314dbe8237e18"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.26.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f19c0e7d7ef9d091fb385d7a6b041f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5915160,
        "upload_time": "2022-11-03T08:05:32",
        "upload_time_iso_8601": "2022-11-03T08:05:32.717097Z",
        "url": "https://files.pythonhosted.org/packages/b3/70/6da7919744a0d32dad65db1765a258bc85540bce86cd73d0a43a5b0dd19d/accelbyte_py_sdk-0.26.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f7d111bf8deab412a7fa33653339ea7f8fae94e5fccc9e1c1498e71e29e6d29",
          "md5": "c3ad2f7b6b8fa578223a9d0999bf5908",
          "sha256": "7b48631f3ad04059af1fe2d5d6d5f3bed5d84514e349fb4029d3502704ff6b88"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.26.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3ad2f7b6b8fa578223a9d0999bf5908",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1522751,
        "upload_time": "2022-11-03T08:05:35",
        "upload_time_iso_8601": "2022-11-03T08:05:35.542596Z",
        "url": "https://files.pythonhosted.org/packages/5f/7d/111bf8deab412a7fa33653339ea7f8fae94e5fccc9e1c1498e71e29e6d29/accelbyte_py_sdk-0.26.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.27.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b37f8ecc09d2c393f77e515d42098d94e6a357882a7cb1b5c126820aa15478fb",
          "md5": "c92161c93ac9f5698758347e53addefa",
          "sha256": "0516c87f58b26ee2294e375b484c1c389e7d556bbb24f0bd77ba679f9a9f0962"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c92161c93ac9f5698758347e53addefa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5915633,
        "upload_time": "2022-11-08T05:00:55",
        "upload_time_iso_8601": "2022-11-08T05:00:55.972989Z",
        "url": "https://files.pythonhosted.org/packages/b3/7f/8ecc09d2c393f77e515d42098d94e6a357882a7cb1b5c126820aa15478fb/accelbyte_py_sdk-0.27.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f99152c108287974fca9e5b9f4852709012897580b66a74060eac2d93706a7e8",
          "md5": "69c868829ed754e40e253317f075c951",
          "sha256": "bdebd9f8a916b4bc5bec13c7a7ac1273b9f02bc4587d8f88d59cf587f24d114f"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69c868829ed754e40e253317f075c951",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1520070,
        "upload_time": "2022-11-08T05:01:02",
        "upload_time_iso_8601": "2022-11-08T05:01:02.540212Z",
        "url": "https://files.pythonhosted.org/packages/f9/91/52c108287974fca9e5b9f4852709012897580b66a74060eac2d93706a7e8/accelbyte_py_sdk-0.27.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.27.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cd774c8c3ed391c0f6a9dc21fc5d469908ed35f143fbcee9229974261329843",
          "md5": "530402d452acd3dc72e3010a08caadd6",
          "sha256": "40573c15715f18a0295f78c0a0454c262c320a4e00c6f2d1e90cd780552b34dc"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "530402d452acd3dc72e3010a08caadd6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5915696,
        "upload_time": "2022-11-11T07:51:03",
        "upload_time_iso_8601": "2022-11-11T07:51:03.709768Z",
        "url": "https://files.pythonhosted.org/packages/7c/d7/74c8c3ed391c0f6a9dc21fc5d469908ed35f143fbcee9229974261329843/accelbyte_py_sdk-0.27.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0834176f9a4a3fc5be65b588167cb60114f723e913647cec6ab1e09651108255",
          "md5": "a9304110dba7f0a3bee2734f5808502e",
          "sha256": "4a98a908357324929556c0fb116dc098949fd2453d16ae11cc9b6a7bfca2d94b"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9304110dba7f0a3bee2734f5808502e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1520156,
        "upload_time": "2022-11-11T07:51:08",
        "upload_time_iso_8601": "2022-11-11T07:51:08.721166Z",
        "url": "https://files.pythonhosted.org/packages/08/34/176f9a4a3fc5be65b588167cb60114f723e913647cec6ab1e09651108255/accelbyte_py_sdk-0.27.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.27.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47649d18777506495658fec8a4dec5fa8b540087e628995401047b94f7ea38ac",
          "md5": "a8157c3d2e546ba06e7b661c35336eb0",
          "sha256": "7fff31d8f291513a42955516635241074c8495c84c562537a2c14884c48ff4c4"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8157c3d2e546ba06e7b661c35336eb0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5915935,
        "upload_time": "2022-11-14T04:28:38",
        "upload_time_iso_8601": "2022-11-14T04:28:38.188198Z",
        "url": "https://files.pythonhosted.org/packages/47/64/9d18777506495658fec8a4dec5fa8b540087e628995401047b94f7ea38ac/accelbyte_py_sdk-0.27.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd0464c8a58d5bbe08e87dccbbc735ea432d333a08cd32d3b75a0085e04eb598",
          "md5": "c6f9b481d4350a473d5704a416cebedb",
          "sha256": "6a60e7f105905b5fe55ce135f260f4a4ce362867a00034819c98d6fe29bd7439"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c6f9b481d4350a473d5704a416cebedb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1520196,
        "upload_time": "2022-11-14T04:28:41",
        "upload_time_iso_8601": "2022-11-14T04:28:41.895053Z",
        "url": "https://files.pythonhosted.org/packages/fd/04/64c8a58d5bbe08e87dccbbc735ea432d333a08cd32d3b75a0085e04eb598/accelbyte_py_sdk-0.27.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.27.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b796e4ea01c98470d2e167d9376c201918082f8dbe0ea88a1907f3400af9440",
          "md5": "587778237cc7f6b4128b72a06abb0d10",
          "sha256": "7a815e4480d2d2d27b4b5e59c4c71dde10e61d9f71a1aaa56df138bc176bdfc8"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "587778237cc7f6b4128b72a06abb0d10",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 5933416,
        "upload_time": "2022-11-18T05:04:59",
        "upload_time_iso_8601": "2022-11-18T05:04:59.100591Z",
        "url": "https://files.pythonhosted.org/packages/5b/79/6e4ea01c98470d2e167d9376c201918082f8dbe0ea88a1907f3400af9440/accelbyte_py_sdk-0.27.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7b1086393f89d3e8067b1ef7f094073eec7d3885542203101bdfe3b26ae8976",
          "md5": "705556db4441fc7e424e51b666c1484f",
          "sha256": "170eb63502e05b7ec03bf27f35d62a5a48d1ec8078ffb9047bc7a17aa1beee4c"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.27.3.tar.gz",
        "has_sig": false,
        "md5_digest": "705556db4441fc7e424e51b666c1484f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1524437,
        "upload_time": "2022-11-18T05:05:01",
        "upload_time_iso_8601": "2022-11-18T05:05:01.954260Z",
        "url": "https://files.pythonhosted.org/packages/d7/b1/086393f89d3e8067b1ef7f094073eec7d3885542203101bdfe3b26ae8976/accelbyte_py_sdk-0.27.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.28.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c56e93efd8e3e7617a0cd1fb83e71e18edb44d7e78fd0be26821b4ab2e49727",
          "md5": "fbfbcd5cf0a7224d13fff979b1d74f95",
          "sha256": "abd9e9c71317194b5135f9718b0b6183bc7036fd22417724dbd415de4a5e8030"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.28.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbfbcd5cf0a7224d13fff979b1d74f95",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6178922,
        "upload_time": "2022-11-22T05:01:50",
        "upload_time_iso_8601": "2022-11-22T05:01:50.628256Z",
        "url": "https://files.pythonhosted.org/packages/9c/56/e93efd8e3e7617a0cd1fb83e71e18edb44d7e78fd0be26821b4ab2e49727/accelbyte_py_sdk-0.28.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b65866d8a17e51508b3aa1f5a0c237a1ee71d8369a4bad41bbb224cfbd0f11",
          "md5": "d7e815b4d7542f3cad21ecdc921a8247",
          "sha256": "ba4408e001d3a141cfcfca014130cd9e68177f9ec6ca8752bc3a7c2a98469a5d"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.28.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d7e815b4d7542f3cad21ecdc921a8247",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1586357,
        "upload_time": "2022-11-22T05:01:54",
        "upload_time_iso_8601": "2022-11-22T05:01:54.269618Z",
        "url": "https://files.pythonhosted.org/packages/e5/b6/5866d8a17e51508b3aa1f5a0c237a1ee71d8369a4bad41bbb224cfbd0f11/accelbyte_py_sdk-0.28.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.29.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8d5a995c6efd3fc5e0e36cc1e8cbd3f1ae03e925027967405673968685c763f",
          "md5": "79de06f3a20cdc639bbbbe49c33169a9",
          "sha256": "f7bbd00a2cc5be0c9833e329ae0732da7c9307e5fc8f55525bd75be2a1051b26"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.29.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79de06f3a20cdc639bbbbe49c33169a9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6199351,
        "upload_time": "2022-12-06T04:26:51",
        "upload_time_iso_8601": "2022-12-06T04:26:51.194955Z",
        "url": "https://files.pythonhosted.org/packages/c8/d5/a995c6efd3fc5e0e36cc1e8cbd3f1ae03e925027967405673968685c763f/accelbyte_py_sdk-0.29.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51757457473e064de621ba90400c91cc637c624cdcc69efa3e28faf31244de78",
          "md5": "5ce819cfecb64fd1c00ef754a52eb2de",
          "sha256": "6cd87a9f4238e51192745ee57f0b89bea996c93d76658d8097966d9a5c56b4ae"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.29.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ce819cfecb64fd1c00ef754a52eb2de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1594501,
        "upload_time": "2022-12-06T04:26:54",
        "upload_time_iso_8601": "2022-12-06T04:26:54.323607Z",
        "url": "https://files.pythonhosted.org/packages/51/75/7457473e064de621ba90400c91cc637c624cdcc69efa3e28faf31244de78/accelbyte_py_sdk-0.29.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.30.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d13d3224d0a8aba3b8e2e1f5dd5231226ef2cd13af82f11e5d8b8f7267dc484",
          "md5": "e8ac517cde4f4cf88af999d4162132f1",
          "sha256": "97d71a13c07e2daca8ebc6d5c924d43bb0bf71d664efe790ab8ddbfbc01551e9"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.30.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8ac517cde4f4cf88af999d4162132f1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6245979,
        "upload_time": "2022-12-20T06:41:58",
        "upload_time_iso_8601": "2022-12-20T06:41:58.450817Z",
        "url": "https://files.pythonhosted.org/packages/8d/13/d3224d0a8aba3b8e2e1f5dd5231226ef2cd13af82f11e5d8b8f7267dc484/accelbyte_py_sdk-0.30.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e078f41a66162f44f4e9a9d15910e1ff51c71099d3502e92fe10f8fa541ea42",
          "md5": "21982f9796a5c7f4c1000c20475ad44b",
          "sha256": "92b03b12d382fa8832f5de4390f5ea9a73d5f23f722ebe9f8cf348c41a5363a9"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.30.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21982f9796a5c7f4c1000c20475ad44b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1606760,
        "upload_time": "2022-12-20T06:42:01",
        "upload_time_iso_8601": "2022-12-20T06:42:01.013597Z",
        "url": "https://files.pythonhosted.org/packages/9e/07/8f41a66162f44f4e9a9d15910e1ff51c71099d3502e92fe10f8fa541ea42/accelbyte_py_sdk-0.30.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.31.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a39eaaaf7604711d1e2a3a1b87a65393231774fa1a44a7f6c698c12ed7ab3d4",
          "md5": "149b3a1332d6b9134f9923a070a65513",
          "sha256": "dd1a00539f786b3f8d269db7c69a50ce49296205635b58a7fe1360e5aafd6d1c"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.31.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "149b3a1332d6b9134f9923a070a65513",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6317175,
        "upload_time": "2023-01-04T03:09:01",
        "upload_time_iso_8601": "2023-01-04T03:09:01.813609Z",
        "url": "https://files.pythonhosted.org/packages/7a/39/eaaaf7604711d1e2a3a1b87a65393231774fa1a44a7f6c698c12ed7ab3d4/accelbyte_py_sdk-0.31.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c8ac693c9f08833ac2e2e9dc673e509dc6d5f12f0a48e034f55c6506d232964",
          "md5": "5c155c1ecc6946b845887802ec277ec8",
          "sha256": "024b28f67455d5d9b0283c36c59c36b23fcc08bb3ba2458960518ad12bb908d8"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.31.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c155c1ecc6946b845887802ec277ec8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1626698,
        "upload_time": "2023-01-04T03:09:04",
        "upload_time_iso_8601": "2023-01-04T03:09:04.590132Z",
        "url": "https://files.pythonhosted.org/packages/5c/8a/c693c9f08833ac2e2e9dc673e509dc6d5f12f0a48e034f55c6506d232964/accelbyte_py_sdk-0.31.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.32.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dadb639390f36f8865e4adb63d3f8935140be4f2f2b7c8b9afc6494fd7e83c83",
          "md5": "e60beae7860f6c1297b689941aaabaec",
          "sha256": "796a53c0dfb0b960610d9744b5c0d95274b9676eaa89a243aa48dba0b1d3b8f2"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.32.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e60beae7860f6c1297b689941aaabaec",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6359038,
        "upload_time": "2023-01-17T03:06:24",
        "upload_time_iso_8601": "2023-01-17T03:06:24.363108Z",
        "url": "https://files.pythonhosted.org/packages/da/db/639390f36f8865e4adb63d3f8935140be4f2f2b7c8b9afc6494fd7e83c83/accelbyte_py_sdk-0.32.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "928a973d55759b46463973dfb5263029f6e1617edb8fda71bbfb912a97055deb",
          "md5": "c89efb9246644904a6004d37db5b94e5",
          "sha256": "051dd6a82ec9d536263f74affe8f0938f052ed034bdf7effd2486689fb235cad"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.32.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c89efb9246644904a6004d37db5b94e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1642343,
        "upload_time": "2023-01-17T03:06:27",
        "upload_time_iso_8601": "2023-01-17T03:06:27.055538Z",
        "url": "https://files.pythonhosted.org/packages/92/8a/973d55759b46463973dfb5263029f6e1617edb8fda71bbfb912a97055deb/accelbyte_py_sdk-0.32.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.33.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "871ecb37962110d2b6bb614dcb093765115c8136beccd5174eca0b26f06ba69f",
          "md5": "afb009dd5cbe2c27527fdd7ac79ac60a",
          "sha256": "c5a70e7f95173fb111519c30a76df9f75f00ed7cee77990e0f3bf69fd1086dc6"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.33.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afb009dd5cbe2c27527fdd7ac79ac60a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6481852,
        "upload_time": "2023-01-31T05:00:53",
        "upload_time_iso_8601": "2023-01-31T05:00:53.615922Z",
        "url": "https://files.pythonhosted.org/packages/87/1e/cb37962110d2b6bb614dcb093765115c8136beccd5174eca0b26f06ba69f/accelbyte_py_sdk-0.33.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "060e5805c8868ca8640609829d819723ab82ff865da0545c25f235246b272cd8",
          "md5": "dc486c630cce314ee9af21def12be292",
          "sha256": "19dd6f24f0105f54ba6f57d9e8c23b7c767ca21285580385f7953b1af6d16960"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.33.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc486c630cce314ee9af21def12be292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1665001,
        "upload_time": "2023-01-31T05:00:56",
        "upload_time_iso_8601": "2023-01-31T05:00:56.709436Z",
        "url": "https://files.pythonhosted.org/packages/06/0e/5805c8868ca8640609829d819723ab82ff865da0545c25f235246b272cd8/accelbyte_py_sdk-0.33.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.34.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0d3247e02466a6475af4407beb0866ace1354712003f629d331025ca8fff733",
          "md5": "f077209d46de50109d42b0d54ca0e644",
          "sha256": "1b9f2603146eacc0e66101e22a652239f99f956b16d3060e0b8b3143fa250db6"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.34.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f077209d46de50109d42b0d54ca0e644",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 6763934,
        "upload_time": "2023-02-14T07:51:15",
        "upload_time_iso_8601": "2023-02-14T07:51:15.648671Z",
        "url": "https://files.pythonhosted.org/packages/c0/d3/247e02466a6475af4407beb0866ace1354712003f629d331025ca8fff733/accelbyte_py_sdk-0.34.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f62a09d56585108f8022a6b7d721ab0e80ce39c7a2c54277253aa8fb491c1410",
          "md5": "b5719147be8a8bf2bcfa701ada3af4fa",
          "sha256": "d97c2a8513572ccb0b56ef6a35014635ac35add3b0415445abf7d4de96476f44"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.34.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5719147be8a8bf2bcfa701ada3af4fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1734932,
        "upload_time": "2023-02-14T07:51:18",
        "upload_time_iso_8601": "2023-02-14T07:51:18.739252Z",
        "url": "https://files.pythonhosted.org/packages/f6/2a/09d56585108f8022a6b7d721ab0e80ce39c7a2c54277253aa8fb491c1410/accelbyte_py_sdk-0.34.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.35.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e42e8c64fe63f6c7252c17274ea362c3d0acf8a55996f20e9a91f4a7f48a383f",
          "md5": "9f71dbe098a9e8eb73a58066fda16def",
          "sha256": "c189684452d76cc747ace4202b82fb1ce8d9bec5930c05e561cad0711445dbbb"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.35.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f71dbe098a9e8eb73a58066fda16def",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 7082922,
        "upload_time": "2023-02-28T03:41:29",
        "upload_time_iso_8601": "2023-02-28T03:41:29.744402Z",
        "url": "https://files.pythonhosted.org/packages/e4/2e/8c64fe63f6c7252c17274ea362c3d0acf8a55996f20e9a91f4a7f48a383f/accelbyte_py_sdk-0.35.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52761768d96332427357eca6ad92ea6a7459a97b0fd7c2bc53293fd605e51f59",
          "md5": "540539747963a301d2be08ce9a49a246",
          "sha256": "1b0e0fdfe79bd13507a97f29f8baf8408965c06b2a2843a3a213624757e41ce6"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.35.0.tar.gz",
        "has_sig": false,
        "md5_digest": "540539747963a301d2be08ce9a49a246",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1973698,
        "upload_time": "2023-02-28T03:41:32",
        "upload_time_iso_8601": "2023-02-28T03:41:32.553028Z",
        "url": "https://files.pythonhosted.org/packages/52/76/1768d96332427357eca6ad92ea6a7459a97b0fd7c2bc53293fd605e51f59/accelbyte_py_sdk-0.35.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.36.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0d74523cd31743ca746d4b8df06644e12298a176d8516c4a5ae5f9423d5c1b0",
          "md5": "e310b8e470055e3c159c11fa1de83e67",
          "sha256": "764501fbd0fe0e57b854b6055d4efb4a6b265c5719844291f5f53e8958301941"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.36.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e310b8e470055e3c159c11fa1de83e67",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 7136081,
        "upload_time": "2023-03-14T06:58:23",
        "upload_time_iso_8601": "2023-03-14T06:58:23.280375Z",
        "url": "https://files.pythonhosted.org/packages/e0/d7/4523cd31743ca746d4b8df06644e12298a176d8516c4a5ae5f9423d5c1b0/accelbyte_py_sdk-0.36.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "828e8f18179c9efca4a3a6cabc1ec518ca42a0c46463ad64599fde6ebe1ae2aa",
          "md5": "bfe510a5169ec90ce1e5cb0c445525c1",
          "sha256": "e9dc04dd8e22795c8f70f19128a87bdee38360b2aa9e19ccd5d0a959fa86e699"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.36.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bfe510a5169ec90ce1e5cb0c445525c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1989036,
        "upload_time": "2023-03-14T06:58:25",
        "upload_time_iso_8601": "2023-03-14T06:58:25.841453Z",
        "url": "https://files.pythonhosted.org/packages/82/8e/8f18179c9efca4a3a6cabc1ec518ca42a0c46463ad64599fde6ebe1ae2aa/accelbyte_py_sdk-0.36.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.37.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccc5704b253ad3b0331efbe81dfc599f87a01f3876dac7a138b31811a4832882",
          "md5": "e1087fa7e94251882b3f8ec47b3a6d18",
          "sha256": "03c350f83179b25b76715c1fe19e9576619395110ed309f2b429d0a4069de478"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.37.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1087fa7e94251882b3f8ec47b3a6d18",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 7203675,
        "upload_time": "2023-03-28T03:59:08",
        "upload_time_iso_8601": "2023-03-28T03:59:08.526690Z",
        "url": "https://files.pythonhosted.org/packages/cc/c5/704b253ad3b0331efbe81dfc599f87a01f3876dac7a138b31811a4832882/accelbyte_py_sdk-0.37.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b334699391fcf465f77de2a657e8b13158ca207ea878e47b0c3252900dd5d0af",
          "md5": "7d0b0439a0e127b6577852d627635f8f",
          "sha256": "4791cfdb7ba4d5655ea3ac86fd7851f29eb719d5e95c293cf87237a7df714889"
        },
        "downloads": -1,
        "filename": "accelbyte_py_sdk-0.37.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d0b0439a0e127b6577852d627635f8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 2013168,
        "upload_time": "2023-03-28T03:59:11",
        "upload_time_iso_8601": "2023-03-28T03:59:11.716926Z",
        "url": "https://files.pythonhosted.org/packages/b3/34/699391fcf465f77de2a657e8b13158ca207ea878e47b0c3252900dd5d0af/accelbyte_py_sdk-0.37.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccc5704b253ad3b0331efbe81dfc599f87a01f3876dac7a138b31811a4832882",
        "md5": "e1087fa7e94251882b3f8ec47b3a6d18",
        "sha256": "03c350f83179b25b76715c1fe19e9576619395110ed309f2b429d0a4069de478"
      },
      "downloads": -1,
      "filename": "accelbyte_py_sdk-0.37.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1087fa7e94251882b3f8ec47b3a6d18",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.9",
      "size": 7203675,
      "upload_time": "2023-03-28T03:59:08",
      "upload_time_iso_8601": "2023-03-28T03:59:08.526690Z",
      "url": "https://files.pythonhosted.org/packages/cc/c5/704b253ad3b0331efbe81dfc599f87a01f3876dac7a138b31811a4832882/accelbyte_py_sdk-0.37.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b334699391fcf465f77de2a657e8b13158ca207ea878e47b0c3252900dd5d0af",
        "md5": "7d0b0439a0e127b6577852d627635f8f",
        "sha256": "4791cfdb7ba4d5655ea3ac86fd7851f29eb719d5e95c293cf87237a7df714889"
      },
      "downloads": -1,
      "filename": "accelbyte_py_sdk-0.37.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7d0b0439a0e127b6577852d627635f8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 2013168,
      "upload_time": "2023-03-28T03:59:11",
      "upload_time_iso_8601": "2023-03-28T03:59:11.716926Z",
      "url": "https://files.pythonhosted.org/packages/b3/34/699391fcf465f77de2a657e8b13158ca207ea878e47b0c3252900dd5d0af/accelbyte_py_sdk-0.37.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}