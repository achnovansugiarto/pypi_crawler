{
  "info": {
    "author": "MrFluid",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# HOW TO DOWNLOAD\n```\n+++++++++++++++++++++++++++\nRun this command in your Project's Shell\n```\n     pip install Scapii\n```\n Copy the code from the import section below and paste it into your main python file.\n+++++++++++++++++++++++++++\n```\n---------------------------------------------------------------------\n\n# Import:\n```\nimport ScAPI as scratch, os\nfrom ScAPI import ScAPI\nsAPI = ScAPI('username', 'password')\n```\n\n---------------------------------------------------------------------\n\n# USER:\n``` user = sAPI.user('username') # Input the user to fetch data from\n+++++++++++++++++++++++++++\nuser.exists() # Checks if the user exists, output gives true/false\n\nuser.getMessagesCount() # Gets the users MessageCount (Broken because of scratch)\n\nuser.getMessages() # Gets the users messages and returns it as a .json file\n\n\nuser.getStatus() # Gets the About Me Section of the users profile\n\n\nuser.getBio() # Gets the What I'm Working On Section of the users profile\n\n\nuser.getProjects() # Gets the Project IDs of the users published projects\n+++++++++++++++++++++++++++\n``` \n\n\n---------------------------------------------------------------------\n\n\n# USER SESSION:\n``` studio = sAPI.studioSession('sid') # Input the studio to fetch data from\n+++++++++++++++++++++++++++\nstudio.inviteCurator('person') # Invites the member to the selected studio\n\nstudio.addStudioProject('pid') # Adds a project to the selected studio\n\nstudio.postComment('Text', 'parentid', 'commentee_id') # Posts a comment in the selected studio\n\nstudio.getComments() # Gets the comments of the selected studio\n\nstudio.follow() # follows the selected studio\n\nstudio.unfollow() # unfollows the selected studio\n+++++++++++++++++++++++++++\n``` \n# PROJECT:\n``` project = sAPI.project('id') # Input the project to fetch data from\n+++++++++++++++++++++++++++\nproject.getStats('loves/faves/remixes/views') # Gets the statistics of the selected project\n\nproject.getComments() # Gets the comments of the selected project\n\nproject.getInfo() Gets the project info of the selected project\n\nproject.fetchAssets(type='img') # Gets the thumbnail of the selected project\n+++++++++++++++++++++++++++\n``` \n\n---------------------------------------------------------------------\n\n\n# PROJECT SESSION:\n``` project = sAPI.projectSession('id') # Input the project to modify it.\n+++++++++++++++++++++++++++\nproject.share() # Shares the project\n\nproject.unshare() # Unshares the project\n\nproject.favorite() # Favorites the project\n\nproject.unfavorite() # Unfavorites the project\n\nproject.love() # Loves the project\n\nproject.unlove() # Unloves the project\n+++++++++++++++++++++++++++\n```\n\n---------------------------------------------------------------------\n\n\n# CLOUD SESSION:\n``` cloudproject = sAPI.scratchConnect('Project_Id') # Input the Project ID to modify/fetch data from\n+++++++++++++++++++++++++++\ncloudproject.setCloudVar('CloudVar', 'Value') # Sets the variable of the project\n\ncloudproject.readCloudVar('variable name', 'Limit(optional)') # Fetchs the variable of the project\n+++++++++++++++++++++++++++\n``` \n\n\n---------------------------------------------------------------------\n\n\n# TURBOWARP SESSION:\n``` turbowarp = sAPI.turbowarpConnect('project_id') # Input the Project ID to modify/fetch data from\n+++++++++++++++++++++++++++\nturbowarp.setCloudVar('CloudVar', 'Value') # Sets the variable of the project (On TurboWarp)\n\nturbowarp.readTurbowarpVar('variable name') # Fetchs the variable of the project (On TurboWarp)\n+++++++++++++++++++++++++++\n``` \n\n# CLOUD DATABASE:\n``` \n+++++++++++++++++++++++++++\ndb = sAPI.cloudDatabase('Project id') # Input the project ID to store data to\n\ndb.startLoop() # Detects messages from chatting servers on the selected project\n+++++++++++++++++++++++++++\n``` \n\n\n---------------------------------------------------------------------\n\n\n# ENCODE/DECODE:\n# (THE SCRATCH ENCODER/DECODER SCRIPTS ARE LOCATED @ https://scratch.mit.edu/projects/607983101/editor/)\n``` \n+++++++++++++++++++++++++++\nsAPI.encode('value') # Encodes the given value\n\nsAPI.decode('value') # Decodes the given value\n+++++++++++++++++++++++++++\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kruffer/Scappi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Scappi",
    "package_url": "https://pypi.org/project/Scappi/",
    "platform": "",
    "project_url": "https://pypi.org/project/Scappi/",
    "project_urls": {
      "Homepage": "https://github.com/kruffer/Scappi"
    },
    "release_url": "https://pypi.org/project/Scappi/1.0.0/",
    "requires_dist": [
      "websocket-client",
      "ScratchEncoder",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Python to Scratch API Bridge",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12148766,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c0aca79e68f038e7b1730e52c27bea01167769c4b34c5ffbeee4be8c7d3853e",
          "md5": "83bfe073e15eb7d997de835317a85b60",
          "sha256": "f7beede6820b86b5c3b349b4aebad4935fa224f773d0ceb377b540f46414dc00"
        },
        "downloads": -1,
        "filename": "Scappi-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83bfe073e15eb7d997de835317a85b60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9130,
        "upload_time": "2021-11-28T22:24:33",
        "upload_time_iso_8601": "2021-11-28T22:24:33.172796Z",
        "url": "https://files.pythonhosted.org/packages/7c/0a/ca79e68f038e7b1730e52c27bea01167769c4b34c5ffbeee4be8c7d3853e/Scappi-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34bb5919ed26b94a2a0ac2bda5b013ef2c3c622744800fb162f9ae4e4abe1ea4",
          "md5": "5391b97d1cf655bc042c7c8d8525598e",
          "sha256": "a120ce786028946bd0827e2bbf4cad3559fcc96e8a64b46b112e5a6d8fca3aab"
        },
        "downloads": -1,
        "filename": "Scappi-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5391b97d1cf655bc042c7c8d8525598e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10505,
        "upload_time": "2021-11-28T22:24:34",
        "upload_time_iso_8601": "2021-11-28T22:24:34.879188Z",
        "url": "https://files.pythonhosted.org/packages/34/bb/5919ed26b94a2a0ac2bda5b013ef2c3c622744800fb162f9ae4e4abe1ea4/Scappi-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c0aca79e68f038e7b1730e52c27bea01167769c4b34c5ffbeee4be8c7d3853e",
        "md5": "83bfe073e15eb7d997de835317a85b60",
        "sha256": "f7beede6820b86b5c3b349b4aebad4935fa224f773d0ceb377b540f46414dc00"
      },
      "downloads": -1,
      "filename": "Scappi-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "83bfe073e15eb7d997de835317a85b60",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9130,
      "upload_time": "2021-11-28T22:24:33",
      "upload_time_iso_8601": "2021-11-28T22:24:33.172796Z",
      "url": "https://files.pythonhosted.org/packages/7c/0a/ca79e68f038e7b1730e52c27bea01167769c4b34c5ffbeee4be8c7d3853e/Scappi-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34bb5919ed26b94a2a0ac2bda5b013ef2c3c622744800fb162f9ae4e4abe1ea4",
        "md5": "5391b97d1cf655bc042c7c8d8525598e",
        "sha256": "a120ce786028946bd0827e2bbf4cad3559fcc96e8a64b46b112e5a6d8fca3aab"
      },
      "downloads": -1,
      "filename": "Scappi-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5391b97d1cf655bc042c7c8d8525598e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10505,
      "upload_time": "2021-11-28T22:24:34",
      "upload_time_iso_8601": "2021-11-28T22:24:34.879188Z",
      "url": "https://files.pythonhosted.org/packages/34/bb/5919ed26b94a2a0ac2bda5b013ef2c3c622744800fb162f9ae4e4abe1ea4/Scappi-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}