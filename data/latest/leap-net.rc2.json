{
  "info": {
    "author": "Benjamin DONNOT",
    "author_email": "benjamin.donnot@rte-france.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# leap_net\nThis repository implements the necessary algorithm and data generation process to reproduce the results published around LEAP Net.\n\n## What is the leap net\n\n### Brief introduction\nSuppose you have a \"system\" `S` that generates data `y` from input data `x`. Suppose also that the response `y` of this\nsystem can be modulated depending on some known setpoint `τ`. \n\nIn our experiments, `S` was a powergrid, we were interested in predicting `y` the vector representing the flows\non each powerline of this grid. These flows are determined by the power injected at each \"bus\" (a bus is the \nword in the power system community close to meaning \"nodes\") of the `x` (these injections can be both positive if power \nis injected, typically when there is a production unit, or negative when there power is consumed). The vector `τ`\nencodes for variation of the topology of the powergrid, typically \"is a powerline connected or disconnected\" and \n\"is this powerline connected to this other powerline\".\n\nIn summary we suppose a generation process `y = S(x, τ)`. We also suppose that we have some dataset\n`{(x_i, τ_i, y_i)}` that was generated using this model with input data coming from a distribution `D = Dist(x, τ)`. \nThe LEAP net is a \"novel\" neural network architecture that is \nable to predict some response `ŷ_i` from  `x_i` and `τ_i` with the following properties\n \n- it is fully trainable by stochastic gradient descent like any neural network\n- its implementation (given here in keras) is really simple\n- on data `(x, τ)` drawn from the same distribution `D` than the one use for training `ŷ` is good approximation\n- most importantly, under some circumstances, even if `(x, τ)` is **NOT** drawn from the distribution used to train it.\n\nWe call this last property \"*super generalization*\". This is somewhat related to transfer learning and *zero shot* /\n*few shots* learning. We explored this super-generalization properties with discrete modulation `τ` in the case\nwhere, for example, the neural network is learned when the system `S` has **zero** or **one** \ndisconnected powerline but it's still able to perform accurate prediction even when **two** powerlines are disconnected\nat the same time.\n\nInternally, we also made some experiments on load forecast, where the input `x` included the past realized loads and\nthe weather forecast for example. The modulating\nvariable `τ` included the properties of the day to predict *eg* is it a monday or a sunday ? It is during bank holiday ?\nIs there lots of road traffic (indicating possible start of holidays) this day ? etc. On another topic we also studied \nthis model in the context of generative models (cVAE or GANs) where `x` was noise, `y` MNIST images and the modulator \n`τ` included the color or rotation of the generated digits.\n\nLEAP Net gave also pretty good results on all these tasks that we didn't had time to polish for publishing. This makes\nus believe that the leap net model is suited in different context than powergrid related application and usable\nfor modulator `τ` both discrete and continuous.\n\n### References\nTo know more about the leap Net, you can have a look at the\n[LEAP nets for power grid perturbations](https://arxiv.org/pdf/1908.08314.pdf) paper available on arxiv publish at the\nESANN conference.\n\nIt has been my main focus during my PhD titled\n[Deep learning methods for predicting flows in power grids : novel architectures and algorithms\n](https://tel.archives-ouvertes.fr/tel-02045873/document)\nalso available online.\n\nMore recently, some analytical proofs and further development where published in the paper \n[LEAP Nets for System Identification and Application to Power Systems\n](https://www.sciencedirect.com/science/article/abs/pii/S0925231220305051)\n\n## Use the leap net\n\n### Reproducing results of the neuro computing paper.\nThe repository [neurocomputing_paper](./neurocomputing_paper) contains the necessary material to reproduce the figures\npresented in the paper. **NB** as of writing, a commercial solver was used to compute the powerflows. We are trying to \nport the code to use the [Grid2Op](https://github.com/rte-france/Grid2Op) framework instead.\n\n### Use the LEAP Net\n\n#### Setting up\n##### Quick and dirty way\nOf course, this way of doing is absolutely not recommended. By doing it you need to make sure the license of your\nown code is compatible with the license of this specific package etc. You have more information on this topic in the\n[LICENSE](LICENSE) file.\n\nThe most simple way to use the LEAP Net, and especially the Ltau module is to define this class in your project:\n```python\n# Copyright (c) 2019-2020, RTE (https://www.rte-france.com)\n# See AUTHORS.txt\n# This Source Code Form is subject to the terms of the Mozilla Public License, version 2.0.\n# If a copy of the Mozilla Public License, version 2.0 was not distributed with this file,\n# you can obtain one at http://mozilla.org/MPL/2.0/.\n# SPDX-License-Identifier: MPL-2.0\n# This file is part of leap_net, leap_net a keras implementation of the LEAP Net model.\n\nfrom tensorflow.keras.layers import Layer\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import add as tfk_add\nfrom tensorflow.keras.layers import multiply as tfk_multiply\n\n\nclass Ltau(Layer):\n    \"\"\"\n    This layer implements the Ltau layer.\n\n    This kind of leap net layer computes, from their input `x`: `d.(e.x * tau)` where `.` denotes the\n    matrix multiplication and `*` the elementwise multiplication.\n\n    \"\"\"\n    def __init__(self, initializer='glorot_uniform', use_bias=True, trainable=True, name=None, **kwargs):\n        super(Ltau, self).__init__(trainable=trainable, name=name, **kwargs)\n        self.initializer = initializer\n        self.use_bias=use_bias\n        self.e = None\n        self.d = None\n\n    def build(self, input_shape):\n        is_x, is_tau = input_shape\n        nm_e = None\n        nm_d = None\n        if self.name is not None:\n            nm_e = '{}_e'.format(self.name)\n            nm_d = '{}_d'.format(self.name)\n        self.e = Dense(is_tau[-1],\n                       kernel_initializer=self.initializer,\n                       use_bias=self.use_bias,\n                       trainable=self.trainable,\n                       name=nm_e)\n        self.d = Dense(is_x[-1],\n                       kernel_initializer=self.initializer,\n                       use_bias=False,\n                       trainable=self.trainable,\n                       name=nm_d)\n\n    def call(self, inputs):\n        x, tau = inputs\n        tmp = self.e(x)\n        tmp = tfk_multiply([tau, tmp])  # element wise multiplication\n        tmp = self.d(tmp)\n        res = tfk_add([x, tmp])\n        return res\n```\nThis is the complete code of the Ltau module that you can use as any keras layer.\n\n\n##### Clean installation (from source)\nWe also provide a simple implement of the LEAP Net that can be use as a any `tf.keras` layer. First you have to \ndownload this github repository:\n```bash\ngit clone https://github.com/BDonnot/leap_net.git\ncd leap_net\n```\nThen you need to install it (we strongly encourage to install it in a virtual envrionment):\n```bash\npip install -U .\n```\nThen, **as all python packages installed from source** you need to change the current working directory to use this\nmodule:\n```bash\ncd ..\nrm -rf leap_net  # optionnally you can also delete the repository\n```\nIn the future, to ease the installation process, we might provide a version of this package on pypi soon, \nbut haven't done that at the moment. If you would like this feature, write us an issue on github.\n\n#### LeapNet usage\nOnce installed, this package provide a keras-compatible of the `Ltau` block defined in the cited papers. Supposes you \nhave at your disposal:\n- a `X` matrix of dimension (nb_row, dim_x)\n- a `T` matrix of dimension (nb_row, dim_tau)\n- a `Y` matrix of dimentsion (nb_row, dim_x)\n\n```python\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom leap_net import Ltau  # this import might change if you use the \"quick and dirty way\".\n\n# create the keras model\nx = Input(shape=(dim_x,), name=\"x\")\ntau = Input(shape=(dim_tau,), name=\"tau\")\nres_Ltau = Ltau()((x, tau))\nmodel = Model(inputs=[x, tau], outputs=[res_Ltau])\n\n# \"compile\" the model with a given optimizer\nadam_ = tf.optimizers.Adam(lr=1e-3)\nmodel.compile(optimizer=adam_, loss='mse')\n# train it\nmodel.fit(x=[X, T], y=[Y], epochs=200, batch_size=32, verbose=False)\n\n# make prediction out of it\ny_hat = model.predict([X, T])\n```\n\nOf course, it is more than recommended to first encode your input data `X` with an encore denoted by `E` on the paper\nand then decode them with a \"decoder\" denoted by `D` in the papers. An example of such a model is:\n```python\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Activation, Dense\nfrom tensorflow.keras.models import Model\nfrom leap_net import Ltau  # this import might change if you use the \"quick and dirty way\".\n\n# create the keras model\nx = Input(shape=(dim_x,), name=\"x\")\ntau = Input(shape=(dim_tau,), name=\"tau\")\n\n## create E, for example with 2 layers of size \"layer_size\"\nlayer1 = Dense(layer_size)(x)\nlayer1 = Activation(\"relu\")(layer1)\n\nlayer2 = Dense(layer_size)(x)\nlayer2 = Activation(\"relu\")(layer1)\n# layer2 is the output of E.\n\n## this is Ltau\nres_Ltau = Ltau()((layer2, tau))\n\n## now create D, in this case hidden layer, for example\nlayer4 = Dense(layer_size)(res_Ltau)\nlayer4 = Activation(\"relu\")(layer4)\n\n# and make the standard (if you do a regression) linear layer for the output\noutput = Dense(dim_y)(layer4)\n\nmodel = Model(inputs=[x, tau], outputs=[output])\n\n# \"compile\" the model with a given optimizer\nadam_ = tf.optimizers.Adam(lr=1e-3)\nmodel.compile(optimizer=adam_, loss='mse')\n# train it\nmodel.fit(x=[X, T], y=[Y], epochs=200, batch_size=32, verbose=False)\n\n# make prediction out of it\ny_hat = model.predict([X, T])\n```\n\n**NB** We think the variable we use above are transparent, and we let the user of this work fine tune the learning\nrate, the optimizer, the number of epochs the even the size of the batch to suit their purpose. \n\n**NB** To use this model easily, we suppose you already format your dataset to have the shape `{(x_i, τ_i, y_i)}` and\nin particular that you have a pre-defined encoding of your modulator `τ` in the form of a vector. The performance of\nthe LEAP Net can vary depending on the encoding you choose for `τ`. More information will be provided in the near \nfuture when we will release a port of the code we used to get our results for the neurcomputing paper. We remind\nthat this port of the code will not be strictly equivalent to the original implementation of the paper that uses a \nproprietary powerflow as this code will use the open source [Grid2Op](https://github.com/rte-france/Grid2Op) framework, \nthat as not available when the paper was first submitted.\n\n## Cite this work\nIf you use this work please cite:\n```\n@article{DONON2020,\ntitle = \"LEAP nets for system identification and application to power systems\",\njournal = \"Neurocomputing\",\nyear = \"2020\",\nissn = \"0925-2312\",\ndoi = \"https://doi.org/10.1016/j.neucom.2019.12.135\",\nurl = \"http://www.sciencedirect.com/science/article/pii/S0925231220305051\",\nauthor = \"B. Donon and B. Donnot and I. Guyon and Z. Liu and A. Marot and P. Panciatici and M. Schoenauer\",\nkeywords = \"System identification, Latent space, Residual networks, LEAP Net, Power systems\",\nabstract = \"Using neural network modeling, we address the problem of system identification for continuous multivariate systems, whose structures vary around an operating point. Structural changes in the system are of combinatorial nature, and some of them may be very rare; they may be actionable for the purpose of controlling the system. Although our ultimate goal is both system identification and control, we only address the problem of identification in this paper. We propose and study a novel neural network architecture called LEAP net, for Latent Encoding of Atypical Perturbation. Our method maps system structure changes to neural net structure changes, using structural actionable variables. We demonstrate empirically that LEAP nets can be trained with a natural observational distribution, very concentrated around a “reference” operating point of the system, and yet generalize to rare (or unseen) structural changes. We validate the generalization properties of LEAP nets theoretically in particular cases. We apply our technique to power transmission grids, in which high voltage lines are disconnected and re-connected with one-another from time to time, either accidentally or willfully. We discuss extensions of our approach to actionable variables, which are continuous (instead of discrete, in the case of our application) and make connections between our problem setting, transfer learning, causal inference, and reinforcement learning.\"\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bdonnot/leap_net",
    "keywords": "LEAP-Net guided-dropout dropout resnet",
    "license": "Mozilla Public License 2.0 (MPL 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "leap-net",
    "package_url": "https://pypi.org/project/leap-net/",
    "platform": null,
    "project_url": "https://pypi.org/project/leap-net/",
    "project_urls": {
      "Homepage": "https://github.com/bdonnot/leap_net"
    },
    "release_url": "https://pypi.org/project/leap-net/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An implementation in tensorflow / keras of the LeapNet model",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14275276,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4da6896ea20c6d111f64bc8a8d478c3c18b0f0914d71673c9a27c1e4b1e7f1ba",
          "md5": "7ff103e26a753911b11851a59c10d53f",
          "sha256": "0c8a3a6d6794c431ab59dc49a1c5311ddd8ce1017f5ece9e2c96615fcc4dfa00"
        },
        "downloads": -1,
        "filename": "leap_net-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7ff103e26a753911b11851a59c10d53f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 60721,
        "upload_time": "2022-06-23T08:42:52",
        "upload_time_iso_8601": "2022-06-23T08:42:52.185116Z",
        "url": "https://files.pythonhosted.org/packages/4d/a6/896ea20c6d111f64bc8a8d478c3c18b0f0914d71673c9a27c1e4b1e7f1ba/leap_net-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2d258830c42a4d5ae5d15a1a534f83c2c3156fd47e02d0b26ab56011c1f63fc",
          "md5": "a454b81f276911534cddd6f0a3842fd2",
          "sha256": "cda200cb664abe970b0158eb56ff20c6bc232bdf908db64c9df4ee342cf841fe"
        },
        "downloads": -1,
        "filename": "leap_net-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a454b81f276911534cddd6f0a3842fd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62639,
        "upload_time": "2022-06-28T16:46:11",
        "upload_time_iso_8601": "2022-06-28T16:46:11.778404Z",
        "url": "https://files.pythonhosted.org/packages/e2/d2/58830c42a4d5ae5d15a1a534f83c2c3156fd47e02d0b26ab56011c1f63fc/leap_net-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2d258830c42a4d5ae5d15a1a534f83c2c3156fd47e02d0b26ab56011c1f63fc",
        "md5": "a454b81f276911534cddd6f0a3842fd2",
        "sha256": "cda200cb664abe970b0158eb56ff20c6bc232bdf908db64c9df4ee342cf841fe"
      },
      "downloads": -1,
      "filename": "leap_net-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "a454b81f276911534cddd6f0a3842fd2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 62639,
      "upload_time": "2022-06-28T16:46:11",
      "upload_time_iso_8601": "2022-06-28T16:46:11.778404Z",
      "url": "https://files.pythonhosted.org/packages/e2/d2/58830c42a4d5ae5d15a1a534f83c2c3156fd47e02d0b26ab56011c1f63fc/leap_net-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}