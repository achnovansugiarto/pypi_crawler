{
  "info": {
    "author": "",
    "author_email": "Guillaume Charbonnier <guillaume.charbonnier@araymond.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "## GenID\n\n> Easily generate various kind of IDs within Python projects\n\n## Quick start\n\n### Installing the project\n\nUsers can install project from github using `pip`:\n\n```console\npip install genid\n```\n\nConfirm that project is installed correctly by importing the version string:\n\n```python\nfrom genid import __version__\nprint(__version__)\n```\n\n### OOP Usage\n\n- Application domain:\n\n```python\nfrom genid import IDGenerator\n\n\nclass UseCase:\n  \"\"\"An example use case which requires ID generation\"\"\"\n  def __init__(self, generator: IDGenerator):\n    self.id_generator = generator\n\n  def do_something() -> None:\n    \"\"\"Generate a new ID and do something\"\"\"\n    new_id = self.id_generator.new()\n```\n\n- Application entrypoint:\n\n```python\nfrom genid import generator\n\n\ndef main() -> None:\n    # Initialize use case with BSON Object ID generator\n    usecase = UseCase(generator(\"objectid\"))\n    # Execute use case\n    # The ID generated within the method will be a valid ObjectID as a string\n    usecase.do_something()\n```\n\n### Iterator usage\n\n- Event producer:\n\n```python\nfrom genid import generator, IDGenerator\n\n\ndef producer_loop(generator: IDGenerator) -> None:\n    # Iterate over generator to create new ID on the fly\n    for new_id in generator:\n        print(f\"Creating new event with ID: {new_id}\")\n\n\nif __name__ == \"__main__\":\n    # Use UUI4 identifiers\n    producer_loop(generator(\"uuid4\"))\n```\n\n> Note: `IDGenerator` is an abstract class. It can be used to annotate functions depending on an ID generator. At runtime, those functions must be called with a valid implementation.\n\n### Supported ID kinds\n\nThe following ID kinds are supported:\n\n- `\"constant\"`\n- `\"nanoid\"`\n- `\"nuid\"`\n- `\"objectid\"`\n- `\"uuid1\"`\n- `\"uuid4\"`\n- `\"ulid\"`\n- `\"incremental\"`\n- `\"secret\"`\n- `\"timestamp\"`\n- `\"ns_timestamp\"`\n\n> Note: The string enumeration `genid.Kind` defines supported types\n\n\n## Developer installation\n\n### Install using script\n\n> The install script is responsible for first creating a virtual environment, then updating packaging dependencies such as `pip`, `setuptools` and `wheel` within the virtual environment. Finally, it installs the project in development mode within the virtual environment.\n\n> The virtual environment is always named `.venv/`\n\nRun the `install.py` script located in the `scripts/` directory with the Python interpreter of your choice. The script accepts the following arguments:\n\n- `--dev`: install extra dependencies required to contribute to development\n- `--docs`: install extra dependencies required to build and serve documentation\n- `-e` or `--extras`: a string of comma-separated extras such as `\"dev,docs\"`.\n- `-a` or `--all`: a boolean flag indicating that all extras should be installed.\n\nExample usage:\n\n- Install with build extra only (default behaviour)\n\n```console\npython3 scripts/install.py\n```\n\n- Install with dev extra\n\n```console\npython3 scripts/install.py --dev\n```\n\n- Install all extras\n\n```console\npython3 scripts/install.py --all\n```\n\n> Note: The `venv` module must be installed for the python interpreter used to run install script. On Debian and Ubuntu systems, this package can be installed using the following command: `sudo apt-get install python3-venv`. On Windows systems, python distributions have the `venv` module installed by default.\n\n## Development tasks\n\nThe file [`tasks.py`](./tasks.py) is an [invoke](https://www.pyinvoke.org/) [task file](https://docs.pyinvoke.org/en/stable/getting-started.html#defining-and-running-task-functions). It describes several tasks which developers can execute to perform various actions.\n\nTo list all available tasks, activate the project virtual environment, and run the command `inv --list`:\n\n```console\n$ inv --list\n\nAvailable tasks:\n\n  build         Build sdist and wheel, and optionally build documentation.\n  check         Run mypy typechecking.\n  clean         Clean build artifacts and optionally documentation artifacts as well as generated bytecode.\n  coverage      Serve code coverage results and optionally run tests before serving results\n  docs          Serve the documentation in development mode.\n  format        Format source code using black and isort.\n  lint          Lint source code using flake8.\n  pre-push      Ensure checks performed in CI will not fail before pushing to remote\n  test          Run tests using pytest and optionally enable coverage.\n```\n\n### Build project artifacts\n\nThe `build` task can be used to build a [source distribution (`sdist`)](https://docs.python.org/fr/3/distutils/sourcedist.html), a [wheel binary package](https://peps.python.org/pep-0427/) by default.\n\nOptionally, it can be used to build the project documentation as a static website.\n\nUsage:\n\n- Build `sdist` and `wheel` only:\n\n```console\ninv build\n```\n\n- Build `sdist`, `wheel` and documentation:\n\n```console\ninv build --docs\n```\n\n### Run tests\n\nThe `test` task can be used to run tests using `pytest`.\n\nBy default, test coverage is not enabled and `-c` or `--cov` option must be provided to enable test coverage.\n\nUsage:\n\n- Run tests without coverage:\n\n```console\ninv test\n```\n\n- Run tests with coverage:\n\n```console\ninv test --cov\n```\n\n- Run tests including end to end tests and coverage:\n\n```console\ninv test --e2e --cov\n```\n\n\n### Visualize test coverage\n\nThe `coverage` task can be used to serve test coverage results on `http://localhost:8000` by default. Use `--port` option to use a different port.\n\nBy default, test coverage is expected to be present before running the task. If it is desired to run tests before serving the results, use `--run` option.\n\n### Run typechecking\n\nThe `check` task can be used to run [`mypy`](https://mypy.readthedocs.io/en/stable/).\n\nBy default type checking is not run on tests and `-i` or `--include-tests` option must be provided to include them.\n\n### Run linter\n\nThe `lint` task can be used to lint source code using [`flake8`](https://flake8.pycqa.org/en/latest/). This task does not accept any option.\n\n> `flake8` is configured in the [setup.cfg](./setup.cfg) file.\n\n### Format source code\n\nThe `format` task can be used to format source code using [`black`](https://black.readthedocs.io/en/stable/) and [`isort`](https://isort.readthedocs.io/en/latest/). This task does not accept any option.\n\n> `black` is not configured in any way, but `isort` is configured in [setup.cfg](./setup.cfg).\n\n### Serve the documentation\n\nThe `docs` task can be used to serve the documentation as a static website on <http://localhost:8000> with auto-reload enabled by default. Use the `--port` option to change the listenning port and the `--no-watch` to disable auto-reload.\n\n## Git flow\n\nTwo branches exist:\n\n- `next`: The development branch. All developers must merge commits to `next` through Pull Requests.\n\n- `main`: The release branch. Developers must not commit to this branch. Only merge from `next` branch with fast-forward strategy are allowed on `main` branch. \n\n> Each time new commits are pushed on `main`, semantic-release may perform a release bump according to commit messages.\n\n## Git commits \n\nDevelopers are execpted to write commit messages according to the [Convetionnal Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification.\n\n> Commit messages which are not valid conventionnal commits are ignored in changelog.\n\n## Changelog\n\nChangelog is generated for each release candidate and each release according to commit messages found since last release.\n\nChangelog content is written to [`CHANGELOG.md`](./CHANGELOG.md) by [@semantic-release/release-notes-generator](https://github.com/semantic-release/release-notes-generator) plugin configured with [`conventionnalcommit`](https://www.conventionalcommits.org/en/v1.0.0/) preset.\n\n## Contributing to the documentation\n\nProject documentation is written using [MkDocs](https://www.mkdocs.org/) static site generator. Documentation source files are written in [Markdown](https://docs.github.com/fr/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax). They can be found in [docs/](./docs/) directory.\n\nAside from documentation written in markdown files, Python API reference is generated from docstrings and type annotations found in source code.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "genid",
    "package_url": "https://pypi.org/project/genid/",
    "platform": null,
    "project_url": "https://pypi.org/project/genid/",
    "project_urls": {
      "Issues": "https://github.com/charbonnierg/genid/issues",
      "Repository": "https://github.com/charbonnierg/genid"
    },
    "release_url": "https://pypi.org/project/genid/1.0.1/",
    "requires_dist": [
      "build ; extra == 'build'",
      "invoke ; extra == 'build'",
      "pip-tools ; extra == 'build'",
      "black ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "invoke ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-asyncio ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "types-setuptools ; extra == 'dev'",
      "mkdocs-gen-files ; extra == 'docs'",
      "mkdocs-literate-nav ; extra == 'docs'",
      "mkdocs-material ; extra == 'docs'",
      "mkdocs-section-index ; extra == 'docs'",
      "mkdocstrings[python] ; extra == 'docs'",
      "pymdown-extensions ; extra == 'docs'"
    ],
    "requires_python": "<4.0,>=3.8",
    "summary": "",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17191054,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0515cf04d850dcfcfe93efadcac1faa9ff82d8e3ee08f38bde0c63de2c131fc5",
          "md5": "03e5157a3b214625dfe96ebd7ffc0536",
          "sha256": "873ac0a289b61da44a8e6055f13d08a965f569d09383899783972fd13b4ab9b9"
        },
        "downloads": -1,
        "filename": "genid-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03e5157a3b214625dfe96ebd7ffc0536",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4.0,>=3.8",
        "size": 16848,
        "upload_time": "2023-03-06T13:44:29",
        "upload_time_iso_8601": "2023-03-06T13:44:29.493845Z",
        "url": "https://files.pythonhosted.org/packages/05/15/cf04d850dcfcfe93efadcac1faa9ff82d8e3ee08f38bde0c63de2c131fc5/genid-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "113649f41e2b1313a0241076a7d88fdfa6317edf75b08ba0133aa21002750fce",
          "md5": "04193b4d4a72f0c8d34b2be0cfdf16d1",
          "sha256": "6c320a7ed7f438c2d0cbe0a547fa7dc439a5347284ff30c2396c4255b1f1f41e"
        },
        "downloads": -1,
        "filename": "genid-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04193b4d4a72f0c8d34b2be0cfdf16d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4.0,>=3.8",
        "size": 17590,
        "upload_time": "2023-03-06T13:44:31",
        "upload_time_iso_8601": "2023-03-06T13:44:31.914460Z",
        "url": "https://files.pythonhosted.org/packages/11/36/49f41e2b1313a0241076a7d88fdfa6317edf75b08ba0133aa21002750fce/genid-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea25becea3bfce0006ebbfd1e1c94a8c45a1c65e36e2813ab993bed5563ca3a1",
          "md5": "7c040ecede979bcf875fafed2fb16908",
          "sha256": "d554581e677e85f53a861f3fc21f1b9f76329615c9707829a271a92404b9d0b8"
        },
        "downloads": -1,
        "filename": "genid-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c040ecede979bcf875fafed2fb16908",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4.0,>=3.8",
        "size": 16847,
        "upload_time": "2023-03-07T13:19:11",
        "upload_time_iso_8601": "2023-03-07T13:19:11.591567Z",
        "url": "https://files.pythonhosted.org/packages/ea/25/becea3bfce0006ebbfd1e1c94a8c45a1c65e36e2813ab993bed5563ca3a1/genid-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d9ce0827903e747e7528b688f7d53b4dc495fa59217617a94e5b8e7377ea477",
          "md5": "8c330d2ea6d1436b96a1929f41b31b17",
          "sha256": "2bc0cbf40d61a975362ca06b0b940a23edc07a4108ca0c5c3aa69b71d49a0ee2"
        },
        "downloads": -1,
        "filename": "genid-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8c330d2ea6d1436b96a1929f41b31b17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4.0,>=3.8",
        "size": 17596,
        "upload_time": "2023-03-07T13:19:13",
        "upload_time_iso_8601": "2023-03-07T13:19:13.381266Z",
        "url": "https://files.pythonhosted.org/packages/2d/9c/e0827903e747e7528b688f7d53b4dc495fa59217617a94e5b8e7377ea477/genid-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea25becea3bfce0006ebbfd1e1c94a8c45a1c65e36e2813ab993bed5563ca3a1",
        "md5": "7c040ecede979bcf875fafed2fb16908",
        "sha256": "d554581e677e85f53a861f3fc21f1b9f76329615c9707829a271a92404b9d0b8"
      },
      "downloads": -1,
      "filename": "genid-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7c040ecede979bcf875fafed2fb16908",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<4.0,>=3.8",
      "size": 16847,
      "upload_time": "2023-03-07T13:19:11",
      "upload_time_iso_8601": "2023-03-07T13:19:11.591567Z",
      "url": "https://files.pythonhosted.org/packages/ea/25/becea3bfce0006ebbfd1e1c94a8c45a1c65e36e2813ab993bed5563ca3a1/genid-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d9ce0827903e747e7528b688f7d53b4dc495fa59217617a94e5b8e7377ea477",
        "md5": "8c330d2ea6d1436b96a1929f41b31b17",
        "sha256": "2bc0cbf40d61a975362ca06b0b940a23edc07a4108ca0c5c3aa69b71d49a0ee2"
      },
      "downloads": -1,
      "filename": "genid-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8c330d2ea6d1436b96a1929f41b31b17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<4.0,>=3.8",
      "size": 17596,
      "upload_time": "2023-03-07T13:19:13",
      "upload_time_iso_8601": "2023-03-07T13:19:13.381266Z",
      "url": "https://files.pythonhosted.org/packages/2d/9c/e0827903e747e7528b688f7d53b4dc495fa59217617a94e5b8e7377ea477/genid-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}