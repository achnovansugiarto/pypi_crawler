{
  "info": {
    "author": "Gregor Lenhard",
    "author_email": "gregor.lenhard92@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# sanfis\n\nThis is a PyTorch-based implementation of my project S-ANFIS: [State-ANFIS: A Generalized Regime-Switching Model for Financial Modeling (2022)](https://ieeexplore.ieee.org/abstract/document/9776208). S-ANFIS is an generalization of Jang's [ANFIS: adaptive-network-based fuzzy inference system (1993)](https://ieeexplore.ieee.org/abstract/document/256541). The implemenation can easliy be used to fit an ANFIS network.\n\n## 1. What is S-ANFIS\n\nS-ANFIS is a simple generalization of the ANFIS network, where the input to the premise and the consequence part of the model can be controlled separately. As general notation, I call the input the premise part \"state\" variables ``s`` and the input of the consequence part \"input\" or \"explanatory\" variables ``x``. \n\n![S-ANFIS architecture](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/sanfis_architecture.png)\n\nFor an in-depth explaination, check out [our paper](https://ieeexplore.ieee.org/abstract/document/9776208).\n\n## 2. Installation\nThis package is intended to be installed on top of PyTorch, so you need to do that first.\n### Step 1: Install PyTorch\nMake sure to consider the correct operating system: Windows, macOS (Intel / Apple Silicon) or Linux. Everything is explained on the [developer's website](https://pytorch.org/get-started/locally/). \n\nTo ensure that PyTorch was installed correctly, verify the installation by running sample PyTorch code:\n\n```python\nimport torch\nx = torch.rand(5, 3)\nprint(x)\n```\n### Step 2: Install sanfis\nsanfis can be installed via pip:\n\n```bash\npip install sanfis\n```\n\n## 3. Quick start\nFirst let's generate some data! The given example is an [AR(2)-process](https://en.wikipedia.org/wiki/Autoregressive_model) whoose AR-parameters depend on the regime of two independent state variables:\n\n```python\n# Load modules\nimport numpy as np\nimport torch\nfrom sanfis import SANFIS, plottingtools\nfrom sanfis.datagenerators import sanfis_generator\n\n# seed for reproducibility\nnp.random.seed(3)\ntorch.manual_seed(3)\n## Generate Data ##\nS, S_train, S_valid, X, X_train, X_valid, y, y_train, y_valid, = sanfis_generator.gen_data_ts(\n    n_obs=1000, test_size=0.33, plot_dgp=True)\n```\n\n![s-anfis data generating process](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/sanfis_dgp_process.png)\n\nSet a list of membership functions for each of the state variables that enter the model:\n\n```python\n# list of membership functions\nmembfuncs = [\n    {'function': 'sigmoid',\n     'n_memb': 2,\n     'params': {'c': {'value': [0.0, 0.0],\n                      'trainable': True},\n                'gamma': {'value': [-2.5, 2.5],\n                          'trainable': True}}},\n\n    {'function': 'sigmoid',\n     'n_memb': 2,\n     'params': {'c': {'value': [0.0, 0.0],\n                      'trainable': True},\n                'gamma': {'value': [-2.5, 2.5],\n                          'trainable': True}}}\n]\n```\nThe given example uses two sigmoid functions for each state variable.\n\nNow create the model, fit and evaluate:\n\n```python\n# make model / set loss function and optimizer\nfis = SANFIS(membfuncs=membfuncs, n_input=2, scale='Std')\nloss_function = torch.nn.MSELoss(reduction='mean')\noptimizer = torch.optim.Adam(fis.parameters(), lr=0.005)\n\n# fit model\nhistory = fis.fit([S_train, X_train, y_train], [S_valid, X_valid, y_valid],\n                  optimizer, loss_function, epochs=1000)\n# eval model\ny_pred = fis.predict([S, X])\nplottingtools.plt_prediction(y, y_pred,\n                             save_path='img/sanfis_prediction.pdf')\n# plottingtools.plt_learningcurves(history)\n```\n\n![s-anfis prediction](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/sanfis_prediction.png)\n\n## 4. Features\n### 4.1 Membership functions\nThe implementation allows a very flexible usage of membership functions. For each input variable that enters the premise-part of the model, the type and number of membership functions can be flexibly chosen. As of today, three possible membership functions are implemented:\n\n#### Gaussian\nThe Gaussian is described by 2 parameters, `mu` for the location and `sigma` for the wideness.\n\n```python\n# Example\ngaussian_membfunc = {'function': 'gaussian',\n\t\t\t 'n_memb': 3,\t # 3 membership functions\n\t\t\t 'params': {'mu': {'value': [-2.0, 0.0, 1.5], \n\t\t\t                'trainable': True},\n\t\t\t           'sigma': {'value': [1.0, 0.5, 1.0],\n\t\t\t               'trainable': True}}\n\t\t\t}\n```\n\nIn this example, three membership functions are considered.\n\n#### General bell-shaped\nThe general bell-shaped function is described by three parameters, `a` (wideness), `b` (shape) and `c` (location).\n\n```python\nbell_membfunc = {'function': 'bell',\n\t\t\t'n_memb': 2,\n\t\t\t'params': {'c': {'value': [-1.5, 1.5],\n\t\t\t                'trainable': True},\n\t\t\t            'a': {'value': [3.0, 1.0],\n\t\t\t                'trainable': False},\n\t\t\t            'b': {'value': [1.0, 3.0],\n\t\t\t                'trainable': False}}\n\t\t\t\t\t}\n```\n#### Sigmoid\nThe sigmoid is described by two parameters: `c` (location) and `gamma` (steepness).\n\n```python\nsigmoid_membfunc = {'function': 'sigmoid',\n\t\t\t'n_memb': 2,\n\t\t\t'params': {'c': {'value': [0.0, 0.0],\n\t\t\t                'trainable': True},\n\t\t\t            'gamma': {'value': [-2.5, 2.5],\n\t\t\t                    'trainable': True}}\n}\n```\n\nRemember to add a list of membership functions as `membfunc` argument when creating the ```SANFIS``` oject, e.g.:\n\n```python\nMEMBFUNCS = [gaussian_membfunc, bell_membfunc, sigmoid_membfunc]\nmodel = SANFIS(MEMBFUNCS, n_input=2)\nmodel.plotmfs(bounds=[[-2.0, 2.0],  # plot bounds for first membfunc\n                      [-4.0, 2.0],  # plot bounds for second membfunc\n                      [-5.0, 5.0]],  # plot bounds fo third membfunc\n              save_path='img/membfuncs.pdf')\n```\n\n![membership functions](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/membfuncs.png)\n\n### 4.2 Tensorboard\nTensorboard provides visualization needed for machine learning experimentation. Further information can be found [here](https://www.tensorflow.org/tensorboard)\n\n#### Step 1: Install tensorboard\n```bash\npip install tensorboard\n```\n\n#### Step 2: enable tensorboard usage during training\n\nTensorboard functionality can be added via arguments in the `fit()` function, e.g.\n\n```python\nhistory = model.fit( ...\n                    use_tensorboard=True,\n                    logdir='logs/tb',\n                    hparams_dict={}\n                   )\n```\nNote that `hparams_dict` is an optional argument where you can store additional hyperparameters of you model, e.g. `hparams_dict={'n_input':2}`.\n\n#### Step 3: Open tensorboard\n```bash\ntensorboard --logdir=logs/tb\n```\n\n\n## 5. Using the plain vanilla ANFIS network\n![ANFIS architecture](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/anfis_architecture.png)\n\nTo use the plain vanilla ANFIS network, simply remove the state variables `s` from the training (`fit()`). This automatically sets the same input for premise and consequence part of the model.\n\n```python\n# Set 4 input variables with 3 gaussian membership functions each\nMEMBFUNCS = [\n    {'function': 'gaussian',\n     'n_memb': 3,\n     'params': {'mu': {'value': [-0.5, 0.0, 0.5],\n                       'trainable': True},\n                'sigma': {'value': [1.0, 1.0, 1.0],\n                          'trainable': True}}},\n\n    {'function': 'gaussian',\n     'n_memb': 3,\n     'params': {'mu': {'value': [-0.5, 0.0, 0.5],\n                       'trainable': True},\n                'sigma': {'value': [1.0, 1.0, 1.0],\n                          'trainable': True}}},\n\n    {'function': 'gaussian',\n     'n_memb': 3,\n     'params': {'mu': {'value': [-0.5, 0.0, 0.5],\n                       'trainable': True},\n                'sigma': {'value': [1.0, 1.0, 1.0],\n                          'trainable': True}}},\n\n    {'function': 'gaussian',\n     'n_memb': 3,\n     'params': {'mu': {'value': [-0.5, 0.0, 0.5],\n                       'trainable': True},\n                'sigma': {'value': [1.0, 1.0, 1.0],\n                          'trainable': True}}},\n\n]\n\n# generate some data (mackey chaotic time series)\nX, X_train, X_valid, y, y_train, y_valid = datagenerator.gen_data(data_id='mackey',\n                                                                  n_obs=2080, n_input=4)\n\n# create model\nmodel = SANFIS(membfuncs=MEMBFUNCS,\n               n_input=4,\n               scale='Std')\noptimizer = torch.optim.Adam(params=model.parameters())\nloss_functions = torch.nn.MSELoss(reduction='mean')\n\n# fit model\nhistory = model.fit(train_data=[X_train, y_train],\n                    valid_data=[X_valid, y_valid],\n                    optimizer=optimizer,\n                    loss_function=loss_functions,\n                    epochs=200,\n                    )\n\n# predict data\ny_pred = model.predict(X)\n\n# plot learning curves\nplottingtools.plt_learningcurves(history, save_path='img/learning_curves.pdf')\n\n# plot prediction\nplottingtools.plt_prediction(y, y_pred, save_path='img/mackey_prediction.pdf')\n\n```\n\n\n![learning curves](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/learning_curves.png)\n\n![prediction mackey time series](https://github.com/gregorLen/sanfis-pytorch/blob/main/img/mackey_prediction.png)\n\n## 6. Related work\n\n- [AnfisTensorflow2.0](https://github.com/gregorLen/AnfisTensorflow2.0) by me\n- [bare-bones implementation of ANFIS](https://github.com/twmeggs/anfis) (manual derivatives) by [twmeggs](https://github.com/twmeggs) \n- [PyTorch implementation](https://github.com/jfpower/anfis-pytorch) by [James Power](http://www.cs.nuim.ie/~jpower/)\n- [simple ANFIS based on Tensorflow 1.15.2](https://github.com/tiagoCuervo/TensorANFIS) by [Santiago Cuervo](https://github.com/tiagoCuervo)\n\n## Contact\nI am very thankful for feedback. Also, if you have questions, please contact gregor.lenhard92@gmail.com\n\n## References\nIf you use my work, please cite it appropriately:\n\n\nG. Lenhard and D. Maringer, \"State-ANFIS: A Generalized Regime-Switching Model for Financial Modeling,\" 2022 IEEE Symposium on Computational Intelligence for Financial Engineering and Economics (CIFEr), 2022, pp. 1-8, doi: 10.1109/CIFEr52523.2022.9776208.\n\nBibTex:\n\n\n```\n@INPROCEEDINGS{lenhard2022sanfis,\n  author={Lenhard, Gregor and Maringer, Dietmar},\n  booktitle={2022 IEEE Symposium on Computational Intelligence for Financial Engineering and Economics ({CIFEr})}, \n  title={State-{ANFIS}: A Generalized Regime-Switching Model for Financial Modeling}, \n  year={2022},\n  pages={1--8},\n  doi={10.1109/CIFEr52523.2022.9776208},\n  organization={IEEE}\n  }\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gregorLen/S-ANFIS-PyTorch",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sanfis",
    "package_url": "https://pypi.org/project/sanfis/",
    "platform": null,
    "project_url": "https://pypi.org/project/sanfis/",
    "project_urls": {
      "Homepage": "https://github.com/gregorLen/S-ANFIS-PyTorch"
    },
    "release_url": "https://pypi.org/project/sanfis/0.1.0/",
    "requires_dist": [
      "numpy",
      "seaborn",
      "pandas",
      "matplotlib",
      "tqdm",
      "scikit-learn",
      "tensorboard",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Implementation to the State-Adaptive Neurofuzzy Inference System (S-ANFIS) network",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14542990,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282c7f296ff67ae04ecc590f66f4d71b964d9bab42b30410c73905d276871982",
          "md5": "15b6b479b28feff4213659a4d61c556b",
          "sha256": "77f7a514f02c56ac067e73c31666dce5ae90d823a9dbe9068b36b81930a520e1"
        },
        "downloads": -1,
        "filename": "sanfis-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15b6b479b28feff4213659a4d61c556b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24444,
        "upload_time": "2022-07-25T16:11:10",
        "upload_time_iso_8601": "2022-07-25T16:11:10.036990Z",
        "url": "https://files.pythonhosted.org/packages/28/2c/7f296ff67ae04ecc590f66f4d71b964d9bab42b30410c73905d276871982/sanfis-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b6737eb3e9d772d580de375645e2a178cbf9e5a91c58bd25c9a97cc580a1844",
          "md5": "f651b556ceb82eeb34d0b6840c82e023",
          "sha256": "4667c9f19c3003a3e4d647c1c3cec1f1793f5069fb81d3a630b52a43e2a0da1f"
        },
        "downloads": -1,
        "filename": "sanfis-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f651b556ceb82eeb34d0b6840c82e023",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25661,
        "upload_time": "2022-07-25T16:11:12",
        "upload_time_iso_8601": "2022-07-25T16:11:12.098037Z",
        "url": "https://files.pythonhosted.org/packages/6b/67/37eb3e9d772d580de375645e2a178cbf9e5a91c58bd25c9a97cc580a1844/sanfis-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "282c7f296ff67ae04ecc590f66f4d71b964d9bab42b30410c73905d276871982",
        "md5": "15b6b479b28feff4213659a4d61c556b",
        "sha256": "77f7a514f02c56ac067e73c31666dce5ae90d823a9dbe9068b36b81930a520e1"
      },
      "downloads": -1,
      "filename": "sanfis-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15b6b479b28feff4213659a4d61c556b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24444,
      "upload_time": "2022-07-25T16:11:10",
      "upload_time_iso_8601": "2022-07-25T16:11:10.036990Z",
      "url": "https://files.pythonhosted.org/packages/28/2c/7f296ff67ae04ecc590f66f4d71b964d9bab42b30410c73905d276871982/sanfis-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b6737eb3e9d772d580de375645e2a178cbf9e5a91c58bd25c9a97cc580a1844",
        "md5": "f651b556ceb82eeb34d0b6840c82e023",
        "sha256": "4667c9f19c3003a3e4d647c1c3cec1f1793f5069fb81d3a630b52a43e2a0da1f"
      },
      "downloads": -1,
      "filename": "sanfis-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f651b556ceb82eeb34d0b6840c82e023",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25661,
      "upload_time": "2022-07-25T16:11:12",
      "upload_time_iso_8601": "2022-07-25T16:11:12.098037Z",
      "url": "https://files.pythonhosted.org/packages/6b/67/37eb3e9d772d580de375645e2a178cbf9e5a91c58bd25c9a97cc580a1844/sanfis-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}