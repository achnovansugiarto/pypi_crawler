{
  "info": {
    "author": "Fawaz Dabbaghie",
    "author_email": "fawaz@hhu.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MSA to GFA\nIs a tool to turn MSA to GFA v1 with embedded paths corrisponding to groups original sequences. Results can be then visualized with [gfaviz](https://github.com/ggonnella/gfaviz), \nor [bandage](https://rrwick.github.io/Bandage/) or any other avialble GFA visualization tools out there.\n\nThe tool is split into two separate steps, building the graph, and adding the paths.\n\n## Global optional arguments\nBefore supplying one of the subcommands, the tool takes two general arguments\n```\nusage: test_main.py [-h] [--log LOG_FILE] [--dir OUTDIR] {build_graph,add_paths} ...\n\nBuild GFA v1 from MSA\n\nSubcommands:\n  {build_graph,add_paths}\n                        Available subcommands\n    build_graph         Command for building the GFA from a given MSA\n    add_paths           Add paths to the graph that was built\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --log LOG_FILE        Log file name/path. Default = out_log.log\n  --dir OUTDIR          Output directory where to put the output files, default: .\n\n```\n- `--log` name of out log file, default is `log_file.log`\n- `--dir` output directory for outputs, if this is specified then you don't need to specify full path for outputs, just the name of file and this directory path will be used.\n\n## Building the Graph\nThe following options are available for this step when calling `msa_to_gfa biuld_graph` subcommand:\n```\nusage: test_main.py build_graph [-h] [-f MSA_PATH] [--compact] [-o OUT_GFA] [-n SEQ_NAMES]\n                                [-c COLORS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f MSA_PATH, --in_msa MSA_PATH\n                        Input MSA in FASTA format\n  --compact             If this give, the graph will be compacted before writing\n  -o OUT_GFA, --out OUT_GFA\n                        Output GFA name/path\n  -n SEQ_NAMES, --seq_name_tsv SEQ_NAMES\n                        A tsv with two columns, first is sequence names, second is a shortened or\n                        abbreviated name\n  -c COLORS, --nodes_info COLORS\n                        Output JSON file with nodes information\n\n\n```\nRequired arguments here are:\n- `-f, --in_msa` for input MSA in FASTA format\n- `-o, --out` the name of the output graph file, if `--dir` is specified, then you do not need to give the full path, just a name and the directory you gave will be used.\n\nOther arguments:\n- `--compact` which is recommended to compact linear stretches of nodes in the graph\n- `-n, --seq_name_tsv` which is a TSV file with two columns, first column is the original fasta sequence ids without the \">\" character, and the second column is a shorter name for the same sequences, in case the user wants to use abbreviations or a smaller sequence ids for the sequences. E.g:\nWe have the following 3 amino acid sequences:\n```\n>seq1\n-MEPTPEQ\n>seq2\n---T--MA\n>seq3\nMSETQSTQ\n```\nThe TSV file you can provide would be:\n```\nseq1    s1\nseq2    s2\nseq3    s3\n```\n- The option `-c, --nodes_info` will output a json file with information related to the nodes: node id, node sequence, and the sequences associated with that node.\nhighly conserved regions will have nodes with many colors.\n  \nWhen running the first subcommand, you'll automatically get a JSON file containing the path and grouped paths informatin, this file is needed for the second step.\nThe graph of the previous sequences would look like\n![alt text](figures/drawing-1.png)\n\n## Adding paths\nThe JSON file outputted along with the GFA file has information related to each sequencs and its path in the graph, as well, groupings of sequences that have the same path in the graph.\nThe following options are available with this subcommand:\n```\nusage: test_main.py add_paths [-h] [-g GFA] [--in_groups IN_GROUPS] [--all_groups]\n                              [--some_groups SOME_GROUPS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g GFA, --gfa GFA     input graph to add paths to\n  --in_groups IN_GROUPS\n                        the groups json file\n  --all_groups          Adds all paths to the GFA file given\n  --some_groups SOME_GROUPS\n                        adds only the specified paths\n\n```\nRequired arguments:\n- `-g, --gfa` is GFA file from the first step\n- `--in_groups` is the JSON file outputted along with the GFA file in the first step\nOptional arguments:\n-  `--all_groups` all groups are added to the graph as paths\n-  `--some_groups` user need to give a text file with one group or sequence name on each line, if abbreviated names were used in the first step, then the abbreviations need to be used",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fawaz-dabbaghieh/msa_to_gfa",
    "keywords": "",
    "license": "LICENSE.TXT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "msa-to-gfa",
    "package_url": "https://pypi.org/project/msa-to-gfa/",
    "platform": "",
    "project_url": "https://pypi.org/project/msa-to-gfa/",
    "project_urls": {
      "Homepage": "https://github.com/fawaz-dabbaghieh/msa_to_gfa"
    },
    "release_url": "https://pypi.org/project/msa-to-gfa/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "convertes an MSA in FASTA to a GFA1 file with imbedded paths",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10089241,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bfd694f35f05bcd329e9c37ba1dfaca25fbd2330fc6a6e86122979064aa2b6a",
          "md5": "e77ee08fe406cfbf9b5b43e3e9072635",
          "sha256": "5ef958e5e1ce5a572cff4eefea2c79fc68d989c20104bcc865331daafd741028"
        },
        "downloads": -1,
        "filename": "msa_to_gfa-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e77ee08fe406cfbf9b5b43e3e9072635",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14309,
        "upload_time": "2021-04-16T22:21:12",
        "upload_time_iso_8601": "2021-04-16T22:21:12.158639Z",
        "url": "https://files.pythonhosted.org/packages/4b/fd/694f35f05bcd329e9c37ba1dfaca25fbd2330fc6a6e86122979064aa2b6a/msa_to_gfa-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bfd694f35f05bcd329e9c37ba1dfaca25fbd2330fc6a6e86122979064aa2b6a",
        "md5": "e77ee08fe406cfbf9b5b43e3e9072635",
        "sha256": "5ef958e5e1ce5a572cff4eefea2c79fc68d989c20104bcc865331daafd741028"
      },
      "downloads": -1,
      "filename": "msa_to_gfa-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e77ee08fe406cfbf9b5b43e3e9072635",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14309,
      "upload_time": "2021-04-16T22:21:12",
      "upload_time_iso_8601": "2021-04-16T22:21:12.158639Z",
      "url": "https://files.pythonhosted.org/packages/4b/fd/694f35f05bcd329e9c37ba1dfaca25fbd2330fc6a6e86122979064aa2b6a/msa_to_gfa-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}