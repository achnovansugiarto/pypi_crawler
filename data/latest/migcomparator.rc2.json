{
  "info": {
    "author": "Gyojun An",
    "author_email": "sencom1028@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# migcomparator\n\n[![PyPI version](https://badge.fury.io/py/migcomparator.svg)](https://badge.fury.io/py/migcomparator)\n[![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/)\n\n> Apache Hive와 MariaDB(or MySQL)에 위치한 테이블의 데이터를 Pandas를 통해 비교해주는 라이브러리입니다. \n\n- [Install](#install)\n- [Basic Usage](#basic-usage)\n  - [테이블간의 데이터 건수 비교](#테이블간의-데이터-건수-비교)\n  - [테이블간의 대칭차집합](#테이블간의-대칭차집합)\n  - [테이블간의 불일치 데이터 추출](#테이블간의-불일치-데이터-추출)\n- [User Component](#User-Component)\n  - [Table](#table)\n  - [ColumnPair](#columnpair)\n  - [Connector](#connector)\n  - [Validator](#validator)\n\n## Install\n\n```bash\npip install migcomparator\n```\n\n## Basic usage\n\n#### MariaDB Mock data \n\n```plain\n> select * from `mock_1` limit 3\n+-----------------+-------------+--------+--------------+---------+-------------------+------+\n|vin              |car_model    |car_make|car_model_year|color    |created_at         |num   |\n+-----------------+-------------+--------+--------------+---------+-------------------+------+\n|19UUA56763A081084|Rodeo        |Isuzu   |2000          |Goldenrod|2021-11-18 08:38:22|57.064|\n|19UUA65545A837147|Amanti       |Kia     |2004          |Yellow   |2021-07-07 13:32:59|NULL  |\n|19UUA65566A654351|B-Series Plus|Mazda   |2000          |Orange   |2021-07-25 05:39:41|NULL  |\n+-----------------+-------------+--------+--------------+---------+-------------------+------+\n```\n\n#### Apache Hive Mock data\n\n```plain\n> select * from `mock_2` limit 3\n+-----------------+---------+----------+--------------+---------+-------------------+------+\n|vin              |car_model|car_mk    |car_model_yyyy|color    |created_at         |num   |\n+-----------------+---------+----------+--------------+---------+-------------------+------+\n|19UUA65684A456148|Discovery|Land Rover|1996          |Violet   |2021-04-18 11:25:59|42.526|\n|19UUA66228A764918|GTO      |Mitsubishi|1994          |Yellow   |2021-10-25 23:41:01|10.004|\n|19UUA66267A272004|Corvette |Chevrolet |1960          |Puce     |2021-02-26 19:25:45|NULL  |\n+-----------------+---------+----------+--------------+---------+-------------------+------+\n\n> select * from `mock_3` limit 3\n+-----------------+-------------+------+--------------+------------------+-------------------+------+\n|vin              |car_model    |car_mk|car_model_yyyy|color             |created_at         |numb  |\n+-----------------+-------------+------+--------------+------------------+-------------------+------+\n|19UUA56763A081084|Rodeo        |Isuzu |2000          |GoldenrodGoldenrod|2021-11-18 08:38:22|58.064|\n|19UUA65545A837147|Amanti       |Kia   |2004          |YellowYellow      |2021-07-07 13:32:59|NULL  |\n|19UUA65566A654351|B-Series Plus|Mazda |2000          |OrangeOrange      |2021-07-25 05:39:41|NULL  |\n+-----------------+-------------+------+--------------+------------------+-------------------+------+\n\n```\n\n### 테이블간의 데이터 건수 비교\n\n#### MariaDB(or MySQL) to Apache Hive\n```python\nfrom migcomparator.models.pandas_validator import PandasValidator\nfrom migcomparator.models.table import Table\nfrom migcomparator.query_sender.connector import MariadbConnector, HiveConnector\n\n# create datasource connector\nmariadb_sender = \\ \n        MariadbConnector(\n            host='localhost',\n            port=3306,\n            user='username',\n            password='password',\n            database='schema'\n        )\n\nhive_sender = \\ \n        HiveConnector(\n            host='localhost',\n            port=10000,\n            user='username',\n            password='password',\n            database='schema',\n            auth_mechanism='PLAIN'\n        )\n\n# create source & target logical table\nsource = Table(name='mock_1', sender=mariadb_sender) \\\n            .where(\"date_format(`created_at`, '%Y%m%d') = '20220101'\") \\\n            .where(\"`vin` = 'fakevin'\")\n\n# Hive 테이블은 pk를 명시적으로 지정\ntarget = Table(name='mock_2', sender=hive_sender, pk=['vin']) \\\n            .where(\"date_format(created_at, 'yyyyMMdd') = '20220101'\") \\\n            .where(\"`vin` = 'fakevin'\")\n\n# count compare, PairResult 객체 반환\npair_result = PandasValidator.count_compare(\n    source=source, target=target\n)\n```\n\n#### PairResult 결과\n\n```plain\n(source: 1000, target: 850, match: False)\n```\n\n### 테이블간의 대칭차집합\n\n#### MariaDB(or MySQL) to Apache Hive\n```python\nfrom migcomparator.models.pandas_validator import PandasValidator\nfrom migcomparator.models.table import Table\nfrom migcomparator.query_sender.connector import MariadbConnector, HiveConnector\n\n...\n\n# create source & target logical table\nsource = Table(name='mock_1', sender=mariadb_sender) \\\n            .where(\"date_format(`created_at`, '%Y%m%d') = '20220101'\") \\\n            .where(\"`vin` = 'fakevin'\")\n\n# Hive 테이블은 pk를 명시적으로 지정\ntarget = Table(name='mock_2', sender=hive_sender, pk=['vin']) \\\n            .where(\"date_format(created_at, 'yyyyMMdd') = '20220101'\") \\\n            .where(\"`vin` = 'fakevin'\")\n\n# intersect difference compare, PairResult 객체 반환\npair_result = PandasValidator.difference_compare(source=source, target=target)\n```\n\n#### PairResult 결과\n\n```plain\n[TIME ELAPSED] - (time: 0:00:00.063220, text: difference compare)\n(source:                    \n                   vin   location\n0    19UUA56763A081084  left_only\n1    19UUA65545A837147  left_only\n..                 ...        ...\n998  YV4902NC9F1050126  left_only\n999  YV4952BL9E1397234  left_only\n\n[1000 rows x 2 columns], \n\ntarget:                     \n                    vin    location\n1000  19UUA65684A456148  right_only\n1001  19UUA66228A764918  right_only\n...                 ...         ...\n1848  YV4952CF4C1496548  right_only\n1849  ZHWGU5BR6EL855505  right_only\n\n[850 rows x 2 columns], \nmatch: False)\n```\n\n### 테이블간의 불일치 데이터 추출 \n\n#### MariaDB(or MySQL) to Apache Hive\n\n```python\nfrom migcomparator.models.pandas_validator import PandasValidator\nfrom migcomparator.models.table import Table, ColumnPair\nfrom migcomparator.query_sender.connector import MariadbConnector, HiveConnector\n\n...\n\n# create source & target logical table\nsource = Table(name='mock_1', sender=mariadb_sender) \\\n            .where(\"date_format(`created_at`, '%Y%m%d') = '20220101'\") \\\n            .where(\"`vin` = 'fakevin'\")\n\n# Hive 테이블은 pk를 명시적으로 지정\ntarget = Table(name='mock_3', sender=hive_sender, pk=['vin']) \\\n            .where(\"date_format(created_at, 'yyyyMMdd') = '20220101'\") \\\n            .where(\"`vin` = 'fakevin'\")\n\n# SingleResult 객체 반환\nsingle_result = PandasValidator.value_compare(\n            source=source,\n            target=target,\n            # on은 join대상의 컬럼을 명시적으로 지정, 이름이 같다면 생략가능\n            on=[ColumnPair(source='vin', target='vin')],\n            # colpair는 테이블간의 컬럼명이 다를때 매치시키기 위해 사용\n            colpair=[\n                ColumnPair(source='car_make', target='car_mk'),\n                ColumnPair(source='car_model_year', target='car_model_yyyy'),\n                ColumnPair(source='num', target='numb'),\n            ])\n```\n\n#### SingleResult 결과\n\n- 일치하는 데이터는 `None`, 불일치하는 데이터는 `[source value, target value]` 형식으로 구성 \n\n```plain\n[TIME ELAPSED] - (time: 0:00:00.085695, text: value compare)\n               vin,vin                      color,color          num,numb\n0    19UUA56763A081084  [Goldenrod, GoldenrodGoldenrod]  [57.064, 58.064]\n1    19UUA65545A837147           [Yellow, YellowYellow]              None\n2    19UUA65566A654351           [Orange, OrangeOrange]              None\n3    19UUA76537A154797           [Fuscia, FusciaFuscia]    [6.472, 7.472]\n4    19UUA76667A986661  [Turquoise, TurquoiseTurquoise]  [40.263, 41.263]\n..                 ...                              ...               ...\n995  YV440MBC6F1570276                 [Teal, TealTeal]      [35.4, 36.4]\n996  YV440MBD6F1653487           [Yellow, YellowYellow]  [81.213, 82.213]\n997  YV4852CZ6B1343304                 [Blue, BlueBlue]  [31.325, 32.325]\n998  YV4902NC9F1050126  [Turquoise, TurquoiseTurquoise]  [34.464, 35.464]\n999  YV4952BL9E1397234  [Goldenrod, GoldenrodGoldenrod]  [98.871, 99.871]\n```\n\n## User Component\n\n### Connector\n\nDataSource에게 질의를 수행하고 결과를 Validator에게 전달해주기위한 클래스.\n- `MariadbConnector`\n- `HiveConnector`\n\n```python\nfrom migcomparator.query_sender.connector import MariadbConnector, HiveConnector\n\nmariadb_sender = \\ \n        MariadbConnector(\n            host='localhost',\n            port=3306,\n            user='username',\n            password='password',\n            database='schema'\n        )\n\nhive_sender = \\ \n        HiveConnector(\n            host='localhost',\n            port=10000,\n            user='username',\n            password='password',\n            database='schema',\n            auth_mechanism='PLAIN'\n        )\n```\n\n\n\n---\n\n### Table\n\n```python\nfrom migcomparator.models.table import Table\n\nsource = Table(name='mock_1', sender=mariadb_sender) \\\n            .where(\"date_format(`created_at`, '%Y%m%d') = '20220101'\")\n\n# Hive 테이블은 pk를 명시적으로 지정\ntarget = Table(name='mock_2', sender=hive_sender, pk=['vin']) \\\n            .where(\"date_format(created_at, 'yyyyMMdd') = '20220101'\")\n```\n\n```python\n__init__(self, name: str, sender: BaseConnectorMeta, pk: List[str]): Table\n```\n\n- **name** \n  - DataSource에 위치한 테이블명\n- **sender** \n  - 사용할 Connector객체를 기입 (`MariadbConnector` or `HiveConnector`)\n- **pk**\n  - Hive에 위치한 테이블의 경우 pk를 명시적으로 기입\n\n```python\nwhere(self, clause: str): Table\n```\n\n- **clause**\n  - 테이블에서 데이터를 필터링하기위한 where 구문\n\n---\n\n### ColumnPair\n\n```python\nfrom migcomparator.models.table import ColumnPair\n\ncolpair = ColumnPair(source='car_model_year', target='car_model_yyyy')\n```\n\n```python\n__init__(self, source: str, target: str): Table\n```\n \n비교하고자 하는 테이블간의 컬렴밍이 다른경우 컬럼명을 매치시키기 위해 사용\n- **source**\n  - source 테이블의 컬럼명\n- **target**\n  - target 테이블의 컬럼명\n\n---\n\n### Validator\n\n- `PandasValidator` \n  - DataSource에 위치한 데이터를 라이브러리가 설치된 단일머신으로 들고와 비교를 수행하는 Validator (소규모 데이터셋에 적합)\n\n#### 데이터 건수 비교\n\n```python\ncount_compare(cls, source: Table, target: Table): PairResult\n```\n\nsource와 target에 비교대상 `Table` 객체를 인자로 전달하여, 두 테이블간의 데이터 count 결과반환\n\n\n#### 대칭차집합 비교\n\n```python\ndifference_compare(cls, source: Table, target: Table, colpair: List[ColumnPair] = None): PairResult\n```\n\nsource와 target에 비교대상 `Table` 객체를 인자로 전달하여, full-outer join 수행후,\n각 테이블에 존재하지 않는 primary key를 반환\n\n- **colpair**\n  - 비교하고자 하는 테이블간의 컬렴밍이 다른경우 컬럼명을 매치시키기 위해 사용\n\n\n#### 테이블간의 불일치 데이터 추출\n\n```python\nvalue_compare(cls, source: Table, target: Table, on: List[ColumnPair] = None, colpair: List[ColumnPair] = None): SingleResult\n```\n\n\nsource와 target에 비교대상 `Table` 객체를 인자로 전달하여, inner join후, 테이블의 모든 컬럼들을 비교하여 불일치하는 데이터 추출\n\n- **on**\n  - inner join의 대상이되는 컬럼들을 명시적으로 지정할때 사용(pk의 컬럼명이 다른경우 사용)\n- **colpair**\n  - 비교하고자 하는 테이블간의 컬렴밍이 다른경우 컬럼명을 매치시키기 위해 사용\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Altera520",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "migcomparator",
    "package_url": "https://pypi.org/project/migcomparator/",
    "platform": "",
    "project_url": "https://pypi.org/project/migcomparator/",
    "project_urls": {
      "Homepage": "https://github.com/Altera520"
    },
    "release_url": "https://pypi.org/project/migcomparator/1.0.3/",
    "requires_dist": [
      "impyla (==0.17.0)",
      "pandas (>=1.1.5)",
      "numpy (>=1.20.1)",
      "PyMySQL (==1.0.2)",
      "pandera (==0.8.0)"
    ],
    "requires_python": ">=3.0",
    "summary": "Apache Hive and MariaDB(MySQL) compare library",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12458788,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5927afc293a1549562d59cde5e36afb0c6ee4baaff85d289fe8b438034aadcc0",
          "md5": "92b4506b5da1177549f204e0448060df",
          "sha256": "a0eb40e75a7709bbdf87aab2f876732fe13c31d13c93074ed67d9abd956d6cda"
        },
        "downloads": -1,
        "filename": "migcomparator-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92b4506b5da1177549f204e0448060df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 13365,
        "upload_time": "2022-01-01T15:32:53",
        "upload_time_iso_8601": "2022-01-01T15:32:53.668095Z",
        "url": "https://files.pythonhosted.org/packages/59/27/afc293a1549562d59cde5e36afb0c6ee4baaff85d289fe8b438034aadcc0/migcomparator-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94e5f4caa17b2cb294e4be9748a2d6fbe6eb7f6a1269ad2d5ef8bdad35c1d56b",
          "md5": "dfa6cc2c6e09b3a347c093fe3304c2ad",
          "sha256": "5b7cbf578858f20da3f459715ac8c4afd58361ec96664d572f2365d0582dc56a"
        },
        "downloads": -1,
        "filename": "migcomparator-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfa6cc2c6e09b3a347c093fe3304c2ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 17460,
        "upload_time": "2022-01-02T15:58:35",
        "upload_time_iso_8601": "2022-01-02T15:58:35.364836Z",
        "url": "https://files.pythonhosted.org/packages/94/e5/f4caa17b2cb294e4be9748a2d6fbe6eb7f6a1269ad2d5ef8bdad35c1d56b/migcomparator-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "228a0b5fada907c0a8ffc46949d4d9401664ce6df453134707b0469f6be242af",
          "md5": "49f886ef62598676498eb7208cad7845",
          "sha256": "23236b35ea93561a9c6f5e637b39ea50656368d05a118d7ef40d9698ae2ebd38"
        },
        "downloads": -1,
        "filename": "migcomparator-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49f886ef62598676498eb7208cad7845",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 15960,
        "upload_time": "2022-01-02T15:58:36",
        "upload_time_iso_8601": "2022-01-02T15:58:36.897516Z",
        "url": "https://files.pythonhosted.org/packages/22/8a/0b5fada907c0a8ffc46949d4d9401664ce6df453134707b0469f6be242af/migcomparator-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94e5f4caa17b2cb294e4be9748a2d6fbe6eb7f6a1269ad2d5ef8bdad35c1d56b",
        "md5": "dfa6cc2c6e09b3a347c093fe3304c2ad",
        "sha256": "5b7cbf578858f20da3f459715ac8c4afd58361ec96664d572f2365d0582dc56a"
      },
      "downloads": -1,
      "filename": "migcomparator-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dfa6cc2c6e09b3a347c093fe3304c2ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 17460,
      "upload_time": "2022-01-02T15:58:35",
      "upload_time_iso_8601": "2022-01-02T15:58:35.364836Z",
      "url": "https://files.pythonhosted.org/packages/94/e5/f4caa17b2cb294e4be9748a2d6fbe6eb7f6a1269ad2d5ef8bdad35c1d56b/migcomparator-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "228a0b5fada907c0a8ffc46949d4d9401664ce6df453134707b0469f6be242af",
        "md5": "49f886ef62598676498eb7208cad7845",
        "sha256": "23236b35ea93561a9c6f5e637b39ea50656368d05a118d7ef40d9698ae2ebd38"
      },
      "downloads": -1,
      "filename": "migcomparator-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "49f886ef62598676498eb7208cad7845",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 15960,
      "upload_time": "2022-01-02T15:58:36",
      "upload_time_iso_8601": "2022-01-02T15:58:36.897516Z",
      "url": "https://files.pythonhosted.org/packages/22/8a/0b5fada907c0a8ffc46949d4d9401664ce6df453134707b0469f6be242af/migcomparator-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}