{
  "info": {
    "author": "Ryan Emenecker Wusm Holehouse Lab",
    "author_email": "remenecker@wustl.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PredictDSSP: a PARROT BRNN for predicting DSSP scores\n\n**PredictDSSP** is a Python package that allows prediction of DSSP scores using a PARROT generated BRRN classifier. For more on PARROT see https://github.com/idptools/parrot\n\n\nPredictDSSP is usable from the command-line or as a Python API.\n\n\n## Background\n\nPredictDSSP was trained on per-residue DSSP scores. DSSP scores classify secondary structure where \n\n 0 is helicity\n\n 1 is beta strand/sheet\n\n 2 is coil\n\nFor the final network, a balanced dataset of per-residues-scores from 74,777 sequences was used. The dataset consists of 2 layers and a hidden size of 20. The network name is dssp_2022_01_07_CB_thresh_0p8_hs20_nl2.pt. Networks with fewer layers / smaller hidden size were less accurate, but additional layers and increases in hidden size did not improve accuracy above that of this network.\n\n### How accurate is this predictor?\n\nEvaluation of the dataset on 4,352 sequences that were not used for training found that it had an overall accuracy of 74.002% and an MCC of MCC = 0.60345. The breakdown of predictions for helicity (0), beta strand/sheet (1), and coil (2) is as follows:\n\n percent correct predicting 0 = 75.16%, \n\n percent correct predicting 1 = 68.66%, \n\n percent correct predicting 2 = 76.954%\n\nWe have found that the predictor performs relatively well overall but does not seem to perform well in disordered regions.\n\n\n## Installation\n\nTo install PredictDSSP using PyPi, you can use pip from the command-line. \n\n\t$ pip install PredictDSSP\n\n\nTo clone the GitHub repository and gain the ability to modify a local copy of the code, run\n\n\t$ git clone https://github.com/ryanemenecker/PredictDSSP.git\n\t$ cd PredictDSSP\n\t$ pip install .\n\n\nYou can now use PredictDSSP from Python or the command-line.\n\n\n## Usage from Python\n\nFirst import PredictDSSP:\n\n\timport PredictDSSP as dssp\n\n### Predicting DSSP scores\n\nNext, make DSSP score predictions:\n\n\tdssp.predict_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA')\n\n**Additional usage**\n\nYou can now get the raw values from the predictions. These are returned as a list of lists. The first element in each list is the helical probability, the second element in each list is the probability to form a beta strand/sheet, and the final element in each list is the probability to be coiled.\n\nExample\n\n\tdssp.predict_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', raw_vals=True)\n\n\n### Graphing DSSP scores\n\nTo graph DSSP scores:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA')\n\n*optional arguments*\n\nTo get the raw values graphed (the actual probabilities for each secondary structure), set raw_vals=True. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', raw_vals=True)\n\nTo set the title, set 'title' equal to your desired title. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', title='mygraph')\n\nTo set exclude predictions for regions that are disordered, set exclude_disorder=True. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', exclude_disorder=True)\n\nTo set exclude disorder bars from the grpah when excluding disorder, set no_disorder_bars=True. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', exclude_disorder=True, no_disorder_bars=True)\n\nTo change the disorder threshhold, set 'dis_threshhold' to your desired threshhold. Disorder scores are calculated using metapredict, and a higher threshhold requires higher confidence to denote a region as disordered. Default is 0.3. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', exclude_disorder=True, dis_threshhold=0.5)\n\nTo change DPI of teh generated figure, set 'DPI' to the desired DPI. Default is 150. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', DPI=300)\n\nTo save the graph, set output file to the path followed by the output file name. Ex:\n\n\tdssp.graph_dssp('MQWESSASSSWQQQQGGGGSAFACACAAFAAAAAA', output_file='/my/file/path/graph_name.png')\n\n\n### Predicting DSSP scores from fasta\n\nTo predict DSSP scores from a fasta file:\n\n\tdssp.predict_dssp_fasta('/path/to/my/fasta/file/my_file.fasta')\n\n*optional arguments*\n\nTo make an output file instead of returning sequence immediately, set output_file to your filepath followed by the file name. Ex:\n\n\tdssp.predict_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', output_file = '/where/to/save/file/my_dssp_predictions.csv')\n\n\n### Graphing DSSP scores from fasta\n\nTo graph DSSP scores from sequences in a FASTA file:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta')\n\nBy default it will return individual graphs. **If you have a large fasta file, you will want to save the graphs or you will have to close each graph individually as it is generated**.\n\n*optional arguments*\n\nTo save the graphs to a specified directory, specifiy 'output_dir' = file path to your director. Ex:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', output_dir = '/where/to/save/files/')\n\nTo set exclude predictions for regions that are disordered, set exclude_disorder=True. Ex:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', exclude_disorder=True)\n\nTo set exclude disorder bars from the grpah when excluding disorder, set no_disorder_bars=True. Ex:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', exclude_disorder=True, no_disorder_bars=True)\n\nTo change the disorder threshhold, set 'dis_threshhold' to your desired threshhold. Disorder scores are calculated using metapredict, and a higher threshhold requires higher confidence to denote a region as disordered. Default is 0.3. Ex:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', exclude_disorder=True, dis_threshhold=0.5)\n\nTo change DPI of teh generated figure, set 'DPI' to the desired DPI. Default is 150. Ex:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', DPI=300)\n\nTo set the output file type, set 'output_filetype' to your desired filetype. Ex:\n\n\tdssp.graph_dssp_fasta('/path/to/my/fasta/file/my_file.fasta', output_filetype='pdf')\n\n\n### Predicting DSSP scores from uniprot ID\n\nYou can get DSSP score predictions by just inputting a Uniprot ID. \n\n\tdssp.predict_dssp_uniprot('UniprotID')\n\nEx:\n\n\tdssp.predict_dssp_uniprot('Q8RYC8')\n\n*optional arguments*\n\nTo get raw probability values, simply set raw_vals=True. Ex.\n\n\tdssp.predict_dssp_uniprot('Q8RYC8', raw_vals=True)\n\n\n### Graphing DSSP scores from uniprot ID\n\nYou can generate DSSP score graphs using a uniprot ID. \n\n\tdssp.graph_dssp_uniprot('UniprotID')\n\nEx:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8')\n\n*optional arguments*\n\nTo graph raw probability values, simply set raw_vals=True. Ex.\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', raw_vals=True)\n\nTo set the title, set 'title' equal to your desired title. Ex:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', title='mygraph')\n\nTo set exclude predictions for regions that are disordered, set exclude_disorder=True. Ex:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', exclude_disorder=True)\n\nTo set exclude disorder bars from the grpah when excluding disorder, set no_disorder_bars=True. Ex:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', exclude_disorder=True, no_disorder_bars=True)\n\nTo change the disorder threshhold, set 'dis_threshhold' to your desired threshhold. Disorder scores are calculated using metapredict, and a higher threshhold requires higher confidence to denote a region as disordered. Default is 0.3. Ex:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', exclude_disorder=True, dis_threshhold=0.5)\n\nTo change DPI of teh generated figure, set 'DPI' to the desired DPI. Default is 150. Ex:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', DPI=300)\n\nTo save the graph, set output file to the path followed by the output file name. Ex:\n\n\tdssp.graph_dssp_uniprot('Q8RYC8', output_file='/my/file/path/graph_name.png')\n\n\n\n## Usage from the command-line\n\n### Graphing DSSP scores from the command-line using a Uniprot ID\n\n``dssp-uniprot`` generates a graph from a uniprot ID. \n\n**Example:**\n\n\t$ dssp-uniprot Q8RYC8\n\n*optional arguments*\n\n``-D`` or ``--dpi`` lets you set the DPI of the generated graph.\n\n\t$ dssp-uniprot Q8RYC8 -D\n\n\n``-e`` or ``--exclude_disorder`` lets you exclude disordered regions from predictions.\n\n\t$ dssp-uniprot Q8RYC8 -e\n\n\n``-o`` or ``--output-file`` lets you save the graph to a specific location.\n\n\t$ dssp-uniprot Q8RYC8 -o /my/path/to/file/my_graph.png\n\n\n``-t`` or ``--title`` lets you set the title of the graph.\n\n\t$ dssp-uniprot Q8RYC8 -t MyCoolGraph\n\n``-c`` or ``--cutoff`` lets you set cutoff value for something to be considered disordered.\n\n\t$ dssp-uniprot Q8RYC8 -c 0.5\n\n``-r`` or ``--raw_vals`` lets you graph raw value probabilities\n\n\t$ dssp-uniprot Q8RYC8 -r\n\n\n### Graphing DSSP scores from the command-line using a protein name\n\n``dssp-name`` generates a graph from a protien and / or organism name\n\n**Example:**\n\n\t$ dssp-name p53 human\n\n*optional arguments*\n\n``-D`` or ``--dpi`` lets you set the DPI of the generated graph.\n\n\t$ dssp-name p53 -D\n\n\n``-e`` or ``--exclude_disorder`` lets you exclude disordered regions from predictions.\n\n\t$ dssp-name p53 -e\n\n\n``-o`` or ``--output-file`` lets you save the graph to a specific location.\n\n\t$ dssp-name p53 -o /my/path/to/file/my_graph.png\n\n\n``-t`` or ``--title`` lets you set the title of the graph.\n\n\t$ dssp-name p53 -t MyCoolGraph\n\n``-c`` or ``--cutoff`` lets you set cutoff value for something to be considered disordered.\n\n\t$ dssp-name p53 -c 0.5\n\n``-r`` or ``--raw_vals`` lets you graph raw value probabilities\n\n\t$ dssp-name p53 -r\n\n\n\n### Generating DSSP scores from a FASTA file form the command-line\n\n``dssp-fasta`` generates dssp scores from a specified FASTA file. By default will save the scores to your current directory as dssp_scores.csv\n\n**Example:**\n\n\t$ dssp-fasta /path/to/my/file/sequences_file.fasta\n\n*optional arguments*\n\n``-o`` or ``--output-file`` lets you save the scores to a specific location.\n\n\t$ dssp-fasta /path/to/my/file/sequences_file.fasta -o /where/to/save/these/scores/dssp_scores.csv\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PredictDSSP",
    "package_url": "https://pypi.org/project/PredictDSSP/",
    "platform": null,
    "project_url": "https://pypi.org/project/PredictDSSP/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PredictDSSP/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Prediicting DSSP Scores",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14377823,
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31f355707f64da51e936397851ed6f15b75cc0eb08988cdf53365ae7fc09e0d9",
          "md5": "efc20d4f4793241d6d714d58de1702e5",
          "sha256": "c29cb46d98b6e5979c404c68748cc4c5171254d49cc4cbf84e8c91a0faa230b8"
        },
        "downloads": -1,
        "filename": "PredictDSSP-1.tar.gz",
        "has_sig": false,
        "md5_digest": "efc20d4f4793241d6d714d58de1702e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 107310,
        "upload_time": "2022-06-06T16:29:38",
        "upload_time_iso_8601": "2022-06-06T16:29:38.577461Z",
        "url": "https://files.pythonhosted.org/packages/31/f3/55707f64da51e936397851ed6f15b75cc0eb08988cdf53365ae7fc09e0d9/PredictDSSP-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30a1cdbef470efba019966bf522f7793ba108abf1114fc3746ece3b69c5229c5",
          "md5": "0913b4946da402210a51fefe9ea704db",
          "sha256": "ba1eec5518aa26869e8c93b0d4cc0cde23bdddac5989c03037ffcc4c718eeb00"
        },
        "downloads": -1,
        "filename": "PredictDSSP-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0913b4946da402210a51fefe9ea704db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 107117,
        "upload_time": "2022-06-22T14:00:47",
        "upload_time_iso_8601": "2022-06-22T14:00:47.764236Z",
        "url": "https://files.pythonhosted.org/packages/30/a1/cdbef470efba019966bf522f7793ba108abf1114fc3746ece3b69c5229c5/PredictDSSP-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "896d8203bb8b1e4e8f4ffdd54c74a73114bde65464a5327f15bb53a83afdb7eb",
          "md5": "23b422d46849a93d032f348ce0d4d197",
          "sha256": "f495742ba0771073b60b6e93c25da41f68df6e8c624ae82f17c91c83f96136d7"
        },
        "downloads": -1,
        "filename": "PredictDSSP-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "23b422d46849a93d032f348ce0d4d197",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 119419,
        "upload_time": "2022-07-08T17:02:19",
        "upload_time_iso_8601": "2022-07-08T17:02:19.104644Z",
        "url": "https://files.pythonhosted.org/packages/89/6d/8203bb8b1e4e8f4ffdd54c74a73114bde65464a5327f15bb53a83afdb7eb/PredictDSSP-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6143f404c4cbf8c33dcf4822c5ceb5b1f3d8f08a51c123ad8c6b31f569e1f4b1",
          "md5": "d9d8547bf8984734d0860828cf41cebe",
          "sha256": "fcb11f6881b1d0c361e20be86cdb29d9573ef436156bb6738e9a1d4d06f77503"
        },
        "downloads": -1,
        "filename": "PredictDSSP-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9d8547bf8984734d0860828cf41cebe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 119460,
        "upload_time": "2022-07-08T17:25:51",
        "upload_time_iso_8601": "2022-07-08T17:25:51.051366Z",
        "url": "https://files.pythonhosted.org/packages/61/43/f404c4cbf8c33dcf4822c5ceb5b1f3d8f08a51c123ad8c6b31f569e1f4b1/PredictDSSP-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6143f404c4cbf8c33dcf4822c5ceb5b1f3d8f08a51c123ad8c6b31f569e1f4b1",
        "md5": "d9d8547bf8984734d0860828cf41cebe",
        "sha256": "fcb11f6881b1d0c361e20be86cdb29d9573ef436156bb6738e9a1d4d06f77503"
      },
      "downloads": -1,
      "filename": "PredictDSSP-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d9d8547bf8984734d0860828cf41cebe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 119460,
      "upload_time": "2022-07-08T17:25:51",
      "upload_time_iso_8601": "2022-07-08T17:25:51.051366Z",
      "url": "https://files.pythonhosted.org/packages/61/43/f404c4cbf8c33dcf4822c5ceb5b1f3d8f08a51c123ad8c6b31f569e1f4b1/PredictDSSP-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}