{
  "info": {
    "author": "Christian Dein",
    "author_email": "christian.dein@dein-hosting.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Case Based Reasoning library for Python - cbrlib\n\n## Installation\n\n```bash\npip install cbrlib\n```\n\n```python\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom cbrlib.reasoning.Reasoner import InferenceOptions\nfrom cbrlib.utils.serializer import to_json_string\nfrom cbrlib.evaluation.AssemblyAverageEvaluator import AssemblyAverageEvaluator\nfrom cbrlib.evaluation.LookupTableEvaluator import LookupTableEvaluator\nfrom cbrlib.evaluation.NumberInterpolationEvaluator import NumberInterpolationMetrics, NumberInterpolation, \\\n    NumberInterpolationEvaluator\nfrom cbrlib.model.AssemblyClass import AssemblyClass\nfrom cbrlib.model.Attribute import Attribute\nfrom cbrlib.model.EnumerationPredicate import EnumerationPredicate\nfrom cbrlib.model.FloatClass import FloatClass\nfrom cbrlib.model.IntegerClass import IntegerClass\nfrom cbrlib.model.RangePredicate import RangePredicate\n\nfrom cbrlib.model.StringClass import StringClass\nfrom cbrlib.reasoning.LinearReasoner import LinearReasoner\n\nfrom functools import reduce\n\nfrom random import choice, randint\nimport timeit\n\n#plt.style.use('ggplot')\n```\n\n## NumberInterpolationEvaluator\n\nWe create a ```price_class``` from ```cbrlib.model.FloatClass``` and set the predicate for this class to be of ```cbrlib.model.RangePredicate``` which gives the boundary of a minimum of 10 and a miximum possible value of 10000. We also define different number interpolation evaluators.\n\n\n```python\n# Define the price class with minimum value of 10 and maximum value of 100000\nprice_class = FloatClass('Price')\nmin_ = price_class.create_object(10)\nmax_ = price_class.create_object(100000)\nprice_class.set_predicate(RangePredicate(min_, max_))\n\n# Define inperpolation metrics with a tolerance if case is lesser than query of 0\n# -> Every case lower than the query will have 0 similarity\nmetrics = NumberInterpolationMetrics()\nmetrics.tolerance_if_more = 0.0\nless_is_good = NumberInterpolationEvaluator('LessIsGood', min_.get_value(), max_.get_value(), metrics)\n\n# Define the same as above but use an origin value\n# The lower the query the smaller is the vicinity\nmetrics = NumberInterpolationMetrics()\nmetrics.tolerance_if_more = 0.0\nmetrics.origin = 10\nmetrics.use_origin = True\nmetrics.tolerance_if_more = 0.0\nless_is_good_with_origin = NumberInterpolationEvaluator('LessIsGoodUseOrigin',\n                                                        min_.get_value(), max_.get_value(), metrics)\n\nmetrics = NumberInterpolationMetrics()\nmetrics.tolerance_if_less = 0.0\nmetrics.origin = min_.get_value()\nmetrics.use_origin = True\nmetrics.tolerance_if_less = 0.3\nmetrics.tolerance_if_more = 0.1\nmetrics.linearity_if_less = 0.5\nmetrics.linearity_if_more = 3\nmetrics.set_interpolation_if_less(NumberInterpolation.Sigmoid)\nmetrics.set_interpolation_if_more(NumberInterpolation.Sigmoid)\nreal_behaviour = NumberInterpolationEvaluator('RealBehaviour',\n                                                        min_.get_value(), max_.get_value(), metrics)\n```\n\nLet's generate some lists of values from the different evaluators.\n\n\n```python\nquery = price_class.read_object(500)\n\nless_is_good_values = list()\nless_is_good_with_origin_values = list()\nreal_behaviour_values = list()\nsteps = list()\nfor i in range(300, 600):\n    steps.append(i)\n    case = price_class.read_object(i)\n    less_is_good_values.append(\n        less_is_good.evaluate(query, case))\n    less_is_good_with_origin_values.append(\n        less_is_good_with_origin.evaluate(query, case))\n    real_behaviour_values.append(real_behaviour.evaluate(query, case))\n```\n\nTo understand the evaluators, we will now visualize them with the help of matplotlib.\n\n\n```python\nfigure = plt.figure(2, figsize=(20, 9.6))\nplt1 = figure.add_subplot(221)\nplt2 = figure.add_subplot(222)\nplt3 = figure.add_subplot(223)\n\nplt1.plot(\n    steps, less_is_good_values\n)\nplt1.set_title('Less is good')\nplt1.set_xlabel(price_class.get_id())\nplt1.set_ylabel('Similarity')\nplt2.plot(\n    steps, less_is_good_with_origin_values\n)\nplt2.set_title('Less is good with use of an origin')\nplt2.set_xlabel(price_class.get_id())\nplt2.set_ylabel('Similarity')\n\nplt3.plot(\n    steps, real_behaviour_values\n)\nplt3.set_title('Real behaviour')\nplt3.set_xlabel(price_class.get_id())\nplt3.set_ylabel('Similarity')\n\nplt.show()\n```\n\n\n\n![png](https://raw.githubusercontent.com/hilfestellung/PyCBR/main/output_6_0.png)\n\n\n\nNext we will add the class ```mileage_class```, it will be of the type ```IntegerClass``` and will have the boundary of 0 and 1000000.\n\n\n```python\nmileage_class = IntegerClass('Mileage')\nmileage_min = 0\nmileage_max = 1000000\nmileage_class.set_predicate(RangePredicate(mileage_class.create_object(mileage_min),\n                                           mileage_class.create_object(mileage_max)))\n\nmileage_evaluator = NumberInterpolationEvaluator('MileageDefault', mileage_min, mileage_max)\n\nquery = mileage_class.read_object(mileage_max / 2) # Query value is 500000\n\nmileage_values = list()\nsteps = list()\nfor i in range(mileage_min, mileage_max, int(mileage_max / 1000)):\n    steps.append(i)\n    mileage_values.append(mileage_evaluator.evaluate(query, mileage_class.read_object(i)))\n```\n\nWe can take a look at the standard metrics of a ```NumberInterpolationMetrics``` object. \n\n\n```python\nplt.plot(steps, mileage_values)\nplt.show()\n```\n\n\n\n![png](https://raw.githubusercontent.com/hilfestellung/PyCBR/main/output_10_0.png)\n\n\n\n## LookupTableEvaluator\nWe also can define a ```brands_class``` of Type ```cbrlib.model.StringClass```.\n\n\n```python\nbrand_class = StringClass('Brand')\nbrands = ['Opel', 'Daimler Benz', 'BMW', 'VW']\nbrand_class.set_predicate(EnumerationPredicate(\n                            map(lambda b: brand_class.create_object(b), brands)))\n\nbrand_similarity = {\n    'Opel': {\n        'VW': 0.6,\n        'BMW': 0.3,\n        'Daimler Benz': 0.1\n    },\n    'Daimler Benz': {\n        'BMW': 0.8,\n        'VW': 0.4,\n        'Opel': 0.1\n    },\n    'BMW': {\n        'Daimler Benz': 0.8,\n        'VW': 0.6,\n        'Opel': 0.1\n    },\n    'VW': {\n        'BMW': 0.8,\n        'Daimler Benz': 0.8,\n        'Opel': 0.6,\n    }\n}\nbrand_evaluator = LookupTableEvaluator('Brand', brand_similarity)\n```\n\nIf we want to know how similar the Brand ```BMW``` to ```VW``` is, we now can ask the brand evaluator:\n\n\n```python\nprint(f'BMW is {brand_evaluator.evaluate(brand_class.read_object(\"BMW\"), brand_class.read_object(\"VW\")) * 100}% similar to VW')\n```\n\n    BMW is 60.0% similar to VW\n\n\n## AssemblyAverageEvaluator\nOr we can use the ```cbrlib.model.AssemblyClass``` to define an ```UsedCar``` descriptor and find a used car with a ```cbrlib.reasoner.LinearReasoner```\n\n\n```python\nused_car_class = AssemblyClass('UsedCar', [\n        Attribute('price', price_class),\n        Attribute('mileage', mileage_class),\n        Attribute('brand', brand_class)\n    ])\n\nused_car_evaluator = AssemblyAverageEvaluator('UsedCarEvaluator',\n                             {\n                                'price': {\n                                    'weight': 2, # The price is twice as important than the rest\n                                    'evaluator': real_behaviour\n                                    },\n                                'mileage': {\n                                    'weight': 1,\n                                    'evaluator': mileage_evaluator\n                                },\n                                'brand': {\n                                    'weight': 1,\n                                    'evaluator': brand_evaluator\n                                }\n                            })\n\ncars = [\n    {\n        'brand': 'Opel',\n        'price': 6600,\n        'mileage': 68000\n    },\n    {\n        'brand': 'BMW',\n        'price': 8600,\n        'mileage': 110000\n    },\n    {\n        'brand': 'Daimler Benz',\n        'price': 11000,\n        'mileage': 21000\n    },\n    {\n        'brand': 'VW',\n        'price': 2799,\n        'mileage': 550000\n    },\n]\nreasoner = LinearReasoner(\n    map(lambda c: used_car_class.read_object(c), cars), used_car_evaluator)\n\n# Ask the reasoner now for a used car with the price of 7000 and a mileage of 75000\n\ncandidates = reasoner.infer(used_car_class.read_object({\n    'price': 7000,\n    'mileage': 120000\n}))\nprint(to_json_string(candidates, indent=4))\n```\n\n    [\n        {\n            \"similarity\": 0.9168199170617668,\n            \"case\": {\n                \"brand\": \"Opel\",\n                \"mileage\": 68000,\n                \"price\": 6600.0\n            }\n        },\n        {\n            \"similarity\": 0.32666666666666666,\n            \"case\": {\n                \"brand\": \"BMW\",\n                \"mileage\": 110000,\n                \"price\": 8600.0\n            }\n        },\n        {\n            \"similarity\": 0.26733333333333337,\n            \"case\": {\n                \"brand\": \"Daimler Benz\",\n                \"mileage\": 21000,\n                \"price\": 11000.0\n            }\n        },\n        {\n            \"similarity\": 0.04666666666666667,\n            \"case\": {\n                \"brand\": \"VW\",\n                \"mileage\": 550000,\n                \"price\": 2799.0\n            }\n        }\n    ]\n\n\n## Performance\nLet us now create a ```cbrlib.reasoner.Reasoner``` from ```cbrlib.reasoner.LinearReasoner``` with a set of 1000000 random used cars.\n\n\n```python\nused_car_class = AssemblyClass('UsedCar', [\n        Attribute('price', price_class),\n        Attribute('mileage0', mileage_class), # We create multiple number classes\n        Attribute('mileage1', mileage_class), # to make some 'complex' description\n        Attribute('mileage2', mileage_class), # for performance test.\n        Attribute('mileage3', mileage_class),\n        Attribute('mileage4', mileage_class),\n        Attribute('brand', brand_class)\n    ])\ncars = []\nfor c in range(1000000):\n    cars.append({\n        'price': randint(10, 100000),\n        'mileage0': randint(0, 1000000),\n        'mileage1': randint(0, 1000000),\n        'mileage2': randint(0, 1000000),\n        'mileage3': randint(0, 1000000),\n        'mileage4': randint(0, 1000000),\n        'brand': choice(brands)\n    })\nreasoner = LinearReasoner(\n    map(lambda c: used_car_class.read_object(c), cars),\n    AssemblyAverageEvaluator('UsedCarEvaluator',\n                             {\n                                'price': {\n                                    'weight': 2,\n                                    'evaluator': real_behaviour\n                                    },\n                                'mileage': {\n                                    'weight': 1,\n                                    'evaluator': mileage_evaluator\n                                },\n                                'brand': {\n                                    'weight': 1,\n                                    'evaluator': brand_evaluator\n                                }\n                            }))\n\nprice = randint(10, 100000)      # Also lets create\nmileage0 = randint(0, 1000000)   # create random query values\nmileage1 = randint(0, 1000000)\nmileage2 = randint(0, 1000000)\nmileage3 = randint(0, 1000000)\nmileage4 = randint(0, 1000000)\nbrand = choice(brands)\n\nloops = 100000\nrepetitions = 5\ntask = timeit.Timer(lambda: reasoner.infer(\n    used_car_class.read_object({\n        'price': price,\n        'mileage0': mileage0,\n        'mileage1': mileage1,\n        'mileage2': mileage2,\n        'mileage3': mileage3,\n        'mileage4': mileage4,\n        'brand': brand\n    }), InferenceOptions({\n        'skip': 0,\n        'limit': 10\n    })\n    ))\n\nmeasures = task.repeat(repetitions, loops)\nbest = reduce(lambda c, n: min(c, n), measures)\n\n# Caution it runs about a minute!\nprint(f'{loops} loops, best of {repetitions}: {best*1000} ms per loop')\n\n```\n\n    100000 loops, best of 5: 1851.9436290080193 ms per loop\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hilfestellung/PyCBR",
    "keywords": "",
    "license": "LGPL-2.1-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cbrlib",
    "package_url": "https://pypi.org/project/cbrlib/",
    "platform": "",
    "project_url": "https://pypi.org/project/cbrlib/",
    "project_urls": {
      "Homepage": "https://github.com/hilfestellung/PyCBR"
    },
    "release_url": "https://pypi.org/project/cbrlib/1.1.2/",
    "requires_dist": [
      "PyYAML"
    ],
    "requires_python": "",
    "summary": "Library for the implementation of projects with the help of Case Based Reasoning",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9490680,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74094eee14a62f94ab3e979b8005057fbd2f112eb2911d7f31e78ed9d785d852",
          "md5": "1d3c96031c4c5c86acc75a086d0d3fd6",
          "sha256": "6901b25bcca180c87109f6d64be448c3196f72ed3c2cf6ffa9bd24c1206b9728"
        },
        "downloads": -1,
        "filename": "cbrlib-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d3c96031c4c5c86acc75a086d0d3fd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33709,
        "upload_time": "2021-02-21T18:28:51",
        "upload_time_iso_8601": "2021-02-21T18:28:51.118192Z",
        "url": "https://files.pythonhosted.org/packages/74/09/4eee14a62f94ab3e979b8005057fbd2f112eb2911d7f31e78ed9d785d852/cbrlib-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16bc15ff379a995068a140ef6498977f1934fde73e68f11667c8fd1bc68091ef",
          "md5": "60d8c05639cb10322b0659496bd3a1a0",
          "sha256": "79598449ee048f896fc8a26ee68ce05166c9dad0961374fbfc2e45ad52c43898"
        },
        "downloads": -1,
        "filename": "cbrlib-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60d8c05639cb10322b0659496bd3a1a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22285,
        "upload_time": "2021-02-21T18:28:53",
        "upload_time_iso_8601": "2021-02-21T18:28:53.458414Z",
        "url": "https://files.pythonhosted.org/packages/16/bc/15ff379a995068a140ef6498977f1934fde73e68f11667c8fd1bc68091ef/cbrlib-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d4afef15fe0dd83218a96e776970329692891d59cc03fe840ebe1dbbbbd4b7f",
          "md5": "d75f8528265a376a2a066348a356c4eb",
          "sha256": "7f87cebacb232c97209f21caa5b4782ac4bcfab92aa80304296cc784a1d23166"
        },
        "downloads": -1,
        "filename": "cbrlib-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d75f8528265a376a2a066348a356c4eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33720,
        "upload_time": "2021-02-21T18:41:08",
        "upload_time_iso_8601": "2021-02-21T18:41:08.668563Z",
        "url": "https://files.pythonhosted.org/packages/1d/4a/fef15fe0dd83218a96e776970329692891d59cc03fe840ebe1dbbbbd4b7f/cbrlib-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0951bd4db499993baa45e4a39d209f9c4e6dab7e96d5d3301c9c387fbb1524e1",
          "md5": "a3fa8995a5aa07dd2f3ddd0614cc9222",
          "sha256": "caa00845c92f036f9a69b05a6a88ad5ae8e9e05e9ecd1d3f24f93a207bf97790"
        },
        "downloads": -1,
        "filename": "cbrlib-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3fa8995a5aa07dd2f3ddd0614cc9222",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22290,
        "upload_time": "2021-02-21T18:41:10",
        "upload_time_iso_8601": "2021-02-21T18:41:10.195247Z",
        "url": "https://files.pythonhosted.org/packages/09/51/bd4db499993baa45e4a39d209f9c4e6dab7e96d5d3301c9c387fbb1524e1/cbrlib-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c45b9555978a4050d3c35af431e7aa72921978ee5fa8490094778fcc8e22f4c7",
          "md5": "29970b2a9a86eb708095c46c05eb510b",
          "sha256": "19c757995198a2ac70e0818467ef5e8dc0252154ad05fbdf73d1a5462d3e01cb"
        },
        "downloads": -1,
        "filename": "cbrlib-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29970b2a9a86eb708095c46c05eb510b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36220,
        "upload_time": "2021-02-22T17:16:39",
        "upload_time_iso_8601": "2021-02-22T17:16:39.482616Z",
        "url": "https://files.pythonhosted.org/packages/c4/5b/9555978a4050d3c35af431e7aa72921978ee5fa8490094778fcc8e22f4c7/cbrlib-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5836b11ff7060076964750cfa0e7b2268a07f10dc32c4ecb59111ca49701309",
          "md5": "be0b3b777195a37b200f9c9cc93c7116",
          "sha256": "4672f02d04f8bdbd96e62d44d65335fed33c15df7fbdc3c2942431daa8e7df95"
        },
        "downloads": -1,
        "filename": "cbrlib-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be0b3b777195a37b200f9c9cc93c7116",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26967,
        "upload_time": "2021-02-22T17:16:41",
        "upload_time_iso_8601": "2021-02-22T17:16:41.331211Z",
        "url": "https://files.pythonhosted.org/packages/a5/83/6b11ff7060076964750cfa0e7b2268a07f10dc32c4ecb59111ca49701309/cbrlib-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "433b82b0e5ec07ce160af1c8fe6db34d5d54a62cc42c6646d7e9819c11d93909",
          "md5": "85b1b50d56a51cccf0bb2ea472bc7f81",
          "sha256": "0992039886cd0a630aaec81b17247af4ff40f3a09974014d4504933aecdc2492"
        },
        "downloads": -1,
        "filename": "cbrlib-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85b1b50d56a51cccf0bb2ea472bc7f81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36220,
        "upload_time": "2021-02-22T17:21:47",
        "upload_time_iso_8601": "2021-02-22T17:21:47.099352Z",
        "url": "https://files.pythonhosted.org/packages/43/3b/82b0e5ec07ce160af1c8fe6db34d5d54a62cc42c6646d7e9819c11d93909/cbrlib-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b06a1a0b422e755261b3a045fa900c131034aea0dbf0ae06bb0b3a9843dfb844",
          "md5": "f1be63f209a7d15fa8744d28b51f3967",
          "sha256": "4a6e123a194e0cc9644df0bb3fc990f69f8abb2a9ec89f675e1a643e276cb6e2"
        },
        "downloads": -1,
        "filename": "cbrlib-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f1be63f209a7d15fa8744d28b51f3967",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67007,
        "upload_time": "2021-02-22T17:21:49",
        "upload_time_iso_8601": "2021-02-22T17:21:49.358696Z",
        "url": "https://files.pythonhosted.org/packages/b0/6a/1a0b422e755261b3a045fa900c131034aea0dbf0ae06bb0b3a9843dfb844/cbrlib-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9676bf186aa784492af50915638ec685ed0f0be80ed47787159cc1d12d35faa8",
          "md5": "baba3636a4566e598f50f173a0af3670",
          "sha256": "4139f71d455412464c696652de5584f78d42a2dda11f6927fb9678ae9227f4bd"
        },
        "downloads": -1,
        "filename": "cbrlib-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "baba3636a4566e598f50f173a0af3670",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36243,
        "upload_time": "2021-02-22T17:25:05",
        "upload_time_iso_8601": "2021-02-22T17:25:05.555012Z",
        "url": "https://files.pythonhosted.org/packages/96/76/bf186aa784492af50915638ec685ed0f0be80ed47787159cc1d12d35faa8/cbrlib-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bd4a26bbc64d2bf585616308f676a9d7f6395d28548c38f20d7e26c1b7e8356",
          "md5": "23cd34f2a58fae3fa3e65cc165301b5d",
          "sha256": "52da5797a667500f7fe37ca56a48cec52ee7873d0f6fc25cc206323b39154b87"
        },
        "downloads": -1,
        "filename": "cbrlib-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "23cd34f2a58fae3fa3e65cc165301b5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67052,
        "upload_time": "2021-02-22T17:25:07",
        "upload_time_iso_8601": "2021-02-22T17:25:07.598195Z",
        "url": "https://files.pythonhosted.org/packages/8b/d4/a26bbc64d2bf585616308f676a9d7f6395d28548c38f20d7e26c1b7e8356/cbrlib-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9676bf186aa784492af50915638ec685ed0f0be80ed47787159cc1d12d35faa8",
        "md5": "baba3636a4566e598f50f173a0af3670",
        "sha256": "4139f71d455412464c696652de5584f78d42a2dda11f6927fb9678ae9227f4bd"
      },
      "downloads": -1,
      "filename": "cbrlib-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "baba3636a4566e598f50f173a0af3670",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 36243,
      "upload_time": "2021-02-22T17:25:05",
      "upload_time_iso_8601": "2021-02-22T17:25:05.555012Z",
      "url": "https://files.pythonhosted.org/packages/96/76/bf186aa784492af50915638ec685ed0f0be80ed47787159cc1d12d35faa8/cbrlib-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bd4a26bbc64d2bf585616308f676a9d7f6395d28548c38f20d7e26c1b7e8356",
        "md5": "23cd34f2a58fae3fa3e65cc165301b5d",
        "sha256": "52da5797a667500f7fe37ca56a48cec52ee7873d0f6fc25cc206323b39154b87"
      },
      "downloads": -1,
      "filename": "cbrlib-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "23cd34f2a58fae3fa3e65cc165301b5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 67052,
      "upload_time": "2021-02-22T17:25:07",
      "upload_time_iso_8601": "2021-02-22T17:25:07.598195Z",
      "url": "https://files.pythonhosted.org/packages/8b/d4/a26bbc64d2bf585616308f676a9d7f6395d28548c38f20d7e26c1b7e8356/cbrlib-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}