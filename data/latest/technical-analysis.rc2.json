{
  "info": {
    "author": "Trevor McGuire",
    "author_email": "trevormcguire13@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Technical Analysis for Python\n\nTechnical Analysis (TA) is the study of price movements.\n\nThis package aims to provide an extensible framework for working with various TA tools. This includes, but is not limited to: candlestick patterns, technical overlays, technical indicators, statistical analysis, and automated strategy backtesting.\n\n## Why Use This Library?\n\nThe Technical Analysis Library is still in its early days, but already has the following:\n\n1. Recognition for 30+ Candlestick Patterns\n3. 10+ technical indicators\n4. 10+ moving average types (including adaptive)\n5. Technical overlays\n6. Automated backtests and strategies\n7. Statistical tools to analyze price action\n8. A highly extensible framework to create custom indicators, backtests, and strategies\n\n\n## Installation\nPypi link: https://pypi.org/project/technical-analysis/\n\n```\npip install technical-analysis\n```\n\n## Technical Overlays Example Usage\nTechnical Overlays are indicators placed directly on a chart.\nThese include moving averages and volatility bands.\n```\n>>> import pandas as pd\n>>> from technical_analysis import candles\n>>> from technical_analysis import overlays\n>>> from technical_analysis import indicators\n>>>\n>>> spy = pd.read_csv(filepath)\n>>>\n>>> # exponentially-weighted moving average\n>>> spy[\"ema9\"] = overlays.ema(spy.close, 9)\n>>> spy[\"ema20\"] = overlays.ema(spy.close, 20)\n>>> spy[\"ema50\"] = overlays.ema(spy.close, 50)\n>>>\n>>> # triangular moving average\n>>> spy[\"tma9\"] = overlays.tma(spy.close, 9)\n>>> spy[\"tma20\"] = overlays.tma(spy.close, 20)\n>>> spy[\"tma50\"] = overlays.tma(spy.close, 50)\n>>>\n>>> # linearly-weighted moving average\n>>> spy[\"lwma9\"] = overlays.lwma(spy.close, 9)\n>>> spy[\"lwma20\"] = overlays.lwma(spy.close, 20)\n>>> spy[\"lwma50\"] = overlays.lwma(spy.close, 50)\n>>>\n>>> # kaufman adaptive moving average\n>>> spy[\"kama9\"] = overlays.kama(spy.close, 9, min_smoothing_constant=3, max_smoothing_constant=30)\n>>> spy[\"kama20\"] = overlays.kama(spy.close, 20, min_smoothing_constant=3, max_smoothing_constant=30)\n>>> spy[\"kama50\"] = overlays.kama(spy.close, 50, min_smoothing_constant=3, max_smoothing_constant=30)\n>>>\n>>> # bollinger bands\n>>> spy[\"bband_lower\"], spy[\"bband_upper\"] = overlays.bbands(spy.close, period=20)\n>>>\n>>> # donchian bands\n>>> spy[\"dband_lower\"], spy[\"dband_upper\"] = overlays.dbands(spy.close, period=20)\n>>>\n>>> # keltner bands\n>>> spy[\"kband_lower\"], spy[\"kband_upper\"] = overlays.kbands(spy.high, spy.low, spy.close, period=20)\n\n```\n\n## Technical Indicators Example Usage\n```\n>>> # average true range\n>>> spy[\"atr\"] = indicators.atr(spy.high, spy.low, spy.close, period=14)\n>>>\n>>> # relative strength index\n>>> spy[\"rsi\"] = indicators.rsi(spy.close, period=14)\n>>>\n>>> # Williams' %R\n>>> spy[\"perc_r\"] = indicators.perc_r(spy.high, spy.low, spy.close, period=14)\n>>>\n>>> # true strength index\n>>> spy[\"tsi\"] = indicators.tsi(spy.close, period1=25, period2=13)\n>>>\n>>> # TRIX\n>>> spy[\"trix\"] = indicators.trix(spy.close, period=15)\n>>>\n>>> # stochastic %k, %d (fast, slow, or full)\n>>> spy[\"stoch_k\"], spy[\"stoch_d\"] = indicators.stochastic(spy.high, spy.low, spy.close, period=14, perc_k_smoothing=3)\n>>>\n>>> # macd histogram\n>>> spy[\"macd_histogram\"] = indicators.macd(spy.close, return_histogram=True)\n```\n\n## Candlestick Pattern Recognition Example Usage\n```\n>>> spy[\"gap_down\"] = candles.is_gap_down(spy.high, spy.low, min_gap_size=0.003)\n>>> spy[\"gap_up\"] = candles.is_gap_down(spy.high, spy.low, min_gap_size=0.003)\n>>> spy[\"long_body\"] = candles.is_long_body(spy.open, spy.high, spy.low, spy.close, min_body_size=0.7)\n>>> spy[\"doji\"] = candles.is_doji(spy.open, spy.high, spy.low, spy.close, relative_threshold=0.1)\n>>> spy[\"outside\"] = candles.is_outside(spy.high, spy.low)\n>>> spy[\"inside\"] = candles.is_inside(spy.high, spy.low)\n>>> spy[\"spinning_top\"] = candles.spinning_top(spy.open, spy.high, spy.low, spy.close)\n>>> spy[\"marubozu\"] = candles.is_marubozu(spy.open, spy.high, spy.low, spy.close, max_shadow_size=0.2)\n>>> spy[\"dark_cloud\"] = candles.dark_cloud(spy.open,\n...                                        spy.high,\n...                                        spy.low,\n...                                        spy.close,\n...                                        min_body_size=0.65,\n...                                        new_high_periods=30)\n...\n>>> spy[\"bullish_engulfing\"] = candles.bullish_engulfing(spy.open, spy.high, spy.low, spy.close)\n>>> spy[\"bearish_engulfing\"] = candles.bearish_engulfing(spy.open, spy.high, spy.low, spy.close)\n\n```\n\n## Automatic Backtesting Example Usage\nThe technical-analysis library comes with an extensible framework to backtest trading strategies.\n```\n>>> import pandas as pd\n>>> from technical_analysis.backtest import Backtest\n>>> from technical_analysis.backtest.strategy import MovingAverageCrossover\n>>>\n>>> spy = pd.read_csv(filepath)\n>>> # test an exponential moving average crossover strategy\n>>> spy[\"ema9\"] = overlays.ema(spy.close, period=9)\n>>> spy[\"ema20\"] = overlays.ema(spy.close, period=20)\n>>> \n>>> backtest = Backtest(entry_criteria=[MovingAverageCrossover(\"sma9\", \"sma20\", \"bullish\")],\n...                     exit_criteria=[MovingAverageCrossover(\"sma9\", \"sma20\", \"bearish\")])\n...\n>>> backtest.run(spy)\n>>> backtest.results\n{'benchmark': 5.56607215019379,\n 'strategy': 1.39245960527215,\n 'max_drawdown': -0.10934780434711658,\n 'max_profit': 0.2002025942258056,\n 'avg_return': 0.01832183691147566,\n 'std_return': 0.05842269396587131,\n 'returns': [0.1079530513709391, ...]\n```\n\nBSD 3-Clause License\n\nCopyright (c) 2022 Trevor McGuire.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trevormcguire/technical-analysis",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "Trevor McGuire",
    "maintainer_email": "",
    "name": "technical-analysis",
    "package_url": "https://pypi.org/project/technical-analysis/",
    "platform": null,
    "project_url": "https://pypi.org/project/technical-analysis/",
    "project_urls": {
      "Homepage": "https://github.com/trevormcguire/technical-analysis"
    },
    "release_url": "https://pypi.org/project/technical-analysis/0.0.3/",
    "requires_dist": [
      "numpy",
      "mplfinance",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Technical Analysis with Python",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15504013,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b34403c12cf42f5b12ae4f33f661ddaa6110b537f4a74467c48d5707782758c",
          "md5": "13db6d1e78d58879289a2767d3d8a927",
          "sha256": "a483b71fcd6793b032a40c18ba5b3f0eeef46adf15ee1a8d7740def4338a5266"
        },
        "downloads": -1,
        "filename": "technical_analysis-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13db6d1e78d58879289a2767d3d8a927",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17520,
        "upload_time": "2022-10-19T23:01:16",
        "upload_time_iso_8601": "2022-10-19T23:01:16.551597Z",
        "url": "https://files.pythonhosted.org/packages/5b/34/403c12cf42f5b12ae4f33f661ddaa6110b537f4a74467c48d5707782758c/technical_analysis-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26d24463e8502fddcf6cd532a30fb738335bdfee4e544d77700c919df5ae4cfb",
          "md5": "fecb2281b0d5a505f13febb7e9431fa4",
          "sha256": "570c91c4ac1c5d78ce297a72fc8c68bc3655071151baa6be6e9fcb687c6405ae"
        },
        "downloads": -1,
        "filename": "technical_analysis-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fecb2281b0d5a505f13febb7e9431fa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15620,
        "upload_time": "2022-10-19T23:01:18",
        "upload_time_iso_8601": "2022-10-19T23:01:18.090955Z",
        "url": "https://files.pythonhosted.org/packages/26/d2/4463e8502fddcf6cd532a30fb738335bdfee4e544d77700c919df5ae4cfb/technical_analysis-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc104c8e4d05ec73eaf9f5ba8a37b9fc721de99574079b9c8f2b14b5eb428b24",
          "md5": "434f8f72fe86911cb44ddc3f49a6852d",
          "sha256": "8b91007dbbcad24a925fbbfe1bb1d1819fdcb0fe1f0715eb91917a0f8421b87b"
        },
        "downloads": -1,
        "filename": "technical_analysis-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "434f8f72fe86911cb44ddc3f49a6852d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25616,
        "upload_time": "2022-10-23T22:55:27",
        "upload_time_iso_8601": "2022-10-23T22:55:27.097013Z",
        "url": "https://files.pythonhosted.org/packages/dc/10/4c8e4d05ec73eaf9f5ba8a37b9fc721de99574079b9c8f2b14b5eb428b24/technical_analysis-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e792b73685de71d858200d626eebe39a8ba0140356f74c75304c3ea183b9e52a",
          "md5": "981b5050e753c900590d9fc588e6fd14",
          "sha256": "a3cc02ba0f654c69fdd30c71f347cf0110d52a79098b2217c62dfc0eb17dff13"
        },
        "downloads": -1,
        "filename": "technical_analysis-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "981b5050e753c900590d9fc588e6fd14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22154,
        "upload_time": "2022-10-23T22:55:29",
        "upload_time_iso_8601": "2022-10-23T22:55:29.439942Z",
        "url": "https://files.pythonhosted.org/packages/e7/92/b73685de71d858200d626eebe39a8ba0140356f74c75304c3ea183b9e52a/technical_analysis-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc104c8e4d05ec73eaf9f5ba8a37b9fc721de99574079b9c8f2b14b5eb428b24",
        "md5": "434f8f72fe86911cb44ddc3f49a6852d",
        "sha256": "8b91007dbbcad24a925fbbfe1bb1d1819fdcb0fe1f0715eb91917a0f8421b87b"
      },
      "downloads": -1,
      "filename": "technical_analysis-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "434f8f72fe86911cb44ddc3f49a6852d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25616,
      "upload_time": "2022-10-23T22:55:27",
      "upload_time_iso_8601": "2022-10-23T22:55:27.097013Z",
      "url": "https://files.pythonhosted.org/packages/dc/10/4c8e4d05ec73eaf9f5ba8a37b9fc721de99574079b9c8f2b14b5eb428b24/technical_analysis-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e792b73685de71d858200d626eebe39a8ba0140356f74c75304c3ea183b9e52a",
        "md5": "981b5050e753c900590d9fc588e6fd14",
        "sha256": "a3cc02ba0f654c69fdd30c71f347cf0110d52a79098b2217c62dfc0eb17dff13"
      },
      "downloads": -1,
      "filename": "technical_analysis-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "981b5050e753c900590d9fc588e6fd14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22154,
      "upload_time": "2022-10-23T22:55:29",
      "upload_time_iso_8601": "2022-10-23T22:55:29.439942Z",
      "url": "https://files.pythonhosted.org/packages/e7/92/b73685de71d858200d626eebe39a8ba0140356f74c75304c3ea183b9e52a/technical_analysis-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}