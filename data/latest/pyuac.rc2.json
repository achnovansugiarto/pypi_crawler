{
  "info": {
    "author": "Preston Landers",
    "author_email": "planders@utexas.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Win32 (MS Windows)",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyUAC - Python User Access Control for Windows\n\nThis package provides a way to invoke User Access Control (UAC) in Windows from Python.\n\nThis allows a Python process to re-spawn a new process with Administrator level rights using\nthe UAC prompt. Note that the original process is not elevated; a new process is created.\n\nThe main purpose of pyuac is to allow command line Python scripts to ensure they are run\nas Administrator on Windows. There is no ability to execute only parts of a program \nas Administrator - the entire script is re-launched with the same command line. You can\nalso override the command line used for the admin process.\n\nSee also [pyuac on the Python Package Index (PyPI)](https://pypi.org/project/pyuac)\n\n## Usage and examples\n\nThere are two basic ways to use this library. Perhaps the simplest way is to decorate your \nPython command line script's main function. The other is to directly use the `isUserAdmin`\nand `runAsAdmin` functions yourself. The decorator allows you to automatically capture\nthe output of the Admin process and return that output string to the non-admin parent process.\n\nSee also [tests/example_usage.py](tests/example_usage.py)\n\n### Decorator\n\nThe decorator is an easy way to ensure your script's main() function will respawn itself\nas Admin if necessary. Note that the decorator has no effect unless on the Windows platform.\nIt does NOT currently relaunch the script with 'sudo' on Linux or other POSIX platforms.\nOn non-Windows platforms, it's a no-op.\n\n#### Decorator usage example\n\n```python\nfrom pyuac import main_requires_admin\n\n@main_requires_admin\ndef main():\n    print(\"Do stuff here that requires being run as an admin.\")\n    # The window will disappear as soon as the program exits!\n    input(\"Press enter to close the window. >\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### Capture stdout from admin process\n\nYou can also capture the stdout and stderr of your Admin sub-process if you need to check\nit for errors from the non-admin parent. By default, unless you set scan_for_error=False on\nthe decorator, it will check the last line of both stdout and stderr for the words 'error'\nor 'exception', and if it finds those, will raise RuntimeError on the parent non-admin side.\n\n```python\nfrom pyuac import main_requires_admin\n\n@main_requires_admin(return_output=True)\ndef main():\n    print(\"Do stuff here that requires being run as an admin.\")\n    # The window will disappear as soon as the program exits!\n    input(\"Press enter to close the window. >\")\n\nif __name__ == \"__main__\":\n    rv = main()\n    if not rv:\n        print(\"I must have already been Admin!\")\n    else:\n        admin_stdout_str, admin_stderr_str, *_ = rv\n        if \"Do stuff\" in admin_stdout_str:\n            print(\"It worked.\")\n```\n\n### Direct usage\n\nThere are two main direct usage functions provided:\n\n    isUserAdmin()\nThis returns a boolean to indicate whether the current user has elevated Administrator status.\n\n    runAsAdmin()\nRe-launch the current process (or the given command line) as an Administrator. \nThis will trigger the UAC (User Access Control) prompt if necessary.\n\n#### Direct usage example\n\nThis shows a typical usage pattern:\n\n```python\nimport pyuac\n\ndef main():\n    print(\"Do stuff here that requires being run as an admin.\")\n    # The window will disappear as soon as the program exits!\n    input(\"Press enter to close the window. >\")\n\nif __name__ == \"__main__\":\n    if not pyuac.isUserAdmin():\n        print(\"Re-launching as admin!\")\n        pyuac.runAsAdmin()\n    else:        \n        main()  # Already an admin here.\n```\n\n## Requirements\n\n* This package only supports Windows at the moment. The isUserAdmin function will work under\n  Linux / Posix, but the runAsAdmin functionality is currently Windows only. Using the\n  `@main_requires_admin` decorator will be a no-op on non-Windows platforms.\n\n* This requires Python 2.7, or Python 3.3 or higher.\n\n* This requires the [PyWin32](https://pypi.org/project/pywin32/) package to be installed.\n\nhttps://pypi.org/project/pywin32/\nhttps://github.com/mhammond/pywin32\n\n* It also depends on the packages [decorator](https://pypi.org/project/decorator/) \nand [tee](https://pypi.org/project/tee/)\n\n## PyWin32 problems\n\nThe PyWin32 package is required by this library (pyuac).\n\nIf you get ImportError or ModuleNotFoundError when you run this, usually that means\nPyWin32 is either not installed at all, or else the installation is incomplete; see below.\n\nPyWin32 can be installed via pip, but sometimes there are problems completing the installation\nscripts which install the COM object support required by pyuac.\n\nTypically, this can be fixed doing the following:\n\n* Launching a command prompt as Administrator\n* Activate your Python virtual environment, if needed.\n* `pip install pywin32`\n* `python venv\\Scripts\\pywin32_postinstall.py -install`\n\nReplace `venv` above with the path to your Python installation. \n\n* Then, in a regular non-admin command prompt, activate your Python and try this:\n* `python -c \"from win32com.shell import shellcon\"`\n\nIf that throws an error, the PyWin32 installation was not successful. Try removing it from pip\nand reinstalling it under the Admin command prompt, and then run the postinstall script again.\n\nIf all else fails, and you are using a system-installed Python (not a virtualenv) then you\ncan try downloading the PyWin32 .exe installer.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n## Credits\n\nThis program was originally written by Preston Landers and is provided courtesy of \n[Journyx, Inc.](https://www.journyx.com)\n\n## License\n\nSee the [LICENSE file](LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Preston-Landers/pyuac",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyuac",
    "package_url": "https://pypi.org/project/pyuac/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyuac/",
    "project_urls": {
      "Homepage": "https://github.com/Preston-Landers/pyuac",
      "Source": "https://github.com/Preston-Landers/pyuac"
    },
    "release_url": "https://pypi.org/project/pyuac/0.0.3/",
    "requires_dist": [
      "tee",
      "decorator"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
    "summary": "Python library for Windows User Access Control (UAC)",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8610794,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5b61629a3ea4680ae283e114a53c3525f23b2375646725a86fbd47e7305b047",
          "md5": "9d1f48fd07d5c160576e9a6be819b0c9",
          "sha256": "0d9a61b53f29bd31da49de867be738233bbac9cdd96da62e7cc8c403f247bd90"
        },
        "downloads": -1,
        "filename": "pyuac-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d1f48fd07d5c160576e9a6be819b0c9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
        "size": 9374,
        "upload_time": "2020-11-08T19:47:28",
        "upload_time_iso_8601": "2020-11-08T19:47:28.288757Z",
        "url": "https://files.pythonhosted.org/packages/d5/b6/1629a3ea4680ae283e114a53c3525f23b2375646725a86fbd47e7305b047/pyuac-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6039771b6a936aa5cfd4127b734428a9e21d08bf9dc7423986b342ebf532bb5",
          "md5": "7213adfafe94b5be7e8c69b6d3f00484",
          "sha256": "3285b1696fce1eff149289ab20a2a8cbefbe2912cd008184b1944f1d28c13c39"
        },
        "downloads": -1,
        "filename": "pyuac-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7213adfafe94b5be7e8c69b6d3f00484",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
        "size": 8560,
        "upload_time": "2020-11-08T19:47:31",
        "upload_time_iso_8601": "2020-11-08T19:47:31.084154Z",
        "url": "https://files.pythonhosted.org/packages/f6/03/9771b6a936aa5cfd4127b734428a9e21d08bf9dc7423986b342ebf532bb5/pyuac-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6654cc39101176508733f644b1fdff183f60ff25c35e1e3e0eac9740233b4aa",
          "md5": "1cd22802f90f16065d91c55fa7627f37",
          "sha256": "cf0e1de597388744daa308e4f83019885caa0c646246a7e94713a77652701600"
        },
        "downloads": -1,
        "filename": "pyuac-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cd22802f90f16065d91c55fa7627f37",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
        "size": 11703,
        "upload_time": "2020-11-09T01:25:14",
        "upload_time_iso_8601": "2020-11-09T01:25:14.646960Z",
        "url": "https://files.pythonhosted.org/packages/b6/65/4cc39101176508733f644b1fdff183f60ff25c35e1e3e0eac9740233b4aa/pyuac-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1b4b4d82bea65a5c8cd0cdcf285821481e25eba21578e29c667d90d28007808",
          "md5": "1175c5c4769263c7164d69c53ed6ec71",
          "sha256": "fd11caf47246e0a5149284ced014c346439ae3a28c6bad0b622b239fe30d2d5b"
        },
        "downloads": -1,
        "filename": "pyuac-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1175c5c4769263c7164d69c53ed6ec71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
        "size": 8747,
        "upload_time": "2020-11-09T01:25:16",
        "upload_time_iso_8601": "2020-11-09T01:25:16.643219Z",
        "url": "https://files.pythonhosted.org/packages/d1/b4/b4d82bea65a5c8cd0cdcf285821481e25eba21578e29c667d90d28007808/pyuac-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6654cc39101176508733f644b1fdff183f60ff25c35e1e3e0eac9740233b4aa",
        "md5": "1cd22802f90f16065d91c55fa7627f37",
        "sha256": "cf0e1de597388744daa308e4f83019885caa0c646246a7e94713a77652701600"
      },
      "downloads": -1,
      "filename": "pyuac-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1cd22802f90f16065d91c55fa7627f37",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
      "size": 11703,
      "upload_time": "2020-11-09T01:25:14",
      "upload_time_iso_8601": "2020-11-09T01:25:14.646960Z",
      "url": "https://files.pythonhosted.org/packages/b6/65/4cc39101176508733f644b1fdff183f60ff25c35e1e3e0eac9740233b4aa/pyuac-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1b4b4d82bea65a5c8cd0cdcf285821481e25eba21578e29c667d90d28007808",
        "md5": "1175c5c4769263c7164d69c53ed6ec71",
        "sha256": "fd11caf47246e0a5149284ced014c346439ae3a28c6bad0b622b239fe30d2d5b"
      },
      "downloads": -1,
      "filename": "pyuac-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1175c5c4769263c7164d69c53ed6ec71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
      "size": 8747,
      "upload_time": "2020-11-09T01:25:16",
      "upload_time_iso_8601": "2020-11-09T01:25:16.643219Z",
      "url": "https://files.pythonhosted.org/packages/d1/b4/b4d82bea65a5c8cd0cdcf285821481e25eba21578e29c667d90d28007808/pyuac-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}