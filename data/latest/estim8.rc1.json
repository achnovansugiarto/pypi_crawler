{
  "info": {
    "author": "Daniel Strohmeier",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Project Description: Estim8\n*Estim8* is a tool for parameter estimation of differential-algebraic models (DAEs) using either model formulations in Dymola (installation required) or FMU models. It uses global meta-heuristic optimization to solve parameter estimation problems, and provides methods for uncertainty quantification.\n\n## Installation\nThe installation via `pip install estim8Beta` is problematic, since the required PyGMO package is not available here. If you still installed this package via PyPI make sure to add PyGMO to your environment, using:\n\n`$ conda config --add channels conda-forge`\n`$ conda config --set channel_priority strict`\n`$ conda install pygmo`\n\nAlternatively, estim8 can be installed via conda-forge directly:\n\n`conda install -c conda-forge estim8`\n\n\n## Usage\nThe workflow of `estim8` can be divided into 5 steps:\n1. Initializing the model\n2. Defining Estimation Prerequisites\n3. Starting Estimation\n4. Conducting Uncertainty Qunatification\n5. Visualize Results\n\n### 1. Initializing the Model\nTo initialize a model, use the class `DymolaModel()`, or `FmuModel()` depending on your model formulation, and initialize it:\n```python\nMyModel = FmuModel('MyModel')\nMyModel.initialize()\n```\nAfter the initialization all information on parameters and variables of the model are retrieved, and it can be simulated by the `simulate()` method:\n```python\nResults, Parameters = MyModel.simulate(0,20,0.1, #(t0, t_end, stepsize)\n\t\t\t\t\t\t\t\t\tparameter={\"par1\":10},\n\t\t\t\t\t\t\t\t\tobserve=[\"Trajectory1\",\"Trajectory2\"],\n\t\t\t\t\t\t\t\t\ttolerance=1e-4,\n\t\t\t\t\t\t\t\t\t)\n```\nWhere the 3 positional arguments in the beginning form the timevector to simulate (similar to numpy.linspace()).\n\n### 2. Defining Estimation Prerequisites\nTo conduct a parameter estimation, it is necessary to provide at least:\n* A model as FmuModel or DymolaModel\n* Experimental data to fit the parameters to (as pandas.DataFrame with time as index and columns as variable names. For Replicates: {'Rid1':pd.DataFrame, ..., 'RidN':pd.DataFrame} )\n* Boundaries for the parameters to estimate\n* A dictionary, mapping the names of the experimental data columns to the variables of the model (`observation_mapping`)\n\nOptional the following settings can be made:\n* Metric for the discrepancy ('SS': Sum of squares, 'WSS' Weighted sum of squares, 'negLL': negative Log-Likelihood)\n* ParameterMapping and Replicate IDs if multiple replicates or experiments are included\n* Custom time vector in case a finer discretization as 0.1 is required\n\n*Example Code:*\n```python\n# Data import\nimport pandas\nMyData = pandas.read_excel('MyExpermentalData.xlsx', \n\t\t\t\t\t\t\tindex_col=0,\n\t\t\t\t\t\t\theader=[0,1], \n\t\t\t\t\t\t\tsheet_name=None\n\t\t\t\t\t\t\t)\n\n# Bound definition\nbounds = {\n\t\t\"par1\" : [8,12],\n\t\t\"par2\" : [0.1,0.4],\n\t\t}\n\n# Observation mapping\nobs_map = {\t\n\t\t\"ExpDat1\" : \"Obs1\",\n\t\t}\n```\n\nAfter specifying the prerequisites, the `Estimator()` can be instantiated:\n```python\nMyEstimator = Estimator(MyModel, \n\t\t\t\t\t\tdata                = MyData,\n\t\t\t\t\t\tbounds              = bounds,\n\t\t\t\t\t\tobservation_mapping = obs_map,\n\t\t\t\t\t\t)\n```\n\n### 3. Starting Estimation\nFor the estimation process there are 2 possibilities, which are `estimate()` and `estimate_parallel()`. Both return an optimal parameter vector according to the specified `bounds`, and an `info` struct:\n\n```python\n# Single Core\noptimum, info = MyEstimator.estimate(\n\t\t\t\t\tmethod   = 'local', \t# optimization method\n\t\t\t\t\tp0       = {'par1':10, 'par2':0.25},  # initial pnt\n\t\t\t\t\tmax_iter = 20,          # maximum iterations \n\t\t\t\t\t)\n\n# Parallel \noptimum, info = MyEstimator.estimate_parallel(\n\t\t\t\t\tmethod   = 'de', \t\t# optimization method\n\t\t\t\t\tn_workers= 4,       \t# number of parallel proc.\n\t\t\t\t\tmax_iter = 20,\n\t\t\t\t\t) \n\n# Parallel (PyGMOs generalized island approach)\noptimum, info = MyEstimator.estimate_parallel(\n\t\t\t\t\tmethod   = ['pg_de1220','pg_sga']*2,   # Islands \t\n\t\t\t\t\tn_workers= 4,       \t# overwritten by no. islands\n\t\t\t\t\tmax_iter = 20,\n\t\t\t\t\t) \n```\n\n### 4. Uncertainty Qunatification\nFor UQ estim8 provides `profile_likelihood()`method, and classical Monte Carlo sampling method `mc_sampling()`. \n\n```python\n# MC sampling\nMC_Samples = MyEstimator.mc_sampling(\n\t\t\t\tmethod         = ['pg_sea']*4,  # Optimization method\n\t\t\t\tn_samples      = 200, \t\t\t# No. samples\n\t\t\t\tevos2reset     = 50,  \t\t\t# No. Iter until RAM reset\n\t\t\t\t# Terminate after:\n\t\t\t\tno_progress    = 10,   \t\t\t#10 iters w.o. progress\n\t\t\t\ttot_iter       = 200,    \t\t#More than 200 iters\n\t\t\t\tfinal_loss     = 500,    \t\t#If loss of 500 is reached\n\t\t\t\t}\n```\n\n### 5. Visualize Results\n\nFor visualization of the results, the following automated plotting functions are available in the `Visualization` module:\n\n|Function                 |Arguments                |Description                               |\n|:---------------------|:------------------------|:--------------|\n|`Visualization.plot_sim()`|Results, observe=[] | Plots simulation trajectories generated by a `Estim8Model`|\n|`Visualization.plot_estimates()`|optimum, MyEstimator, data=None, only_measured=False|Plots simulation trajectories of optimum in comparison to experimental data|\n|`Visualization.plot_correlations()`|MC_Samples, thresholds=5, show_vals=False|Plotting the correlations for parameter results of a Monte Carlo Sampling as a heatmap|\n|`Visualization.plot_distribution()`|MC_Samples, bins=5, est=MyEstimator|Creates a corner plot showing historgrams for parameter values on the diagonal, and scatter plots between parameter pairs on the LTM|\n|`Visualization.plot_many()`|MC_Samples, MyEstimator, observe=[]|Plots all trajectories resulting from the MC samples together with the experimental data|\n|`Visualization.plot_bound_violation()`|Optimum, bounds|Shows relative location of optimum within the bounds| \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "estim8",
    "package_url": "https://pypi.org/project/estim8/",
    "platform": null,
    "project_url": "https://pypi.org/project/estim8/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/estim8/0.0.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "pandas",
      "openpyxl",
      "joblib",
      "pathlib",
      "matplotlib",
      "seaborn",
      "fmpy",
      "sdf",
      "scikit-optimize",
      "notebook",
      "pygmo ; platform_system == \"Linux\""
    ],
    "requires_python": ">=3.7",
    "summary": "Conduct parameter estimations for Dymola and FMU models",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15805144,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49a4e6078553a873af5397760124f6cea570b6dafc1bcf3d0ef0c6280be6dbf6",
          "md5": "7a6da8b69cf082f418541be8140d52b6",
          "sha256": "265bc4a1cc7599e4fa8fe9cf585143b2ad635bf4ae470f3316b0c914715489a7"
        },
        "downloads": -1,
        "filename": "estim8-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a6da8b69cf082f418541be8140d52b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 58088,
        "upload_time": "2022-11-17T18:26:57",
        "upload_time_iso_8601": "2022-11-17T18:26:57.225096Z",
        "url": "https://files.pythonhosted.org/packages/49/a4/e6078553a873af5397760124f6cea570b6dafc1bcf3d0ef0c6280be6dbf6/estim8-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab4059736c5ab25f385b132c4db155717c36bdb3d21509139a706f9b4d9a082c",
          "md5": "7b95b51de81c340dc236687ef458b1c6",
          "sha256": "6caa5f9dcfd81afd9ea5c6af93a5aaea28ae1497915e0c7d42b9551fcd12087f"
        },
        "downloads": -1,
        "filename": "estim8-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b95b51de81c340dc236687ef458b1c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1567427,
        "upload_time": "2022-11-17T18:27:00",
        "upload_time_iso_8601": "2022-11-17T18:27:00.960631Z",
        "url": "https://files.pythonhosted.org/packages/ab/40/59736c5ab25f385b132c4db155717c36bdb3d21509139a706f9b4d9a082c/estim8-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49a4e6078553a873af5397760124f6cea570b6dafc1bcf3d0ef0c6280be6dbf6",
        "md5": "7a6da8b69cf082f418541be8140d52b6",
        "sha256": "265bc4a1cc7599e4fa8fe9cf585143b2ad635bf4ae470f3316b0c914715489a7"
      },
      "downloads": -1,
      "filename": "estim8-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7a6da8b69cf082f418541be8140d52b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 58088,
      "upload_time": "2022-11-17T18:26:57",
      "upload_time_iso_8601": "2022-11-17T18:26:57.225096Z",
      "url": "https://files.pythonhosted.org/packages/49/a4/e6078553a873af5397760124f6cea570b6dafc1bcf3d0ef0c6280be6dbf6/estim8-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab4059736c5ab25f385b132c4db155717c36bdb3d21509139a706f9b4d9a082c",
        "md5": "7b95b51de81c340dc236687ef458b1c6",
        "sha256": "6caa5f9dcfd81afd9ea5c6af93a5aaea28ae1497915e0c7d42b9551fcd12087f"
      },
      "downloads": -1,
      "filename": "estim8-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b95b51de81c340dc236687ef458b1c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1567427,
      "upload_time": "2022-11-17T18:27:00",
      "upload_time_iso_8601": "2022-11-17T18:27:00.960631Z",
      "url": "https://files.pythonhosted.org/packages/ab/40/59736c5ab25f385b132c4db155717c36bdb3d21509139a706f9b4d9a082c/estim8-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}