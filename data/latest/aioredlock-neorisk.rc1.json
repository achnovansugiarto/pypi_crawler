{
  "info": {
    "author": "Joan Vilà Cuñat",
    "author_email": "vila.joan94@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "aioredlock\n==========\n\n.. image:: https://github.com/joanvila/aioredlock/workflows/Tests/badge.svg\n  :target: https://travis-ci.org/joanvila/aioredlock\n\n.. image:: https://codecov.io/gh/joanvila/aioredlock/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/joanvila/aioredlock\n\n.. image:: https://badge.fury.io/py/aioredlock.svg\n  :target: https://pypi.python.org/pypi/aioredlock\n\nThe asyncio redlock_ algorithm implementation.\n\nRedlock and asyncio\n-------------------\n\nThe redlock algorithm is a distributed lock implementation for Redis_. There are many implementations of it in several languages. In this case, this is the asyncio_ compatible implementation for python 3.5+.\n\n\nUsage\n-----\n.. code-block:: python\n\n  from aioredlock import Aioredlock, LockError\n\n  # Define a list of connections to your Redis instances:\n  redis_instances = [\n    ('localhost', 6379),\n    {'host': 'localhost', 'port': 6379, 'db': 1},\n    'redis://localhost:6379/2',\n  ]\n\n  # Create a lock manager:\n  lock_manager = Aioredlock(redis_instances)\n\n  # Check wether a resourece acquired by any other redlock instance:\n  assert not await lock_manager.is_locked(\"resource_name\")\n\n  # Try to acquire the lock:\n  try:\n      lock = await lock_manager.lock(\"resource_name\", lock_timeout=10)\n  except LockError:\n      print('Lock not acquired')\n      raise\n\n  # Now the lock is acquired:\n  assert lock.valid\n  assert await lock_manager.is_locked(\"resource_name\")\n\n  # Extend lifetime of the lock:\n  await lock_manager.extend(lock, lock_timeout=10)\n  # Raises LockError if the lock manager can not extend the lock lifetime\n  # on more then half of the Redis instances.\n\n  # Release the lock:\n  await lock_manager.unlock(lock)\n  # Raises LockError if the lock manager can not release the lock\n  # on more then half of redis instances.\n\n  # The released lock become invalid:\n  assert not lock.valid\n  assert not await lock_manager.is_locked(\"resource_name\")\n\n  # Or you can use the lock as async context manager:\n  try:\n      async with await lock_manager.lock(\"resource_name\") as lock:\n          assert lock.valid is True\n          # Do your stuff having the lock\n          await lock.extend()  # alias for lock_manager.extend(lock)\n          # Do more stuff having the lock\n      assert lock.valid is False # lock will be released by context manager\n  except LockError:\n      print('Lock not acquired')\n      raise\n\n  # Clear the connections with Redis:\n  await lock_manager.destroy()\n\n\nHow it works\n------------\n\nThe Aioredlock constructor accepts the following optional parameters:\n\n- ``redis_connections``: A list of connections (dictionary of host and port and kwargs for ``aioredis.create_redis_pool()``, or tuple ``(host, port)``, or string Redis URI) where the Redis instances are running.  The default value is ``[{'host': 'localhost', 'port': 6379}]``.\n- ``retry_count``: An integer representing number of maximum allowed retries to acquire the lock. The default value is ``3`` times.\n- ``retry_delay_min`` and ``retry_delay_max``: Float values representing waiting time (in seconds) before the next retry attempt. The default values are ``0.1`` and ``0.3``, respectively.\n\nIn order to acquire the lock, the ``lock`` function should be called. If the lock operation is successful, ``lock.valid`` will be true, if the lock is not acquired then the ``LockError`` will be raised.\n\nFrom that moment, the lock is valid until the ``unlock`` function is called or when the ``lock_timeout`` is reached.\n\nCall the ``extend`` function to reset lifetime of the lock to ``lock_timeout`` interval.\n\nUse the ``is_locked`` function to check if the resource is locked by other redlock instance.\n\nIn order to clear all the connections with Redis, the lock_manager ``destroy`` method can be called.\n\nTo-do\n-----\n\n\n.. _redlock: https://redis.io/topics/distlock\n.. _Redis: https://redis.io\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/neorisk/aioredlock",
    "keywords": "redis redlock distributed locks asyncio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioredlock-neorisk",
    "package_url": "https://pypi.org/project/aioredlock-neorisk/",
    "platform": "",
    "project_url": "https://pypi.org/project/aioredlock-neorisk/",
    "project_urls": {
      "Homepage": "https://github.com/neorisk/aioredlock"
    },
    "release_url": "https://pypi.org/project/aioredlock-neorisk/0.4.0/",
    "requires_dist": [
      "aioredis",
      "attrs (>=17.4.0)"
    ],
    "requires_python": "",
    "summary": "Asyncio implemetation of Redis distributed locks (Neorisk)",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6898205,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2a913cbf0ebb99b2c20ee86419392dcbea15a9b570f4acd6dbaa1583ef08543",
          "md5": "10427ed0b29192e239f28f4bb0d37ee4",
          "sha256": "43359ec4a83e913343f9f0d2bf1d5ebdb322edb01f9f132da6532a6fa2db00c5"
        },
        "downloads": -1,
        "filename": "aioredlock_neorisk-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10427ed0b29192e239f28f4bb0d37ee4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9265,
        "upload_time": "2020-03-27T19:13:05",
        "upload_time_iso_8601": "2020-03-27T19:13:05.328324Z",
        "url": "https://files.pythonhosted.org/packages/e2/a9/13cbf0ebb99b2c20ee86419392dcbea15a9b570f4acd6dbaa1583ef08543/aioredlock_neorisk-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "450c02e34ac26290c70c27f4d6fb82747b54327ffb202a613a9c667fe5fa22fa",
          "md5": "69d43fb7ad6f729cc3b7e8183a14c42d",
          "sha256": "80b6933ed8cd64aaf68a8fab8e33e0d364f8dee3f2a8329b14c82468ecadd8d0"
        },
        "downloads": -1,
        "filename": "aioredlock-neorisk-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69d43fb7ad6f729cc3b7e8183a14c42d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7822,
        "upload_time": "2020-03-27T19:13:08",
        "upload_time_iso_8601": "2020-03-27T19:13:08.394780Z",
        "url": "https://files.pythonhosted.org/packages/45/0c/02e34ac26290c70c27f4d6fb82747b54327ffb202a613a9c667fe5fa22fa/aioredlock-neorisk-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2a913cbf0ebb99b2c20ee86419392dcbea15a9b570f4acd6dbaa1583ef08543",
        "md5": "10427ed0b29192e239f28f4bb0d37ee4",
        "sha256": "43359ec4a83e913343f9f0d2bf1d5ebdb322edb01f9f132da6532a6fa2db00c5"
      },
      "downloads": -1,
      "filename": "aioredlock_neorisk-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10427ed0b29192e239f28f4bb0d37ee4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9265,
      "upload_time": "2020-03-27T19:13:05",
      "upload_time_iso_8601": "2020-03-27T19:13:05.328324Z",
      "url": "https://files.pythonhosted.org/packages/e2/a9/13cbf0ebb99b2c20ee86419392dcbea15a9b570f4acd6dbaa1583ef08543/aioredlock_neorisk-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "450c02e34ac26290c70c27f4d6fb82747b54327ffb202a613a9c667fe5fa22fa",
        "md5": "69d43fb7ad6f729cc3b7e8183a14c42d",
        "sha256": "80b6933ed8cd64aaf68a8fab8e33e0d364f8dee3f2a8329b14c82468ecadd8d0"
      },
      "downloads": -1,
      "filename": "aioredlock-neorisk-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "69d43fb7ad6f729cc3b7e8183a14c42d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7822,
      "upload_time": "2020-03-27T19:13:08",
      "upload_time_iso_8601": "2020-03-27T19:13:08.394780Z",
      "url": "https://files.pythonhosted.org/packages/45/0c/02e34ac26290c70c27f4d6fb82747b54327ffb202a613a9c667fe5fa22fa/aioredlock-neorisk-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}