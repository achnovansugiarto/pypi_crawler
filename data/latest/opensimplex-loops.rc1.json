{
  "info": {
    "author": "Dennis van Gils",
    "author_email": "vangils.dennis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/opensimplex-loops\n    :target: https://pypi.org/project/opensimplex-loops\n.. image:: https://img.shields.io/pypi/pyversions/opensimplex-loops\n    :target: https://pypi.org/project/opensimplex-loops\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. image:: https://img.shields.io/badge/License-MIT-purple.svg\n    :target: https://github.com/Dennis-van-Gils/opensimplex-loops/blob/master/LICENSE.txt\n\nOpenSimplex Loops\n=================\n\nExtension to the `OpenSimplex Python library by lmas <https://github.com/lmas/opensimplex>`_.\nThis library provides higher-level functions that can generate seamlessly-looping\nanimated images and closed curves, and seamlessy-tileable images. It relies on 4D\nOpenSimplex noise.\n\n- Github: https://github.com/Dennis-van-Gils/opensimplex-loops\n- PyPI: https://pypi.org/project/opensimplex-loops\n\nInspiration taken from\n`Coding Challenge #137: 4D OpenSimplex Noise Loop <https://youtu.be/3_0Ax95jIrk>`_\nby `The Coding Train <https://www.youtube.com/c/TheCodingTrain>`_.\n\n\nDemos\n=====\n\n``looping_animated_2D_image()``\n-------------------------------\n\n    .. image:: https://raw.githubusercontent.com/Dennis-van-Gils/opensimplex-loops/master/images/demo_looping_animated_2D_image.gif\n        :alt: looping_animated_2D_image\n\n    Seamlessly-looping animated 2D images.\n\n    Code: `<demos/demo_looping_animated_2D_image.py>`_\n\n``looping_animated_closed_1D_curve()``\n--------------------------------------\n\n    .. image:: https://raw.githubusercontent.com/Dennis-van-Gils/opensimplex-loops/master/images/demo_looping_animated_closed_1D_curve.gif\n        :alt: looping_animated_closed_1D_curve\n\n    Seamlessly-looping animated 1D curves, each curve in turn also closing up\n    seamlessly back-to-front.\n\n    Code: `<demos/demo_looping_animated_closed_1D_curve.py>`_\n\n``tileable_2D_image()``\n-----------------------\n\n    .. image:: https://raw.githubusercontent.com/Dennis-van-Gils/opensimplex-loops/master/images/demo_tileable_2D_image.png\n        :alt: tileable_2D_image\n\n    Seamlessly-tileable 2D image.\n\n    Code: `<demos/demo_tileable_2D_image.py>`_\n\n\nInstallation\n============\n\n::\n\n    pip install opensimplex-loops\n\nThis will install the following dependencies:\n\n- ``opensimplex``\n- ``numpy``\n- ``numba``\n- ``numba-progress``\n\nNotes:\n\n- The `OpenSimplex` library by lmas does not enforce the use of the\n  `numba <https://numba.pydata.org/>`_ package, but is left optional instead.\n  Here, I have set it as a requirement due to the heavy computation required\n  by these highler-level functions. I have them optimized for `numba` which\n  enables multi-core parallel processing within Python, resulting in major\n  speed improvements compared to as running without. I have gotten computational\n  speedups by a factor of ~200.\n\n- Note that the very first call of each of these OpenSimplex functions will take\n  a longer time than later calls. This is because `numba` needs to compile this\n  Python code to bytecode specific to your platform, once.\n\n- The ``numba-progress`` package is actually optional. When present, a progress\n  bar will be shown during the noise generation.\n\n\nAPI\n===\n\n``looping_animated_2D_image(...)``\n----------------------------------\n\n    Generates a stack of seamlessly-looping animated 2D raster images drawn\n    from 4D OpenSimplex noise.\n\n    The first two OpenSimplex dimensions are used to describe a plane that gets\n    projected onto a 2D raster image. The last two dimensions are used to\n    describe a circle in time.\n\n    Args:\n        N_frames (`int`, default = 200)\n            Number of time frames\n\n        N_pixels_x (`int`, default = 1000)\n            Number of pixels on the x-axis\n\n        N_pixels_y (`int` | `None`, default = `None`)\n            Number of pixels on the y-axis. When set to None `N_pixels_y` will\n            be set equal to `N_pixels_x`.\n\n        t_step (`float`, default = 0.1)\n            Time step\n\n        x_step (`float`, default = 0.01)\n            Spatial step in the x-direction\n\n        y_step (`float` | `None`, default = `None`)\n            Spatial step in the y-direction. When set to None `y_step` will be\n            set equal to `x_step`.\n\n        dtype (`type`, default = `numpy.double`)\n            Return type of the noise array elements. To reduce the memory\n            footprint one can change from the default `numpy.double` to e.g.\n            `numpy.float32`.\n\n        seed (`int`, default = 3)\n            Seed value for the OpenSimplex noise\n\n        verbose (`bool`, default = `True`)\n            Print 'Generating noise...' to the terminal? If the `numba_progress`\n            package is present a progress bar will also be shown.\n\n    Returns:\n        The 2D image stack as 3D array [time, y-pixel, x-pixel] containing the\n        OpenSimplex noise values as floating points. The output is garantueed to\n        be in the range [-1, 1], but the exact extrema cannot be known a-priori\n        and are probably quite smaller than [-1, 1].\n\n``looping_animated_closed_1D_curve(...)``\n-----------------------------------------\n\n    Generates a stack of seamlessly-looping animated 1D curves, each curve in\n    turn also closing up seamlessly back-to-front, drawn from 4D OpenSimplex\n    noise.\n\n    The first two OpenSimplex dimensions are used to describe a circle that gets\n    projected onto a 1D curve. The last two dimensions are used to describe a\n    circle in time.\n\n    Args:\n        N_frames (`int`, default = 200)\n            Number of time frames\n\n        N_pixels_x (`int`, default = 1000)\n            Number of pixels of the curve\n\n        t_step (`float`, default = 0.1)\n            Time step\n\n        x_step (`float`, default = 0.01)\n            Spatial step in the x-direction\n\n        dtype (`type`, default = `numpy.double`)\n            Return type of the noise array elements. To reduce the memory\n            footprint one can change from the default `numpy.double` to e.g.\n            `numpy.float32`.\n\n        seed (`int`, default = 3)\n            Seed value for the OpenSimplex noise\n\n        verbose (`bool`, default = `True`)\n            Print 'Generating noise...' to the terminal? If the `numba_progress`\n            package is present a progress bar will also be shown.\n\n    Returns:\n        The 1D curve stack as 2D array [time, x-pixel] containing the\n        OpenSimplex noise values as floating points. The output is garantueed to\n        be in the range [-1, 1], but the exact extrema cannot be known a-priori\n        and are probably quite smaller than [-1, 1].\n\n``tileable_2D_image(...)``\n--------------------------\n\n    Generates a seamlessly-tileable 2D raster image drawn from 4D OpenSimplex\n    noise.\n\n    The first two OpenSimplex dimensions are used to describe a circle that gets\n    projected onto the x-axis of the 2D raster image. The last two dimensions\n    are used to describe another circle that gets projected onto the y-axis of\n    the 2D raster image.\n\n    Args:\n        N_pixels_x (`int`, default = 1000)\n            Number of pixels on the x-axis\n\n        N_pixels_y (`int` | `None`, default = `None`)\n            Number of pixels on the y-axis. When set to None `N_pixels_y` will\n            be set equal to `N_pixels_x`.\n\n        x_step (`float`, default = 0.01)\n            Spatial step in the x-direction\n\n        y_step (`float` | `None`, default = `None`)\n            Spatial step in the y-direction. When set to None `y_step` will be\n            set equal to `x_step`.\n\n        dtype (`type`, default = `numpy.double`)\n            Return type of the noise array elements. To reduce the memory\n            footprint one can change from the default `numpy.double` to e.g.\n            `numpy.float32`.\n\n        seed (`int`, default = 3)\n            Seed value for the OpenSimplex noise\n\n        verbose (`bool`, default = `True`)\n            Print 'Generating noise...' to the terminal? If the `numba_progress`\n            package is present a progress bar will also be shown.\n\n    Returns:\n        The 2D image as 2D array [y-pixel, x-pixel] containing the\n        OpenSimplex noise values as floating points. The output is garantueed to\n        be in the range [-1, 1], but the exact extrema cannot be known a-priori\n        and are probably quite smaller than [-1, 1].\n\nChangelog\n=========\n\n0.1.3 (2023-01-27)\n------------------\n* Fixed wrong docstr description on the return value of `tileable_2D_image()`\n* Generalized the internal functions\n\n0.1.2 (2023-01-26)\n------------------\n* Using raw.githubusercontent.com for the images in README to show up in PyPi\n\n0.1.0 (2023-01-26)\n------------------\n* First release on PyPI\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dennis-van-Gils/opensimplex-loops",
    "keywords": "opensimplex,noise,4D,polar,loop,looping,seamless,tileable,textures,images,curves",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opensimplex-loops",
    "package_url": "https://pypi.org/project/opensimplex-loops/",
    "platform": null,
    "project_url": "https://pypi.org/project/opensimplex-loops/",
    "project_urls": {
      "Homepage": "https://github.com/Dennis-van-Gils/opensimplex-loops",
      "Issue Tracker": "https://github.com/Dennis-van-Gils/opensimplex-loops/issues"
    },
    "release_url": "https://pypi.org/project/opensimplex-loops/0.1.3/",
    "requires_dist": [
      "opensimplex (~=0.4)",
      "numpy",
      "numba",
      "numba-progress",
      "matplotlib ; extra == 'demos'",
      "pillow ; extra == 'demos'"
    ],
    "requires_python": ">=3.8",
    "summary": "Extension to the OpenSimplex Python library. This library can generate seamlessly-looping animated images and closed curves, and seamlessy-tileable images.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16589541,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d76fd8534e63aac8772e056561da21cc0e0cb7afb7f70abcd7657363d8c65f0d",
          "md5": "a2261509c95a59591756f147c10befa1",
          "sha256": "89fa72236b930fd2cd21bc3285a16f892b9b8bea01942bd3031f520fad970c73"
        },
        "downloads": -1,
        "filename": "opensimplex_loops-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2261509c95a59591756f147c10befa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7891,
        "upload_time": "2023-01-27T12:30:28",
        "upload_time_iso_8601": "2023-01-27T12:30:28.781009Z",
        "url": "https://files.pythonhosted.org/packages/d7/6f/d8534e63aac8772e056561da21cc0e0cb7afb7f70abcd7657363d8c65f0d/opensimplex_loops-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8c3b5fa618320e3ac901f1c3b273701acb827771242e06c94ec8fef1c7b5c02",
          "md5": "b5b0a5a57cb86d4ddfc3b849bd3dbf7c",
          "sha256": "52c96d568bbe07c8b731fdd0f879075106060972364567100bc37336d9beb500"
        },
        "downloads": -1,
        "filename": "opensimplex-loops-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b5b0a5a57cb86d4ddfc3b849bd3dbf7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2894331,
        "upload_time": "2023-01-27T12:30:33",
        "upload_time_iso_8601": "2023-01-27T12:30:33.269958Z",
        "url": "https://files.pythonhosted.org/packages/f8/c3/b5fa618320e3ac901f1c3b273701acb827771242e06c94ec8fef1c7b5c02/opensimplex-loops-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d76fd8534e63aac8772e056561da21cc0e0cb7afb7f70abcd7657363d8c65f0d",
        "md5": "a2261509c95a59591756f147c10befa1",
        "sha256": "89fa72236b930fd2cd21bc3285a16f892b9b8bea01942bd3031f520fad970c73"
      },
      "downloads": -1,
      "filename": "opensimplex_loops-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2261509c95a59591756f147c10befa1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7891,
      "upload_time": "2023-01-27T12:30:28",
      "upload_time_iso_8601": "2023-01-27T12:30:28.781009Z",
      "url": "https://files.pythonhosted.org/packages/d7/6f/d8534e63aac8772e056561da21cc0e0cb7afb7f70abcd7657363d8c65f0d/opensimplex_loops-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8c3b5fa618320e3ac901f1c3b273701acb827771242e06c94ec8fef1c7b5c02",
        "md5": "b5b0a5a57cb86d4ddfc3b849bd3dbf7c",
        "sha256": "52c96d568bbe07c8b731fdd0f879075106060972364567100bc37336d9beb500"
      },
      "downloads": -1,
      "filename": "opensimplex-loops-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b5b0a5a57cb86d4ddfc3b849bd3dbf7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 2894331,
      "upload_time": "2023-01-27T12:30:33",
      "upload_time_iso_8601": "2023-01-27T12:30:33.269958Z",
      "url": "https://files.pythonhosted.org/packages/f8/c3/b5fa618320e3ac901f1c3b273701acb827771242e06c94ec8fef1c7b5c02/opensimplex-loops-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}