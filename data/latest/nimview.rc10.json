{
  "info": {
    "author": "Marco Mengelkoch",
    "author_email": "MMengelkoch@gmx.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "# Nimview \n![License](https://img.shields.io/github/license/marcomq/nimview) \n[![Build Status](https://github.com/marcomq/nimview/actions/workflows/linux.yml/badge.svg?branch=main)](https://github.com/marcomq/nimview/actions/workflows/linux.yml)\n[![Build Status](https://github.com/marcomq/nimview/actions/workflows/windows.yml/badge.svg?branch=main)](https://github.com/marcomq/nimview/actions/workflows/windows.yml)\n[![Build Status](https://github.com/marcomq/nimview/actions/workflows/macos.yml/badge.svg?branch=main)](https://github.com/marcomq/nimview/actions/workflows/macos.yml)\n\n\nA lightweight cross platform UI library for Nim, C, C++ or Python. The main purpose is to simplify creation of online / offline applications based on a HTML/CSS/JS layer to be displayed with Webview or a browser. The application can even run on cloud and on desktop environments with the same binary application.\n\n## Features\n- Compile to small single executable binary that also includes the UI\n- No network port will be opened by Nimview in Desktop mode\n- Platforms: Windows, Linux, MacOS, Android, Cloud / Web\n- Use Nim, Python, C or C++ for your back-end\n- Use any HTML/CSS/JS based UI you want - Svelte, Vue, React, plain JS etc..\n- Desktop and Web mode\n- Simple automated back-end testing as backend functions just return strings\n- Integrated simple persistent storage\n- Immediately expose back-end functions to front-end with a simple command\n\n## Table of Contents\n- [About](#about)\n- [Demo binary](#demo-binary)\n- [Minimal Python Example](#minimal-python-example)\n- [Minimal Nim example](#minimal-nim-example)\n- [Javascript and HTML UI](#javascript-and-html-ui)\n- [Exchange data with UI](#exchange-data-with-ui)\n- [Development workflow](#development-workflow)\n- [Why Nim](#why-nim)\n- [Which JS framework for UI](#which-js-framework-for-ui)\n- [Nimview vs Electron or CEF](#nimview-vs-electron-or-cef)\n- [Nimview vs Eel or Neel](#nimview-vs-eel-or-neel)\n- [Difference to Flask](#difference-to-flask)\n- [Wails](#wails)\n- [CSRF and Security](#csrf-and-security)\n- [Multithreading](#multithreading)\n- [IE 11 or - \"Why is my page blank?](#multithreading)\n- [Limitations](#limitations)\n- [Using UI from existing web-applications](#using-ui-from-existing-web-applications)\n- [Software Requirements](#software-requirements)\n- [Documentation](#documnentation)\n\n\n## About\n\nThe target of this project was to have a simple, ultra lightweight cross platform, cross programming language UI layer for desktop, cloud and moblile applications. Nimview applications have just a few MB in static executable size and are targeted to be easy to write, easy to read, stable and easy to test. The RAM consumption of basic Nimview applications is usually less than 20 MB.\n\nThis project uses [Webview](https://github.com/oskca/webview) to render Desktop \napplications and an integrated HttpServer for Development and Cloud.\n\nNimview is an interface to interact with Nim/C/C++/Python code from UI Javascript in the same way for Webview desktop applications, web and mobile applications. It registers functions in the specific languages and also can mix Nim with any of the supported targets. Currently, the Android project to interact with android applications is [here](https://github.com/marcomq/nimview_android) but it will be move to \"examples\" soon.\n\nTechnically, the UI layer will be completely HTML/CSS/JS based and the back-end should be using either Nim, C/C++ or Python code directly. \nNim mostly acts as a \"glue\" layer as it can create python and C libraries easily. As long as you write Nim code, you might integrate the code in C/C++, Python or even Android. \nThe final result should be a binary executable that runs on Linux, Windows or MacOS Desktop and even [Android](https://github.com/marcomq/nimview_android). IOS wasn't tested yet.\n\nThe final application later doesn't require a webserver, but it is recommended to use the webserver during development or in debug mode - or for your cloud environment.\nMake sure to use an additional authentication and some security reverse proxy layer when running on cloud for production. \n\nNode.js is recommended but not required if you want to build your Javascript UI layer with Svelte/Vue/React or the framework of your choice.\nThe HTTP server will run when compiling the application as \"debug\" by default, so you can use all your usual debugging and development tools in Chrome or Firefox. \nWebview on its own is a mess if you want to debug your Javascript issues. You might use it for production and testing, but you shouldn't focus Javascript UI development on Webview.\n\nThis project is not intended to have any kind of forms, inputs or any additional helpers to create the UI. \nIf you need HTML generators or helpers, there are widely used open source frameworks available, for example Vue-Bootstrap (https://bootstrap-vue.org/).\n\n## Demo binary\nThere is a pre-build \"Todo-list\" demo application for windows x64 that uses a simple Svelte UI. \nTo make it work, you need to unzip everything before running the binaries. The zip contains two .exe files, \none desktop application \"appTodo\" and one HTTP server application \"httpTodo\" that opens a server on\nhttp://localhost:8000.\n- [demo.zip](https://github.com/marcomq/nimview/files/6722218/demo.zip)\n\nsha256sum 8a23aa5e8ceba795d56d6cf88c69a17dd821b7e2396d51ba816d8a4162045e9c\n\nIf you want to build this demo from source, you need to run `nimble demo` on the\nNimview base folder.\n\n## Minimal Python example\nThe project is available for python via `pip install nimview` and for nim via `nimble install nimview`. \nIf you just want to display some simple static HTML (or alternatively a jpg), you can run:\n\n```\nimport nimview\nnimview.start(\"hello_world.html\")\n```\n\nIf you want to actually trigger some server code from a button, you can do following in Python:\n\n```\nimport nimview\ndef echoAndModify(value): # One input value in the function signature is required\n    print (\"From front-end: \" + value)\n    return (value + \" appended\")\n\nnimview.addRequest(\"echoAndModify\", echoAndModify)\nnimview.start(\"minimal_ui_sample/index.html\")\n```\n\nThe same in Nim:\n\n## Minimal Nim example\n```\nimport nimview\nnimview.addRequest(\"echoAndModify\", proc (value: string): string =\n  echo \"From front-end: \" & value\n  result = \"'\" & value & \"' modified by back-end\")\nnimview.start()\n```\n\nNimview will automatically use \"../public/index.html\" as as entry page in debug mode\nand will try to load \"../dist/inlined.html\" in release mode. In release mode, the inlined.html entry point\nwill be compiled statically into the release binary. If there are no further dependencies,\nthe release binary can just run as single executable binary without further UI files.\nKeep in mind that when running in webserver mode, it will expose all files and subfolders that in the same directory as the index.html.\n\n## Javascript and HTML UI\nNimview offers an npm package \"npm install nimview\" which makes your life easier \non the front-end.\nIf you want to trigger back-end code from Javascript, you can do following\nasync callback:\n```\nimport backend from \"nimview\"\nbackend.waitInit().then(() => {\n  backend.echoAndModify(\"test\").then((resp) => {console.log(resp)})\n})\n```\n`backend.waitInit` is only required if you want to immediately trigger some \nback-end function during initialization. Nimview takes a few milliseconds to \nload all functions from back-end to front-end.\nYou don't need this function if user action triggers a back-end call.\n\nKeep also in mind that the inlined.html is completely \"inlined\" for release mode and that any \"defer\" \nkeyword would not work for your script tags. So your javascript may be ready before\nthe DOM is ready for Jasascript. You may still trigger to load the \njavascript deferred when using \n```\ndocument.addEventListener(\"DOMContentLoaded\", function(event) { \n```\nto init your javascript when the DOM is ready, for example in your \"main.js\" for Svelte or Vue.\n\n\n## Exchange data with UI\nNimview register functions to take up to 4 arguments. If you need more or if you have \nmore complex data, it is recommended to use Json to encode your values on the client. \nUse a parser on the back-end to read all values and send Json back to the client. By this, you have an unlimited amount of input and output\nparameter values.\nThis is easy when using python or Nim as back-end. This may also simplify automated testing, as you can store the specific strings as Json \nand only check specific Json values. Notice, that all registered functions return only strings, so the server will also just return a string value. \nIf you need Json, you need to parse this value in javascript manually, for example with JSON.parse().\nIn case you want to use C++ - don't write your own C++ Json parser. Feel free to use https://github.com/nlohmann/json. You might re-use it in other code locations.\n\n## Development workflow\nYou need to compile the back-end and usually the front-end too, when using vue or svelte. While this seems unnecessary complicated in the beginning, \nyou will have the freedom to only restart the back-end if you have back-end changes and \nuse some autoreload feature of webpack (vue) and rollup (svelte) for the frontend.\n\nThe setup/install with Svelte after installing nim would be: \n- `nimble install nimview`\n- `npx degit marcomq/nimview/examples/svelte myProject`\n- `cd myProject`\n- `npm install`\n\nTo create a release version, just run\n- `npm run build`\n- `nim c -d:release --app:gui src/App.nim`\n\nBut if you want to change code easily, the development workflow would be:\n- start your back-end in debug mode with vs code or terminal, run: \n- `nim c -r -d:debug src/App.nim`\n- start your frontend npm in autoreload with VS-Code or terminal, run \n- `npm run dev`\n- open a browser with url http://localhost:5000 to see the current front-end code result that is served by Node.js\n- change your front-end code, the page will reload automatically\n- change your back-end code and re-run `nim c -r -d:debug src/App.nim` or restart the VS Code debugger\n- keep in mind that http://localhost:5000 is only a development url, the Javascript generated for production would be reachable by default at http://localhost:8000\n\n## Components as diagram\n\n![nimview](https://user-images.githubusercontent.com/62469331/124002547-2ca26100-d9d6-11eb-955a-86954a016b69.png)\n\n\n### Why Nim\nNim is actually some great \"batteries included\" helper. It is similar readable as python, has some cool Json / HTTP Server / Webview modules \nbut creates plain C Code that can be compiled by gcc compilers to optimized machine code. \nYou can also include C/C++ code as the output of Nim is just plain C. Additionally, it can be compiled to a python library easily. \n(https://robert-mcdermott.gitlab.io/posts/speeding-up-python-with-nim/).\n\n### Which JS framework for UI\nThere are many JS frameworks to choose to create responsive user interfaces.\nSvelte will create the fastest and best readable front-end code. But it is completely up to you which framework you will choose, as Vue and React have much more plugins and add-ons.\n\nThere is an example for Vue + Bootstrap 4 in tests/vue and one for Svelte in tests/svelte.\nFor the Windows target, you need to choose a IE 11 compatible CSS library. Bootstrap 5 \nfor example isn't compatible with IE 11 anymore.\n\n### Nimview vs Electron or CEF\nElectron and CEF are great frameworks and both were an inspiration to this helper here. \nHowever, the output binary of electron or CEF is usually more than 100 MB and getting started with a new project without previous knowledge of Electron / CEF can also take some time. \nBoth CEF and Electron might be great for large Desktop projects that don't need to care about RAM + Disk or that require some additional custom window color,\ntask symbols or other features. But setting up Electron / CEF applications and deploying them takes a lot of time, which you can safe by using this helper here.\nThe binary output of Nimview is usually less than 2 MB. If you zip the binary, you even have less than 1 MB for a desktop application with UI. It also might just run in the Cloud as there is an included webserver \nYou might easily run the app in Docker. Getting started might just take some minutes and it will consume less RAM, \nless system resources and will start-up much quicker than an Electron or CEF App.\nYou might write the same Code and the same UI for your Cloud application as for your Desktop App.\n\n### Nimview vs Eel or Neel\nThere are another 2 cool similar frameworks: The very popular framework [eel](https://github.com/ChrisKnott/Eel) for python \nand its cousin [neel](https://github.com/Niminem/Neel) for nim. \nWhile the use case seems to be similar, there are two major differences: \n- Both eel and neel make it easy to call back-end side functions from Javascript and also call exposed Javascript from back-end. \nThe later one will not be possible with Nimview.\n  Nimview will just make it easy to trigger back-end routes from Javascript but will not expose Javascript functions to the back-end side. \n  If you want to do so, you need to parse the back-end’s response and call the function with this data. \n  This makes it easy to switch to multiple HTML / JS user interfaces for the same back-end code without worrying about javascript callback functions. Also - this makes writing of automated back-end tests much\n  easier.\n- With Nimview, you also don't need a webserver running that might take requests from any other user on localhost as you use Webview in release mode. \nThis improves security as you don't need to worry about open ports or other attack vectors that need to be considered when running a webserver application. It also makes it easy to run multiple applications without having port conflicts.\n- Nimview also includes a simple global token check in release mode that may be able to prevent most\n  CSRF attacks when the server is running on localhost. \n- Nimview can compile to a single executable binary which makes deployemnt and distribution \nvery easy.\n\n### Difference to Flask\n[Flask](https://github.com/pallets/flask) is probably the most popular python framework to create micro services and Nimview/AsyncHttpServer probably cannot compete with the easiness or with the amount of available plugins of Flask for simple python cloud applications. \nBut the use-case is different. While flask was desinged to serve HTML and have easy routes for \"get\" and \"post\", Nimview was just designed to trigger user events from ajax using \"post\". Nimview will not support server side template engines as flask does. The front-end code needs to care of routes and rendering.\n\nNimview can also create static binaries that can run in a minimal tiny Docker container that doesn't even need an installed python environment, as long as no python code is used. So you might create containers for your application that have just a few MB. Those deploy and startup much faster than Flask applications. Make sure to avoid building with Webview when creating binaries for Docker by compiling with `-d:useServer`, or you need to include GTK libraries in your container.\n\n### Wails\nAfter releasing the first 0.1.0 version of Nimview, I found out about [Wails](https://github.com/wailsapp/wails). And I found out that I nearly created a Wails clone. Just - Wails had some nice additional features \nthat Nimview didn't had. So - Wails became a big inspiration for Nimview 0.2.0: \n- Compilation to a single static binary was added,\n- Multiple arguments for server functions were added and\n- Server functions are automatically exposed to the client when registered on server\n\nNimview still has a smaller code base and creates even smaller binaries. You also have classical languages \nfor your back-end as C, C++ or Python code - and you can mix those with Nim.\nAdditionally, Nimview supports Android for offline and online applications.\n\n### CSRF and Security\nNimview was made with security in mind. For the Webview `startDesktop` mode, no network ports are opened to display the UI. The webserver is mostly for debugging and development.  \nSo the application doesn't need to be checked for several common attack vectors\nof web-applications as long as Webview is used.\n\nHowever, if you create a web-application, you need perform most security mitigations by yourself, by middleware or by the javascript framework you are using. \nYou may check [owasp.org](owasp.org)\n\nFollowing CSRF protections are already included in Nimview: \n\nNimview stores 3 global random non-session tokens that renew each other every 60 seconds. A valid token is required for any Ajax request except \"getGlobalToken\". \nThe token is queried automatically with a \"getGlobalToken\" request when the application starts. If the token is missing or wrong, there is a \"403\" error for ajax requests.\n\nThis isn't a full CSRF protection, as the token isn't bound to a session and all \nusers that can read responses from localhost could also use this token to \nperform an attack (even if they may already send request directly to localhost).\nIf you add a \"Samesite\" directive for cookies, you might already prevent most common CSRF attack vectors.\nThe token check can also be disabled with `setUseGlobalToken(false)` for debugging, development,\nor in case that there is already a session-based CSRF mitigation used by middleware. \n\n### Multithreading\nNimview is build to run single-threaded. You may still run functions that create multiple threads or access a thread-pool. Check the Nim manual on how to deal with multithreading and sharing data, for example with Channels.\n\n### IE 11 or - \"Why is my page blank?\"\nNimview uses IE 11 on Windows. Unfortunately, IE 11 doesn't understand modern Javascript\nor ES6. Just writing modern Javascript will result in a blank white page. \nYou therefore need to transform your code with Babel or other tools. \nCheck the examples for this.\nIt might be possible to use Webview2 in future on Windows to get rid of IE 11, but this \nis depending on external Nim libraries that offer a wrapper for Webview. It wasn't tested yet,\nbut it may be possible to use GTK on Windows in case you really need to avoid IE 11.\nAt the time of writing, there is no simple and stable library supporting Webview 2 for Nim, \nand GTK on Windows was much more complicated as just using the IE 11 engine.\n\n### Using UI from existing web-applications\nFor Desktop applications, it is required to use relative file paths in all your HTML. The paths must point to a directory relative of the binary to the given index html file.\nIt is not possible to use a subdirectory of the index file. You can also not use a web URL as startpoint, as this must be an existing file.\nIt is also not recommended to load from an untrusted URL from any existing internet source, as this could easily cause a security breach.\nThe Desktop mode is using IE11 as platform, so there might be security issues when loading uncontrolled content from internet.\n\n## Software Requirements\n\n```\n- install nim (https://nim-lang.org/install.html)\n    avoid white-space in nim install folder name when using windows\n    add path by running nim \"finish\" in the nim install directory, so you have nimble available\n    restart or open new shell to have nimble available\n- linux: yum install gcc webkitgtk4-devel npm <or:> apt install gcc libwebkit2gtk-4.0-dev npm\n- windows: install node > 12.19  (https://nodejs.org/en/download/)\n- nimble install nimview\n- (optional for C/C++ on Windows: install gcc / make sure that minGW is in your path)\n- npx degit marcomq/nimview/examples/xxx myProject\n```\n\n### Documentation\nA documentation is [here](https://htmlpreview.github.io/?https://github.com/marcomq/nimview/blob/master/docs/nimview.html)\n\nMIT License\n\nCopyright (c) 2020 marcomq\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcomq/nimview",
    "keywords": "nim,user-interface,webview,html,css,javascript,http-server",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nimview",
    "package_url": "https://pypi.org/project/nimview/",
    "platform": "",
    "project_url": "https://pypi.org/project/nimview/",
    "project_urls": {
      "Homepage": "https://github.com/marcomq/nimview"
    },
    "release_url": "https://pypi.org/project/nimview/0.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A lightwight cross platform UI library for Nim, C, C++ or Python. The main purpose is to simplify creation of Desktop applications based on a HTML/CSS/JS layer that is displayed with Webview.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11471880,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "645e1428ac897d983ad6f946e807055430f07da5b5eb75252f07b463b70596f5",
          "md5": "520819bf71b149f3ba572c3d81b566e4",
          "sha256": "c78f92e172dbe4bc4a33bf30f61ed3f60ed22c6596b201346001b1ceafd120ac"
        },
        "downloads": -1,
        "filename": "nimview-0.1.0-py3-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "520819bf71b149f3ba572c3d81b566e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 438252,
        "upload_time": "2021-03-06T19:16:22",
        "upload_time_iso_8601": "2021-03-06T19:16:22.559875Z",
        "url": "https://files.pythonhosted.org/packages/64/5e/1428ac897d983ad6f946e807055430f07da5b5eb75252f07b463b70596f5/nimview-0.1.0-py3-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2dcf4165f583f369e4622900d0da2792e9a65a2b308fd07664a052071fef34e",
          "md5": "3761434fa53e1136f9c56e2345270ca1",
          "sha256": "a6e19175f4a51395cbe1fe6b96a17356e2e07254c39ccaafdb5fc40957e070fb"
        },
        "downloads": -1,
        "filename": "nimview-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3761434fa53e1136f9c56e2345270ca1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27186,
        "upload_time": "2021-02-24T19:31:18",
        "upload_time_iso_8601": "2021-02-24T19:31:18.785117Z",
        "url": "https://files.pythonhosted.org/packages/e2/dc/f4165f583f369e4622900d0da2792e9a65a2b308fd07664a052071fef34e/nimview-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad5b1e1e5d04d5f76d01ecf03541deb92b4897b5a31bcd834361b55b44404441",
          "md5": "85965367e093e35cf0ad69a3229a9ecc",
          "sha256": "671d80bd72bb6571f90bc18035e27a4e6702d7dce0a4d4479692305623fe3500"
        },
        "downloads": -1,
        "filename": "nimview-0.1.1-py3-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "85965367e093e35cf0ad69a3229a9ecc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 440466,
        "upload_time": "2021-03-17T11:01:44",
        "upload_time_iso_8601": "2021-03-17T11:01:44.859927Z",
        "url": "https://files.pythonhosted.org/packages/ad/5b/1e1e5d04d5f76d01ecf03541deb92b4897b5a31bcd834361b55b44404441/nimview-0.1.1-py3-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4516d0c42e0fb62b2676b8f2216977dcaeba9438553c1af158587593405918a4",
          "md5": "6c12e2cdd94657c43257cd52b42cf752",
          "sha256": "0cd46fb8c06ad72304f17251816e740ef307bd9e0979343056e5fa62433f6254"
        },
        "downloads": -1,
        "filename": "nimview-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c12e2cdd94657c43257cd52b42cf752",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38857,
        "upload_time": "2021-03-17T11:01:46",
        "upload_time_iso_8601": "2021-03-17T11:01:46.195782Z",
        "url": "https://files.pythonhosted.org/packages/45/16/d0c42e0fb62b2676b8f2216977dcaeba9438553c1af158587593405918a4/nimview-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f0183704660f4749d5f3ec0cd61c08b656270d5841e14753aadc9a7e7eefcbf",
          "md5": "6ca4523a675e5391a568633ba580ee8e",
          "sha256": "db34b766fe116d2baa2be6ff02836fc9abf56c981ae9de4b1b7bacaff3b0ea2e"
        },
        "downloads": -1,
        "filename": "nimview-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ca4523a675e5391a568633ba580ee8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 455689,
        "upload_time": "2021-03-31T13:26:16",
        "upload_time_iso_8601": "2021-03-31T13:26:16.633327Z",
        "url": "https://files.pythonhosted.org/packages/5f/01/83704660f4749d5f3ec0cd61c08b656270d5841e14753aadc9a7e7eefcbf/nimview-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57adee72a455bce39ddd60652e0a8c8ac32e483836608ab9af1f45f818ca4bf4",
          "md5": "92d495d85dd9526aca8f427f92660580",
          "sha256": "034b0658e97b4c536c49d5651f55bf164ed32da336d911a508143168feb4d42f"
        },
        "downloads": -1,
        "filename": "nimview-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "92d495d85dd9526aca8f427f92660580",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41364,
        "upload_time": "2021-03-31T13:26:18",
        "upload_time_iso_8601": "2021-03-31T13:26:18.093076Z",
        "url": "https://files.pythonhosted.org/packages/57/ad/ee72a455bce39ddd60652e0a8c8ac32e483836608ab9af1f45f818ca4bf4/nimview-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "477a0785e924a90beae506ed7f3d37709632e216d7d9ca9e7d9583fadfd436bb",
          "md5": "5768ef20a2aed690b00c51b67e70b662",
          "sha256": "6f76a6d92e964fc0c3c9b09908b122902af8309696149d5d34c537b3cfb3981a"
        },
        "downloads": -1,
        "filename": "nimview-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5768ef20a2aed690b00c51b67e70b662",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4094,
        "upload_time": "2021-06-30T19:15:27",
        "upload_time_iso_8601": "2021-06-30T19:15:27.967662Z",
        "url": "https://files.pythonhosted.org/packages/47/7a/0785e924a90beae506ed7f3d37709632e216d7d9ca9e7d9583fadfd436bb/nimview-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9bceece44f376cb436473e63133ff97abdd958c371e9d998e6c6ef743d54f5",
          "md5": "c6883004b28b88d4d5ec69dbbeaeb074",
          "sha256": "8198fcd4503174602fcb6d22427a2e9e3494b021eb6639bb38bf325287472dff"
        },
        "downloads": -1,
        "filename": "nimview-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6883004b28b88d4d5ec69dbbeaeb074",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20856,
        "upload_time": "2021-06-30T19:20:50",
        "upload_time_iso_8601": "2021-06-30T19:20:50.530710Z",
        "url": "https://files.pythonhosted.org/packages/2c/9b/ceece44f376cb436473e63133ff97abdd958c371e9d998e6c6ef743d54f5/nimview-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51f75c11ace5a1ecfc22f789e28cefff78bbbf03f077faf68e161887a7cead79",
          "md5": "1ecbcb0181c5f79eb60df16ca1c0d19b",
          "sha256": "e346901149e95058394d3676dfbc321d8f249b2bbb12f053c051a842b587ac65"
        },
        "downloads": -1,
        "filename": "nimview-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ecbcb0181c5f79eb60df16ca1c0d19b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20864,
        "upload_time": "2021-07-25T13:18:42",
        "upload_time_iso_8601": "2021-07-25T13:18:42.197103Z",
        "url": "https://files.pythonhosted.org/packages/51/f7/5c11ace5a1ecfc22f789e28cefff78bbbf03f077faf68e161887a7cead79/nimview-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acd52d4aa2bc5713ede9d7b6588cf5e4294163d7a5eccbe9deea02d344a6f893",
          "md5": "08c678a2f81a8a7c03ed767081439701",
          "sha256": "89f8f39939730481967944367e4dce0c424671a851297890a6fb999b62b93178"
        },
        "downloads": -1,
        "filename": "nimview-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "08c678a2f81a8a7c03ed767081439701",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21003,
        "upload_time": "2021-08-30T14:03:40",
        "upload_time_iso_8601": "2021-08-30T14:03:40.520364Z",
        "url": "https://files.pythonhosted.org/packages/ac/d5/2d4aa2bc5713ede9d7b6588cf5e4294163d7a5eccbe9deea02d344a6f893/nimview-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e1807eeb3a231cd28722a7f46a0b95f85714919465665c8fadccf321f722797",
          "md5": "48755cd142940c4e62eb82672a03e0b2",
          "sha256": "c9a7ec56a91ef0bacad573ee994d2fa7abc48f9e34bcb606d017d1cc5c79f27e"
        },
        "downloads": -1,
        "filename": "nimview-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "48755cd142940c4e62eb82672a03e0b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20978,
        "upload_time": "2021-09-14T20:43:58",
        "upload_time_iso_8601": "2021-09-14T20:43:58.917846Z",
        "url": "https://files.pythonhosted.org/packages/0e/18/07eeb3a231cd28722a7f46a0b95f85714919465665c8fadccf321f722797/nimview-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc1131c32480c53af542dd9240cf645cb29f00944f0f309289049905ae2d27cb",
          "md5": "536e84d52a840e83d85778c1848d7d50",
          "sha256": "92ca2ef4177b46d9f867e4bdb192b7dd1376c31e4d15080849d8df539fd2f77f"
        },
        "downloads": -1,
        "filename": "nimview-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "536e84d52a840e83d85778c1848d7d50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20974,
        "upload_time": "2021-09-14T20:52:48",
        "upload_time_iso_8601": "2021-09-14T20:52:48.196653Z",
        "url": "https://files.pythonhosted.org/packages/dc/11/31c32480c53af542dd9240cf645cb29f00944f0f309289049905ae2d27cb/nimview-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac9791ba1b89d388036dc913a54443f516b90aac55c337559e2e0ecab2d4f4b5",
          "md5": "5223fe4ac1f84867a5086086d8ae335a",
          "sha256": "8491f8cd7c1a0ceba607745bda3529f9f64bb0f96671074fcb0518cbe9134aed"
        },
        "downloads": -1,
        "filename": "nimview-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5223fe4ac1f84867a5086086d8ae335a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 423277,
        "upload_time": "2021-09-16T20:35:55",
        "upload_time_iso_8601": "2021-09-16T20:35:55.251239Z",
        "url": "https://files.pythonhosted.org/packages/ac/97/91ba1b89d388036dc913a54443f516b90aac55c337559e2e0ecab2d4f4b5/nimview-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "466733a748ae897ca6c5c34e6ed727c489431cc1bbfd31c98a3978b6194be1e5",
          "md5": "b22b29467db5fb18d092a98e82b44259",
          "sha256": "6b06593ef4005834f8d8f50712806a1cf866c2f2a8e233500357f0088805170a"
        },
        "downloads": -1,
        "filename": "nimview-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b22b29467db5fb18d092a98e82b44259",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20959,
        "upload_time": "2021-09-16T20:38:06",
        "upload_time_iso_8601": "2021-09-16T20:38:06.214068Z",
        "url": "https://files.pythonhosted.org/packages/46/67/33a748ae897ca6c5c34e6ed727c489431cc1bbfd31c98a3978b6194be1e5/nimview-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac9791ba1b89d388036dc913a54443f516b90aac55c337559e2e0ecab2d4f4b5",
        "md5": "5223fe4ac1f84867a5086086d8ae335a",
        "sha256": "8491f8cd7c1a0ceba607745bda3529f9f64bb0f96671074fcb0518cbe9134aed"
      },
      "downloads": -1,
      "filename": "nimview-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5223fe4ac1f84867a5086086d8ae335a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 423277,
      "upload_time": "2021-09-16T20:35:55",
      "upload_time_iso_8601": "2021-09-16T20:35:55.251239Z",
      "url": "https://files.pythonhosted.org/packages/ac/97/91ba1b89d388036dc913a54443f516b90aac55c337559e2e0ecab2d4f4b5/nimview-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "466733a748ae897ca6c5c34e6ed727c489431cc1bbfd31c98a3978b6194be1e5",
        "md5": "b22b29467db5fb18d092a98e82b44259",
        "sha256": "6b06593ef4005834f8d8f50712806a1cf866c2f2a8e233500357f0088805170a"
      },
      "downloads": -1,
      "filename": "nimview-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b22b29467db5fb18d092a98e82b44259",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20959,
      "upload_time": "2021-09-16T20:38:06",
      "upload_time_iso_8601": "2021-09-16T20:38:06.214068Z",
      "url": "https://files.pythonhosted.org/packages/46/67/33a748ae897ca6c5c34e6ed727c489431cc1bbfd31c98a3978b6194be1e5/nimview-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}