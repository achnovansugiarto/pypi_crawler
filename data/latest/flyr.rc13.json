{
  "info": {
    "author": "Arthur Nieuwland",
    "author_email": "anieuwland@nimmerfort.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# Flyr\n![A picture of a FLIR thermogram, the embedded optical data and a Flyr render concatenated into one](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_intro.jpg)\n\nFlyr is a library for extracting thermal data from FLIR images written fully in Python.\n\nOther solutions are wrappers around ExifTool to actually do the hard part of extracting the thermal data. Flyr is a reimplementation of the ExifTool's FLIR parser. Practically, this offers the following benefits:\n\n* Faster decoding because no new process needs to be started and in-memory data does not need to be communicated to this other process\n* More accurate, because Flyr uses all of the camera metadata to translate the raw values into Kelvin, while other projects have a certain set hardcoded. The differences are often about 0.1°C, but can be as high as 0.6°C.\n* Easier and robust installation and deployment, because Flyr is completely installable from PyPI.\n* Arguably simpler use: no need to create a superfluous extraction object; simply call `thermogram = flyr.unpack(flir_file_path)` and done\n* Extra features (see feature section) such as different units, built-in rendering and adjustable thermal data.\n\n## Installation\n\nFlyr is installable from [PyPi](https://pypi.org/project/flyr/):\n\n```bash\npip install flyr\n```\n\n## Latest additional features\n\nThese features appeared in 3.1.0 through 3.3.0. Also see the CHANGELOG.md for feature history.\n\n- Added ability to access some EXIF metadata via `thermogram.camera_metadata` (GPS, date, camera)\n- Added ability to mask renders or mask picture-in-pictures, thermally highlighting only the masked region\n- Added ability to render grayscale-inverted\n- Added ability to render picture-in-pictures\n- Added ability to emphasize edges in renders using the optical data\n- Added options to the flyr executable for the above two features\n\n## Upcoming features\n\nThese are features already implemented and merged into the master branch, but not released yet. Also see the CHANGELOG.md for feature history.\n\n## Usage and features\n### Different units\nThermal data is available in kelvin, celsius and fahrenheit.\n\n```python\nimport flyr\n\nflir_path = \"thermograms/flir_c5_1.jpg\"\nthermogram = flyr.unpack(flir_path)\n\nthermal = thermogram.kelvin  # As kelvin\nthermal = thermogram.celsius  # As celsius\nthermal = thermogram.fahrenheit  # As fahrenheit\n```\n\n### Optical data can be read\n![The optical photo embedded in the FLIR thermogram](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_optical.jpg)\n\nTo read the embedded photo, access either `optical` or `optical_pil` to respectively get a 3D numpy or Pillow Image object with the photo.\n\n```python\n\nimport flyr\n\nflir_path = \"thermograms/flir_e5_2.jpg\"\nthermogram = flyr.unpack(flir_path)\noptical_arr = thermogram.optical  # Also works\nthermogram.optical_pil.save(\"optical.jpg\")\n```\n\n### Built-in support for rendering\n![Examples of different RGB renders of the same thermogram](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_render_example.png)\n\nFlyr has built-in support to render thermal data to RGB images. It is possible to use the embedded palette or one of the provides [palettes](flyr/palettes). Normalization can be done by percentiles or absolute values.\n\n```python\nimport flyr\n\nflir_path = \"thermograms/flir_e5_2.jpg\"\nthermogram = flyr.unpack(flir_path)\n# render = thermogram.render()  # Use to get raw RGB array\nrender = thermogram.render_pil()  # Returns Pillow Image object\nrender.save(f\"render-embedded.png\")\n```\n\n```python\npalettes = [\"turbo\", \"cividis\", \"inferno\", \"grayscale\", \"hot\"]\nfor p in palettes:\n    # The below call returns a Pillow Image object.\n    # A sibling method called `render` returns a numpy array.\n    render = thermogram.render_pil(\n        min_v=27.1,\n        max_v=35.6,\n        unit=\"celsius\",\n        palette=p,\n    )\n    render.save(f\"render-{p}.png\")\n```\n\nTo render by percentiles, call as below. This approach is useful when it isn't known what temperature range to render.\n\n```python\nthermogram.render_pil(\n    min_v=0.0,\n    max_v=1.0,\n    unit=\"percentiles\",\n    palette=\"copper\",\n).save(f\"render-percentiles.png\")\n```\n\nIt's also possible to apply a palette only to a specific part of rendered image, highlighting it and leaving the rest grayscale. Just pass a boolean mask to the `mask` parameter.\n\n```python\nmask = thermogram.kelvin > thermogram.kelvin.mean()\nthermogram.render_pil(mask=mask).save(\"render-masked.png\")\n```\n\n### Edge emphasis for better delineation\n![Example of five renders with and without edges emphasized](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_edge_emphasis.png)\n\nIf optical imagery is present, it can be used to detect edges and more sharply delinate them. Used the `edge_emphasis` parameter with a value between 0 and 1 to enable it. When a mask is applied, edges are only emphasized in the masked region.\n\n```python\nimport flyr\n\nthermogram = flyr.unpack(\"flir_e6_1.jpg\")\nthermogram.render_pil(edge_emphasis=0.0).save(\"render-no-edge-emphasis.png\")\nthermogram.render_pil(edge_emphasis=0.275).save(\"render-edge-emphasis.png\")\n\nmask = thermogram.kelvin > thermogram.kelvin.mean()\nthermogram.render_pil(edge_emphasis=0.275, mask=mask).save(\"render-edge-emphasis-masked.png\")\n```\n\n### Putting the Picture in the Picture\n![Example of a render pictured in a photograph (Picture-in-Picture)](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_picture_in_picture_example.png)\n\nRenders and optical imagery can also be combined according to the Picture-in-Picture mode.\n\n```python\nimport flyr\n\nthermogram = flyr.unpack(\"flir_e40_4.jpg\")\nthermogram.picture_in_picture_pil(render_opacity=0.8).save(\"pip.png\")\n```\n\n![Example of a masked render pictured in a photograph (Picture-in-Picture)](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_picture_in_picture_mask_example.png)\n\nLike the `render_pil` method, a `mask` parameter can be used to highlight a certain region of the image. There are two modes in which this mask can work: `\"classical\"` and `\"alternative\"`. In classical mode, the photograph is highlighted using a thermal mask of the region of interest. In the alternative mode, a thermal mask is applied to a grayscale render of the thermogram layered on top of the optical image.\n\n```python\nimport flyr\n\nthermogram = flyr.unpack('flir_one_pro_1.jpg')\nmask = thermogram.kelvin > thermogram.kelvin.mean()\nthermogram.picture_in_picture_pil(mask=mask, mask_mode=\"classical\").save(\"pip_classical.png\")\nthermogram.picture_in_picture_pil(mask=mask, mask_mode=\"alternative\").save(\"pip_alternative.png\")\n```\n\n### Adjustable camera settings\n![Examples of different RGB renders of the same thermogram](https://bitbucket.org/nimmerwoner/flyr/downloads/readme_render_emissivities.png)\n\nIt is possible to update the camera settings / parameters with which the thermal data is calculated. A typical value to adjust would be `emissivity`, but `object_distance`, `relative_humidity` and others are also configurable. See the parameters of [`FlyrThermogam.__raw_to_kelvin()`](https://bitbucket.org/nimmerwoner/flyr/src/90635d825bba132a99a240c511df892fab1f05bb/flyr/thermogram.py#lines-217) for which.\n\n```python\nimport flyr\n\nflir_path = \"thermograms/flir_e5_2.jpg\"\nthermogram = flyr.unpack(flir_path)\n\nemissivities = [0.6, 0.7, 0.8, 0.9, 1.0]\nfor e in emissivities:\n    thermogram = thermogram.adjust_metadata(emissivity=e)\n    # thermal = thermogram.celsius  # Access updated data as normal\n    render = thermogram.render_pil(\n        min_v=27.1,\n        max_v=35.6,\n        unit=\"celsius\",\n        palette=\"viridis\",\n    )\n    render.save(f\"render-{e}.png\")\n```\n\n### Read from file, from file handle or binary stream\nCall `flyr.unpack` on a filepath to receive a numpy array with the thermal data. Alternatively, first open the file in binary mode for reading and and pass the the file handle to `flyr.unpack`.\n\n```python\nimport flyr\n\n# From file path\nflir_path = \"thermograms/flir_e5_2.jpg\"\nthermogram = flyr.unpack(flir_path)  # From file path\n```\n\n```python\n# From file handle / binary stream\nwith open(flir_path, \"rb\") as flir_handle:  # In binary mode!\n    thermogram = flyr.unpack(flir_handle)\n```\n\n## Access EXIF data\nSome common EXIF metadata has been made easily accessible via `thermogram.camera_metadata`:\n\n```python\nimport flyr\n\n# From file path\nflir_path = \"thermograms/flir_e75_1.jpg\"\nthermogram = flyr.unpack(flir_path)\ncm = thermogram.camera_metadata\nprint(cm.data)  # Raw EXIF data (dict)\nprint(cm.gps_data)  # Raw GPS data (dict)\nprint(cm.date_time)  # Parsed datetime object of when picture was taken (datetime)\nprint(cm.gps_altitude)  # (float)\nprint(cm.gps_image_direction)  # (float)\nprint(cm.gps_latitude)  # (float)\nprint(cm.gps_longitude)  # (float)\nprint(cm.gps_map_datum)  # (str)\nprint(cm.make)  # (str)\nprint(cm.model)  # (str)\nprint(cm.software)  # (str)\nprint(cm.x_resolution)  # (float)\nprint(cm.y_resolution)  # (float)\n```\n\nThe `data` and `gps_data` properties may also contain values not accessible via the handy properties mentioned above. The return values are always either the value itself or `None`, in case this EXIF data is not embedded in the file.\n\n\n## Supported cameras\nCurrently this library has been tested to work with:\n\n* FLIR C5\n* FLIR E4, E5, E6, E8, E8XT, E30, E30BX, E40, E50, E50BX, E53, E60BX, E75\n* FLIR I5\n* FLIR ONE, ONE Pro, ONE Pro Next Gen\n* FLIR P60 (PAL)\n* FLIR SC660\n* FLIR T630SC, T660\n* FLIR ThermaCAM B400\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Most help is currently needed supporting more models and testing against more pictures. Testing and developing for your own camera's images or FLIR Tools' samples is recommended.\n\n## Acknowledgements\nThis code would not be possible without [ExifTool](https://exiftool.org/)'s efforts to [document](https://exiftool.org/TagNames/FLIR.html) the FLIR format. [tomas123](https://www.eevblog.com/forum/thermal-imaging/flir-e4-thermal-imaging-camera-teardown/msg342072/#msg342072)'s work is similarly important to mention. [Previous work](https://github.com/Nervengift/read_thermal.py) in Python must also be acknowledged for creating a workable solution.\n\n## License\nFlyr is licensed under The European Union Public License 1.2. The English version is included in the license file. Translations for all EU languages, each fully legally valid, can be found at the [EUPL](https://eupl.eu/) website.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://bitbucket.org/nimmerwoner/flyr/downloads/flyr-3.3.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/nimmerwoner/flyr/",
    "keywords": "flir,thermography,heat imagery",
    "license": "EUPL v1.2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flyr",
    "package_url": "https://pypi.org/project/flyr/",
    "platform": null,
    "project_url": "https://pypi.org/project/flyr/",
    "project_urls": {
      "Author website": "http://nimmerfort.eu",
      "Download": "https://bitbucket.org/nimmerwoner/flyr/downloads/flyr-3.3.1.tar.gz",
      "Homepage": "https://bitbucket.org/nimmerwoner/flyr/",
      "Issues": "https://bitbucket.org/nimmerwoner/flyr/issues?status=new&status=open",
      "Releases": "https://bitbucket.org/nimmerwoner/flyr/downloads/"
    },
    "release_url": "https://pypi.org/project/flyr/3.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Flyr is a library for extracting thermal data from FLIR images written fully in Python, without depending on ExifTool.",
    "version": "3.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17331730,
  "releases": {
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba94b14a9e2cb4bb9cc49c5a0f16433dde660180bb1b7c8f6f996de7643f520b",
          "md5": "75b870caadac79ffe729341ee53bff47",
          "sha256": "54106aeb2dbe5dca39c810e5ec119dcd9b187041f62edd2d08a0eabc27061a49"
        },
        "downloads": -1,
        "filename": "flyr-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "75b870caadac79ffe729341ee53bff47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9006,
        "upload_time": "2020-05-09T12:22:21",
        "upload_time_iso_8601": "2020-05-09T12:22:21.782422Z",
        "url": "https://files.pythonhosted.org/packages/ba/94/b14a9e2cb4bb9cc49c5a0f16433dde660180bb1b7c8f6f996de7643f520b/flyr-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b061d39ab7acbcfc23f356c5d7fe5e3e0bb222c62705d29af77b7fc93fa4fa4",
          "md5": "6e41045fab1e1dedad4c6dd3de53cf48",
          "sha256": "39e316a59f7c28944f1860cd4ec38044fb34da67010678127f10c5e69cc996ff"
        },
        "downloads": -1,
        "filename": "flyr-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6e41045fab1e1dedad4c6dd3de53cf48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15034,
        "upload_time": "2020-05-10T12:08:54",
        "upload_time_iso_8601": "2020-05-10T12:08:54.631498Z",
        "url": "https://files.pythonhosted.org/packages/3b/06/1d39ab7acbcfc23f356c5d7fe5e3e0bb222c62705d29af77b7fc93fa4fa4/flyr-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4eff20ca8dd9d5972c358a5c45705d06be9e3e805480697d241841bfc8433bc9",
          "md5": "049972fb43bfe6aefd015ee2c74740b2",
          "sha256": "4e0023316509c6cd1523a96ea4601deac6ab9756567f0952d299906d0ee8b5b1"
        },
        "downloads": -1,
        "filename": "flyr-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "049972fb43bfe6aefd015ee2c74740b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19486,
        "upload_time": "2020-08-09T20:05:13",
        "upload_time_iso_8601": "2020-08-09T20:05:13.990784Z",
        "url": "https://files.pythonhosted.org/packages/4e/ff/20ca8dd9d5972c358a5c45705d06be9e3e805480697d241841bfc8433bc9/flyr-0.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "087d72416487354857f68c08b056a0a2810d0ac685d50687eb22e88b34975db3",
          "md5": "e54467525852dc9e7fcd0e4ba00adf78",
          "sha256": "fb26f78dbb0855399b6a898be79c48ac9423f3bdea78c97cd89710e9738e05fa"
        },
        "downloads": -1,
        "filename": "flyr-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e54467525852dc9e7fcd0e4ba00adf78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 36622,
        "upload_time": "2021-03-30T13:49:19",
        "upload_time_iso_8601": "2021-03-30T13:49:19.731966Z",
        "url": "https://files.pythonhosted.org/packages/08/7d/72416487354857f68c08b056a0a2810d0ac685d50687eb22e88b34975db3/flyr-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5da7b86f0efe52936300c7253c7341be6d6984f5148457b992b193853c91b0a3",
          "md5": "b338b7d3180044f3d225a2e821352340",
          "sha256": "c64434d98427862d91e278c22861ac5fdd1b59dc02fc403931a4667af346e8ab"
        },
        "downloads": -1,
        "filename": "flyr-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b338b7d3180044f3d225a2e821352340",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 36973,
        "upload_time": "2021-04-13T10:40:41",
        "upload_time_iso_8601": "2021-04-13T10:40:41.742181Z",
        "url": "https://files.pythonhosted.org/packages/5d/a7/b86f0efe52936300c7253c7341be6d6984f5148457b992b193853c91b0a3/flyr-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35f3429318fe111dbd4b026f540a41ca3d23e820a5e6fd2daac9c9ff50fb7284",
          "md5": "3b0bb5463120ad81460aac38a67a2e5b",
          "sha256": "db0bcd061e3592fcc20fe49bff30e9b7a5720d24a0396d2db1f30c47a339e353"
        },
        "downloads": -1,
        "filename": "flyr-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b0bb5463120ad81460aac38a67a2e5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 39640,
        "upload_time": "2021-12-04T21:40:36",
        "upload_time_iso_8601": "2021-12-04T21:40:36.337256Z",
        "url": "https://files.pythonhosted.org/packages/35/f3/429318fe111dbd4b026f540a41ca3d23e820a5e6fd2daac9c9ff50fb7284/flyr-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ab438658e67bf917d4515b057622b17ccbb87f163832a24b61d347541fc71e8",
          "md5": "78f2caad6c674f7fcac87342706b29f0",
          "sha256": "01330efc719541d5ef07fe668a93f0f209cde9ea4039824cfbdef63ed6a14f70"
        },
        "downloads": -1,
        "filename": "flyr-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78f2caad6c674f7fcac87342706b29f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 39625,
        "upload_time": "2021-12-04T21:50:01",
        "upload_time_iso_8601": "2021-12-04T21:50:01.821098Z",
        "url": "https://files.pythonhosted.org/packages/0a/b4/38658e67bf917d4515b057622b17ccbb87f163832a24b61d347541fc71e8/flyr-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54546dd2394aa3df908018662ae0fe0c854a505b26ae9c1ad13e18142ec330c8",
          "md5": "4546e6c1d3630ded3025180679763e1b",
          "sha256": "5750f20232241940d5bbd7b951c2b13febf403b5ffb83ef25a2a977b34f5f25f"
        },
        "downloads": -1,
        "filename": "flyr-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4546e6c1d3630ded3025180679763e1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 41837,
        "upload_time": "2022-01-22T10:44:23",
        "upload_time_iso_8601": "2022-01-22T10:44:23.430402Z",
        "url": "https://files.pythonhosted.org/packages/54/54/6dd2394aa3df908018662ae0fe0c854a505b26ae9c1ad13e18142ec330c8/flyr-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a18bcf0d75db37947bcbac3f4c02c8b79b168323af172a8847e5f3e6e4eba5c7",
          "md5": "7cafdfad0a7dd0129ffc3005262ddd82",
          "sha256": "bccfacb94885ab9ffea75fbbe234e2145adeac4c81530fd37b77582a2dd92ca8"
        },
        "downloads": -1,
        "filename": "flyr-3.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7cafdfad0a7dd0129ffc3005262ddd82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 42086,
        "upload_time": "2022-01-23T13:39:19",
        "upload_time_iso_8601": "2022-01-23T13:39:19.641536Z",
        "url": "https://files.pythonhosted.org/packages/a1/8b/cf0d75db37947bcbac3f4c02c8b79b168323af172a8847e5f3e6e4eba5c7/flyr-3.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09f3785b905d4f6529f44f6cb47f9d6aabad1af4c64fc959fd453e1080c16a6a",
          "md5": "f64a2903756733c7aa0b2e53b12e895a",
          "sha256": "fb8f46fb9c03c25cc8f94953b6d120877c99c82a66e3b7c161922a057544da98"
        },
        "downloads": -1,
        "filename": "flyr-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f64a2903756733c7aa0b2e53b12e895a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 44574,
        "upload_time": "2022-02-12T19:26:46",
        "upload_time_iso_8601": "2022-02-12T19:26:46.281198Z",
        "url": "https://files.pythonhosted.org/packages/09/f3/785b905d4f6529f44f6cb47f9d6aabad1af4c64fc959fd453e1080c16a6a/flyr-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aa0bdf9b867876775d9a8ae3585d3e6434dc72b1f20ca3c901bf5cd434f62c6",
          "md5": "bc34e3d757db8fdb346083b51328a0e6",
          "sha256": "937a7b74fce591a6675095d213e1603335bf9c5ea6c87ff6be2e84d9f155286a"
        },
        "downloads": -1,
        "filename": "flyr-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc34e3d757db8fdb346083b51328a0e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 46116,
        "upload_time": "2023-01-19T17:00:12",
        "upload_time_iso_8601": "2023-01-19T17:00:12.580340Z",
        "url": "https://files.pythonhosted.org/packages/8a/a0/bdf9b867876775d9a8ae3585d3e6434dc72b1f20ca3c901bf5cd434f62c6/flyr-3.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ac3992a8ae095ac77fbaf5019a472ab1418d2f8e3147bd6f65a10fb392ff19",
          "md5": "35ec80947f41b0c272fffe3f1d03e8ab",
          "sha256": "8d0d8e2b8524601bb1a4e58a00ce32cd2378f2969ea3c65171e7db751b248e10"
        },
        "downloads": -1,
        "filename": "flyr-3.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "35ec80947f41b0c272fffe3f1d03e8ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48022,
        "upload_time": "2023-03-13T07:04:17",
        "upload_time_iso_8601": "2023-03-13T07:04:17.150983Z",
        "url": "https://files.pythonhosted.org/packages/51/ac/3992a8ae095ac77fbaf5019a472ab1418d2f8e3147bd6f65a10fb392ff19/flyr-3.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c58b93fb415aee194fec5e80f44fe3ad88628739c1ef1326dcd463575cf5e6a",
          "md5": "52cd41f648b2feaa003980ad13c9e641",
          "sha256": "244737cb2859c98cea3843f9871fecaada4c74058a39d49f93bbfc5449002916"
        },
        "downloads": -1,
        "filename": "flyr-3.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52cd41f648b2feaa003980ad13c9e641",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48016,
        "upload_time": "2023-03-17T09:06:40",
        "upload_time_iso_8601": "2023-03-17T09:06:40.996285Z",
        "url": "https://files.pythonhosted.org/packages/1c/58/b93fb415aee194fec5e80f44fe3ad88628739c1ef1326dcd463575cf5e6a/flyr-3.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c58b93fb415aee194fec5e80f44fe3ad88628739c1ef1326dcd463575cf5e6a",
        "md5": "52cd41f648b2feaa003980ad13c9e641",
        "sha256": "244737cb2859c98cea3843f9871fecaada4c74058a39d49f93bbfc5449002916"
      },
      "downloads": -1,
      "filename": "flyr-3.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "52cd41f648b2feaa003980ad13c9e641",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 48016,
      "upload_time": "2023-03-17T09:06:40",
      "upload_time_iso_8601": "2023-03-17T09:06:40.996285Z",
      "url": "https://files.pythonhosted.org/packages/1c/58/b93fb415aee194fec5e80f44fe3ad88628739c1ef1326dcd463575cf5e6a/flyr-3.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}