{
  "info": {
    "author": "Bastien Dussap",
    "author_email": "bastien.dussap@inria.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: GPU :: NVIDIA CUDA",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "\n# Kernel Quantification\n\n`KernelQuantification` used Kernel Mean Embedding to estimate the proportion of a mixture of distributions.\n\n## Overview\n\n`KernelQuantification` is a method to do quantification learning, i.e. estimate proportions of labels in a target sample, using Kernel Mean Embedding and Random Fourier Features. This python implementation can run on CPU or on GPU if cuda is installed. <br>\n\nThe methods implemented in this package are detailed in the following article: \n\n> ARTICLE NOT YET AVAILABLE\n\nThe code associated to the article can be found here:\n\n> CODE NOT YET AVAILABLE\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install Kernel Quantifier from [pypi](https://pypi.org/).\n\n```bash\npip install kernelquantifier\n```\n\nYou will require [CUDA](https://developer.nvidia.com/cuda-downloads) to use the algorithms on your GPU. <br>\n**Note** that the KernelQuantifier can be use on CPU however Generative KernelQuantifier requires a GPU to be efficient.\n\n## Example\n\nWe test our methods on a toy dataset: [Iris flower dataset](https://en.wikipedia.org/wiki/Iris_flower_data_set) contains in the scikit-learn package.  \n\nAll the code can be found at `./tests/example.ipynb`. \n\n### Package \n\n```python\nimport kernelquantifier as kq\n\nimport torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.decomposition import PCA\n```\n\n### Data\n\nWe load the data and we use apply a PCA on the data to plot it. Code taken from the [scikit-learn documentation](https://scikit-learn.org/stable/auto_examples/decomposition/plot_incremental_pca.html#sphx-glr-auto-examples-decomposition-plot-incremental-pca-py)\n\n```python\niris = load_iris()\nX = iris.data\ny = iris.target\n\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X)\n\ncolors = [\"navy\", \"turquoise\", \"darkorange\"]\nplt.figure(figsize=(8, 8))\nfor color, i, target_name in zip(colors, [0, 1, 2], iris.target_names):\n    plt.scatter(\n        X_pca[y == i, 0],\n        X_pca[y == i, 1],\n        color=color,\n        lw=2,\n        label=target_name,\n    )\nplt.legend(loc=\"best\", shadow=False, scatterpoints=1)\nplt.axis([-4, 4, -1.5, 1.5])\nplt.savefig(\"figures/iris_pca.png\")\nplt.show()\n```\n<img src=\"./tests/figures/iris_pca.png\" width=\"100%\"/>\n\nWe split the dataset in two part, one will be the Source and the other the Target. We don't have acces to the label of the Target\ndataset.\n\n```python\nnp.random.seed(123)\nidx = np.random.choice(np.arange(X.shape[0]), 75, replace=False)\nidx_inv = []\nfor i in range(X.shape[0]):\n    if i not in idx:\n        idx_inv.append(i)\n\n# Target\nTarget = X[idx]\nTarget_Label = y[idx]\n\n_, counts = np.unique(Target_Label, return_counts=True)\npi = counts/Target_Label.shape[0]\n\n# Source\nSource = X[idx_inv]\nSource_Label = y[idx_inv]\n\n# Plot\nSource_pca = pca.transform(Source)\nTarget_pca = pca.transform(Target)\n\ncolors = [\"navy\", \"turquoise\", \"darkorange\"]\nplt.figure(figsize=(8, 8))\nfor color, i, target_name in zip(colors, [0, 1, 2], iris.target_names):\n    plt.scatter(\n        Source_pca[Source_Label == i, 0],\n        Source_pca[Source_Label == i, 1],\n        color=color,\n        lw=2,\n        label=target_name,\n    )\nplt.scatter(\n    Target_pca[:, 0],\n    Target_pca[:, 1],\n    color=\"gray\",\n    lw=1,\n    label=\"Target\",\n)\nplt.legend(loc=\"best\", shadow=False, scatterpoints=1)\nplt.axis([-4, 4, -1.5, 1.5])\nplt.show()\n```\n\n<img src=\"./tests/figures/iris_source_target.png\" width=\"100%\"/>\n\n### Preparing the data\n\nWe transform the target into a torch.tensor. \n\n```python\nTarget = torch.from_numpy(Target)\n```\n\nWe have implemented a class `kernelquantifier.LabelledCollection` to manage the Source data. This is essentially a list of tensor, where each index correspond to one class, with a few more methods implemented (see the documentation for more information).  \n\nTo create `kernelquantifier.LabelledCollection` we need to pass as argument a function that will transform the data as a list and the corresponding arguments (see the documentation for more information).\\\\\nFor instance in our case the Source `X` come with label `y`. We create a function  `to_labelledCollection` that takes the data and the labels as arguments and returns a list where index 0 contains the point belonging to the class 0 and so on.\n\n------------------\nSide note on the device:  \nThe computation can be done either on the CPU or the GPU. To be performed on the GPU you will need [CUDA](https://developer.nvidia.com/cuda-downloads) installed.  \nThe device the computation will be done on, is the same device as the Source (If Target and Source are not on the same device, the Target will be moved).  \nWe have implemented two functions : `kernelquantifier.choose_device` that will select the gpu is avalaible and the cpu otherwise. And `kernelquantifier.cuda_info` that will give informations on the device.\n\n```python\ndevice = kq.choose_device(verbose=True) \n# device = torch.device(\"cpu\")\nkq.cuda_info(device)\n```\n\noutputs:\n```bash\nRunning on the GPU\nUsing device: cuda:0\n\nNVIDIA RTX A2000 Laptop GPU\nMemory Usage:\nAllocated: 0.0 GB\nCached:    0.0 GB\n11.3\n```\n------------------\n\n```python\ndef to_labelledCollection(X, y):\n    return [torch.from_numpy(X[y == i, :]).to(device) for i in range(3)]\n\nSource = kq.LabelledCollection(to_labelledCollection, Source, Source_Label)\n```\n\n### KernelQuantifier\n\nThere is two version of the Kernel Quantifier algorithm. The one that use Random Fourier Features and the one that don't. See notebook `computation_times.ipynb` or the article to see the difference between the two.\n\n#### With RandomFourierFeatures\n\nTo use the KernelQuantifier with RFF, we call the class `kernelquantifier.KernelQuantifierRFF` (see the docs for more information).\\\\\nThe init as two arguments: kernel_type (str) and seed (int). The seed is there to ensure the reproducibility of the experiments. While the kernel_type specify the kernel we want to use. Use the function `kernelquantifier.available_kernel_rff` to see the list of currently available kernel with RFF.\\\\\nThen we have to fit our kernel. The method `KernelQuantifierRFF.fit` is used to store the RFF given a sigma and the number of RFF. If sigma is a range and not a float, then the method will compute the optimal sigma according to our theoretical criterion (see the article).\n\n```python\nquantifier = kq.KernelQuantifierRFF(kernel_type=\"gaussian\", seed=123)\nquantifier.fit(Source, sigma=[0.1, 2], verbose=True, number_rff=1000)\n```\n<img src=\"./tests/figures/choose_sigma.png\" width=\"100%\"/>\n\n```bash\nreturn : Sigma =  0.9530612244897959\n```\n\nWe now can quantify using the method `KernelQuantifierRFF.quantify`. This method take as argument the Source (as a LabelledCollection) and the Target. It returns the estimate proportion as an `numpy.array`. We print the estimated proportions `pi_hat` and the true proportions computed earlier `pi`. Finally we used `kernelquantifier.KL_divergence` to compute the KL divergence times 100 between the two vectors.\n\n```python\npi_hat = quantifier.quantify(Source, Target)\nprint(f\"pi_hat = {pi_hat} \\npi = {pi}\")\nprint(f\"Error = {kq.KL_divergence(pi_hat, pi)}\")\n```\n\noutputs:\n```bash\npi_hat = [0.36557279 0.31453992 0.31988729] \npi = [0.36       0.26666667 0.37333333]\nError = 0.8126347074855538\n```\n\n#### Without RandomFourierFeatures\n\nThe version without RFF is similar to the one with RFF.\\\\\nWe creat an instance of the class `kernelquantifier.KernelQuantifier`. Use the function `kernelquantifier.available_kernel` to see the list of currently available kernel without RFF. We then use the method `KernelQuantifier.fit` witout specifying the number of RFF.\n\n```python\nquantifier = kq.KernelQuantifier(kernel_type=\"gaussian\", seed=123)\nquantifier.fit(Source, sigma=[0.1, 2], verbose=True)\n```\n<img src=\"./tests/figures/choose_sigma_withoutrff.png\" width=\"100%\"/>\n\nWe then quantify using the method `KernelQuantifier.quantify` with the same arguments in input as before.\n\n```python\nassert isinstance(Source.data_,list)\npi_hat = quantifier.quantify(Source.data_, Target) # quantifier.quantify(Source, Target)\nprint(f\"pi_hat = {pi_hat} \\npi = {pi}\")\nprint(f\"Error = {kq.KL_divergence(pi_hat, pi)}\")\n```\n\noutputs:\n```bash\npi_hat = [0.36641991 0.3124038  0.32117629] \npi = [0.36       0.26666667 0.37333333]\nError = 0.759835032840004\n```\n\n### Generative KernelQuantifier\n\nGenerative KernelQuantifier was designed to deal with the Generalised Label Shift Hypothesis. This is not the case here. We don't need to use GKQuant. Nevertheless we will use it as an example.\\\\\nWe create an instance of class `kernelquantifier.GenerativeKernelQuantifier`. We specify the kernel_type (use `kernelquantifier.available_kernel_rff` to see the list of available kernel), and the generator type. Use `kernelquantifier.available_generator` to see the list of available generator.\\\\\nCurrently three: \n- sharelinear: $g_i(x) = Ax + b_i$\n- independantlinear $g_i(x) = A_i x + b_i$\n- translation $g_i(x) = x + b_i$\n$A \\text{and} A_i$ are diagonal matrix.\n\nWe fit the sameway we fitted the `kernelquantifier.KernelQuantifier`.\n\n```python\nquantifier = kq.GenerativeKernelQuantifier(\n    kernel_type=\"gaussian\", \n    generator_type=\"sharelinear\", \n    seed=123)\nquantifier.fit(Source, sigma=1., verbose=True, number_rff=1000)\n```\n\nThe method quantify has several parameters (see the pseudo-code in the article for more details and the docs).\n\n```python\nparameter = {\"n_epoch\": 20,\n             \"n_epochGM\": 10,\n             \"lr\": 0.001,\n             \"verbose\": True,\n             \"initial_prop\" : None}\n\npi_hat = quantifier.quantify(Source, Target, **parameter)\nprint(f\"pi_hat = {pi_hat} \\npi = {pi}\")\nprint(f\"Error = {kq.KL_divergence(pi_hat, pi)}\")\n```\n\noutputs:\n```bash\npi_hat = [0.35858863 0.30174921 0.33966216] \npi = [0.36       0.26666667 0.37333333]\nError = 0.3781702910014444\n``` \n\n\n## Contributing\nPull requests are welcome.\n\n## License\nKernelQuantifier is under the [MIT](https://choosealicense.com/licenses/mit/) licence. See the LICENCE file.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/bastiendussapapb/kernelquantifier",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kernelquantifier",
    "package_url": "https://pypi.org/project/kernelquantifier/",
    "platform": null,
    "project_url": "https://pypi.org/project/kernelquantifier/",
    "project_urls": {
      "Homepage": "https://gitlab.com/bastiendussapapb/kernelquantifier",
      "KernelQuantification pypi": "https://gitlab.com/bastiendussapapb/kernelquantifier"
    },
    "release_url": "https://pypi.org/project/kernelquantifier/0.0.2/",
    "requires_dist": [
      "torch",
      "numpy",
      "matplotlib",
      "cvxopt",
      "tqdm",
      "pykeops"
    ],
    "requires_python": "",
    "summary": "Quantification using Kernel Embedding and Random Fourier Features. On GPU and CPU.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14975771,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35b72c01e088fef28ee0f57c69d9237a5ff277b1aa8a059fa38dee9745b8db3d",
          "md5": "18921178688417ed31de4600181243cf",
          "sha256": "e7956302a5d3430afefd5dce1a5f55dbf88f7b4b1d1d795dbf0c965d7afb4b99"
        },
        "downloads": -1,
        "filename": "kernelquantifier-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18921178688417ed31de4600181243cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30410,
        "upload_time": "2022-09-02T15:04:48",
        "upload_time_iso_8601": "2022-09-02T15:04:48.518377Z",
        "url": "https://files.pythonhosted.org/packages/35/b7/2c01e088fef28ee0f57c69d9237a5ff277b1aa8a059fa38dee9745b8db3d/kernelquantifier-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f67c4df621e697139452716e8fd3f3d950611d9fff61488fc55f18c2aac4439",
          "md5": "7c6f430b68b717364626057a287a05c2",
          "sha256": "e7b0bee6ca9abc4a628cc7b891a382d07f92c0a05204ab95f776068dafcabced"
        },
        "downloads": -1,
        "filename": "kernelquantifier-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c6f430b68b717364626057a287a05c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 328456,
        "upload_time": "2022-09-02T15:04:51",
        "upload_time_iso_8601": "2022-09-02T15:04:51.525217Z",
        "url": "https://files.pythonhosted.org/packages/8f/67/c4df621e697139452716e8fd3f3d950611d9fff61488fc55f18c2aac4439/kernelquantifier-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5d7e0faee04db9bbc10aa6290e8dd580ec175d56a0696ef7b1e9303f38359d2",
          "md5": "cab6bf0dfdb04d8ebf1539e44650da5d",
          "sha256": "03c61e3fd2b67823874c5d55b9bf5ea2e71e99bb1d7ca0d88d576b7e8aaa0e5a"
        },
        "downloads": -1,
        "filename": "kernelquantifier-0.0.2.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "cab6bf0dfdb04d8ebf1539e44650da5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51659,
        "upload_time": "2022-09-02T15:24:43",
        "upload_time_iso_8601": "2022-09-02T15:24:43.129838Z",
        "url": "https://files.pythonhosted.org/packages/b5/d7/e0faee04db9bbc10aa6290e8dd580ec175d56a0696ef7b1e9303f38359d2/kernelquantifier-0.0.2.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c56fe3a85886bd665ca731a25d8539bad6d1884e4bb99a9e7068cccc5b5d728",
          "md5": "3a2233ff7d989eda06a0175bf83d9997",
          "sha256": "0dc141efda105b84da8e06a40cf3e3b4d4afe28e64060d36ede35bfe0f8a0fff"
        },
        "downloads": -1,
        "filename": "kernelquantifier-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a2233ff7d989eda06a0175bf83d9997",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30427,
        "upload_time": "2022-09-02T15:24:40",
        "upload_time_iso_8601": "2022-09-02T15:24:40.941750Z",
        "url": "https://files.pythonhosted.org/packages/3c/56/fe3a85886bd665ca731a25d8539bad6d1884e4bb99a9e7068cccc5b5d728/kernelquantifier-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5d7e0faee04db9bbc10aa6290e8dd580ec175d56a0696ef7b1e9303f38359d2",
        "md5": "cab6bf0dfdb04d8ebf1539e44650da5d",
        "sha256": "03c61e3fd2b67823874c5d55b9bf5ea2e71e99bb1d7ca0d88d576b7e8aaa0e5a"
      },
      "downloads": -1,
      "filename": "kernelquantifier-0.0.2.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "cab6bf0dfdb04d8ebf1539e44650da5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51659,
      "upload_time": "2022-09-02T15:24:43",
      "upload_time_iso_8601": "2022-09-02T15:24:43.129838Z",
      "url": "https://files.pythonhosted.org/packages/b5/d7/e0faee04db9bbc10aa6290e8dd580ec175d56a0696ef7b1e9303f38359d2/kernelquantifier-0.0.2.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c56fe3a85886bd665ca731a25d8539bad6d1884e4bb99a9e7068cccc5b5d728",
        "md5": "3a2233ff7d989eda06a0175bf83d9997",
        "sha256": "0dc141efda105b84da8e06a40cf3e3b4d4afe28e64060d36ede35bfe0f8a0fff"
      },
      "downloads": -1,
      "filename": "kernelquantifier-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a2233ff7d989eda06a0175bf83d9997",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30427,
      "upload_time": "2022-09-02T15:24:40",
      "upload_time_iso_8601": "2022-09-02T15:24:40.941750Z",
      "url": "https://files.pythonhosted.org/packages/3c/56/fe3a85886bd665ca731a25d8539bad6d1884e4bb99a9e7068cccc5b5d728/kernelquantifier-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}