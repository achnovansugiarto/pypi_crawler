{
  "info": {
    "author": "Giulio Cornelio Grossi, Ph.D.",
    "author_email": "giulio.cornelio.grossi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# google-vision-wrapper\nA Tiny Python Wrapper for Google Vision API.\n\n### _Introduction_\n\nGoogle Vision API is a service provided by Google Cloud, with the intent of giving to the vast public the possibility to access complex deep learning models, trained with huge datasets, without the inconvenience of collecting a proper dataset and training a model from scratch.\n\nAll pythonist computer vision ethusiasts (as I am), knows that there are computer vision libraries that comes already loaded with potent pre-trained models. An example is dlib with Haar Cascades, HOG for face recognition and Caffe models for object detection. But sometimes you need an API that is accessible from the web (i.e. if you want to deploy a web app or a lightweight service). Then you have two possibilities:\n\n1. You deploy this already trained model on a web app in the cloud, with the incovinence of hosting a potential huge model on physical space, paying a lot of attention to subtle cloud Pricing and billings. \n2. Rely on a third party service, already shipped with all you need, with less attention to costs since this kind of service is really cheap.\n\nFor some kind of projects I prefer relying on the second option. Google Vision API is a perfect solution in this context. There is a list of tasks that the API can accomplish on an image:\n\n- Optical character recognition\n- Detect crop hints\n- Detect faces\n- Detect image properties\n- Detect labels\n- Detect landmarks\n- Detect logos\n- Detect multiple objects\n- Detect explicit content\n- Detect web entities and pages\n\nFor more information I strongly suggest to read the [Google Official User Guide](https://cloud.google.com/vision/docs/how-to) to the API.\n\nEven if the guide is exhaustive and the API is straightforward to use, I found that it requires a bit of manipulation to setup and to retrieve the information from the server response in a useable way (a Pandas DataFrame or an array for plotting). This is why I started creating a wrapper around the API, that handles the request under-the-hood and which interface is more compact than the original one. \n\nI started for a small project of aesthetics medicine I'm working on and I though that maybe someone else could find it useful. I am therefore extending my original tiny class for face landmark recognition, with all the features provided by Google Vision API, with the possibility of retrieving the desired information in 3-lines code, in array format or as a Pandas DataFrame.\n\n### _Installation_\n- From Pypi:\n\n```\npip install google-vision-wrapper\n```\n\n- Cloning the Github repository:\n\n```\ngit clone https://github.com/gcgrossi/google-vision-wrapper\n```\n\n### _Before you start: Setup your GCP_\nBefore starting, it is mandatory to correctly setup a Google Cloud Project, authorise the Google Vision API and generate a .json API key file. Be sure to have fulfilled all the steps in the [Before you Begin Guide](https://cloud.google.com/vision/docs/before-you-begin) before moving on.\n\n### _Classes and Methods_\n\n***\n\n### 1. Class Initialization\n\n```python\nclass GVisionAPI():  \n  def __init__(self,keyfile=None):\n   '''\n   set credentials as environmental variable and \n   instantiate a Google ImageAnnotator Client\n   see https://cloud.google.com/vision/docs/before-you-begin\n   and https://cloud.google.com/vision/docs/detecting-faces \n   for more info\n   '''\n```\n\n#### _Description_:\nMain Class Constructor. set credentials as environmental variable and instantiate a Google ImageAnnotator Client. See [1](https://cloud.google.com/vision/docs/before-you-begin) and [2](https://cloud.google.com/vision/docs/detecting-faces) for more info.\n\n#### _Parameters_:\n- **keyfile**: path to the .json auth file returned by google vision API. Refer to [here](https://cloud.google.com/vision/docs/before-you-begin) to know how to get it\n\n#### _Usage_:\n```python\nfrom gvision import GVisionAPI\n\nauthfile = 'path_to_authfile'\ngvision = GVisionAPI(authfile)\n```\n\n***\n\n### 2. Perform a Request\n\n```python\ndef perform_request(self,img=None,request_type=None):\n    '''\n    given and imput image in either numpy array or bytes format\n    chek type and perform conversion nparray->bytes (if needed).\n    Provides the bytes content to the Google client and perform\n    an API request based on the \"request_type\" parameter.\n    Response can be accessed using the self.response attribute.\n\n    Parameters:\n    - img : input imange of type numpy.ndarray or bytes\n    - request_type : a string in ['face detection','landmark detection','logo detection',\n                                  'object detection','label detection','image properties',\n                                  'text detection','handwriting detection','web detection']\n      representing the type of request to perform\n    '''\n```\n#### _Description_:\nGiven and imput image in either numpy array or bytes format checks type and perform conversion nparray->bytes (if needed). Provides the bytes content to the Google client and performs an API request based on the \"request_type\" parameter. Response can be accessed using the ```self.response``` attribute. All the possible options can printed with the method ```request_options()``` and retrieved as a list from the ```request_types``` attribute.\n\n#### _Parameters_:\n- **img** : input imange of type numpy.ndarray or bytes\n- **request_type** : a string representing the type of request to perform. Possible values: ```['face detection','landmark detection','logo detection','object detection','label detection','image properties','text detection','handwriting detection','web detection']```.\n\n#### _Usage_:\n```python\nimport cv2\n\n# replace 'path_to_image' with what you want\nimg   = cv2.imread('path_to_image')\n\n#print the possible options via method\ngvision.request_options()\n# or via attribute\nprint(gvision.request_types)\n\n#perform request\ngvision.perform_request('face detection')\nprint(gvision.response)\n```\n\n***\n\n### 3. Obtain Data as list\n\n```python\n    def face_landmarks(self):\n        '''\n        Loop on the face annotations and, for each face,\n        append a 2-tuple list with (x,y) coordinates of detected points.\n        append also a list with the corresponding point names.\n        return the two lists created\n        '''\n\n    def head(self):\n        '''\n        Loop on the face annotations and, for each face,\n        append a 2-tuple list with (x,y) coordinates of head bounding box.\n        append also a list with the corresponding point names.\n        return the two lists created\n        '''\n\n    def face(self):\n        '''\n        Loop on the face annotations and, for each face,\n        append a 2-tuple list with (x,y) coordinates of face bounding box.\n        append also a list with the corresponding point names.\n        return the two lists created\n        '''\n\n    def angles(self):\n        '''\n        Loops on the face annotations and, for each face,\n        appends a list with the rotation angles on the 3 axis.\n        appends also a list with the corresponding angle names.\n        return the two lists created\n        '''     \n\n    def objects(self):\n        '''\n        Loops on the detected objects. For each,\n        appends a list with name, confidence and\n        (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def colors(self):\n        '''\n        Loops on the detected colors. For each,\n        appends a list with: \n        - (r,g,b) 3-tuple with values of the color channels.\n        - pixel fraction.\n        - score\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def crop_hints(self):\n        '''\n        Loops on the crop_hints. For each,\n        appends a list with: \n        - (x,y) 2-tuple with coordinates of the cropped image.\n        - confidence.\n        - importance fraction.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def logos(self):\n        '''\n        Loops on the detected logos. For each,\n        appends a list with name, confidence and\n        (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def texts(self):\n        '''\n        Loops on the detected texts. For each,\n        appends a list with description, language and\n        (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def pages(self):\n        '''\n        Loops on the detected pages. For each,\n        appends a list with language, confidence, \n        height and width.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        ''' \n\n    def blocks(self):\n        '''\n        Loops on the blocks in the detected pages. For each,\n        appends a list with description, language, confidence, block type \n        and (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def paragraphs(self):\n        '''\n        Loops on the paragraphs in the blocks in the detected pages. For each,\n        appends a list with description, language, confidence\n        and (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def words(self):\n        '''\n        Loops on the words in the paragraphs \n        in the blocks in the detected pages. For each,\n        appends a list with language\n        and (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def symbols(self):\n        '''\n        Loops on the symbols in the words, in the paragraphs,\n        in the blocks, in the detected pages. For each,\n        appends a list with text, language\n        and (x,y) 2-tuples with the bounding box coordinates.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def landmarks(self):\n        '''\n        Loops on the detected landmarks. For each,\n        appends a list with: \n        - name\n        - confidence\n        - (x,y) 2-tuples with coordinates of the bounding box\n        - 2-tuple with latitude and logitude.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def labels(self):\n        '''\n        Loops on the detected labels. For each,\n        appends a list with name, \n        confidence and topicality.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def web_entities(self):\n        '''\n        Loops on the detected web entities. For each,\n        appends a list with description and score.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def matching_images(self):\n        '''\n        Loops on the detected pages with matching images. \n        For each, appends a list with the page title and url,\n        plus the fully or partially matched images found (url).\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n    def similar_images(self):\n        '''\n        Loops on the suggested similar images. For each,\n        appends a list with the url of that image.\n        Appends also a list with the corresponding headers.\n        Returns the two lists created.\n        '''\n\n```\n#### _Description_:\nResponse data in form of list. For more detailed information regarding the headers meaning or type of information please refer to the corresponding guides:\n- [face detection](https://cloud.google.com/vision/docs/detecting-faces)\n- [object detection](https://cloud.google.com/vision/docs/object-localizer)\n- [landmarks detection](https://cloud.google.com/vision/docs/detecting-landmarks)\n- [logo detection](https://cloud.google.com/vision/docs/detecting-logos)\n- [label detection](https://cloud.google.com/vision/docs/labels)\n- [image properties](https://cloud.google.com/vision/docs/detecting-properties)\n- [text in images detection](https://cloud.google.com/vision/docs/ocr)\n- [web entities](https://cloud.google.com/vision/docs/detecting-web)\n\n**N.B.**: to each request type correspond different information that can be retrieved. I.e. ```gvision.perform_request('face detection')``` must me used to retrieve ```face_landmarks, face, head, angles``` information. If another type of request has been performed the API will throw a \"key\" error. Refere to the section _Usage_ below for a full explanation.\n\n#### _Return types_:\n- **headers** : list. \n- **data** : list\n\n#### _Usage_:\n```python\n\n# to each type of request corresponds \n# different information that can be retrieved\n\ngvision.perform_request('face detection')\nheaders,   data   = gvision.face_landmarks()\nh_headers, h_data = gvision.head()\nf_headers, f_data = gvision.face()\na_headers, a_data = gvision.angles()\n\ngvision.perform_request('object detection')\nheaders, data = gvision.objects()\n\ngvision.perform_request('landmark detection')\nheaders, data = gvision.landmarks()\n\ngvision.perform_request('label detection')\nheaders, data = gvision.labels()\n\ngvision.perform_request('logo detection')\nheaders, data = gvision.logos()\n\ngvision.perform_request('text detection')\n# work also with:\n#gvision.perform_request('handwriting detection')\n\nheaders,    data    = gvision.texts()\np_headers,  p_data  = gvision.pages()\nb_headers,  b_data  = gvision.blocks()\npr_headers, pr_data = gvision.paragraphs()\nw_headers,  w_data  = gvision.words()\ns_headers,  s_data  = gvision.symbols()\n\ngvision.perform_request('image properties')\nheaders,    data    = gvision.colors()\nch_headers, ch_data = gvision.crop_hints()\n\ngvision.perform_request('web detection')\nheaders,   data   = gvision.web_entities()\nm_headers, m_data = gvision.matching_images()\ns_headers, s_data = gvision.similar_images()\n\n```\n\n***\n\n### 4. Obtain Data as a Pandas DataFrame\n\n```python\ndef to_df(self,option=None,name='image'):\n    '''\n    Parameters:\n    - option: a string in ['face landmarks','face','head','angles',\n                          'objects','landmarks','logos','labels',\n                          'colors', 'crop hints','texts','pages',\n                          'blocks','paragraphs','words','symbols',\n                          'web entitites','matching images',\n                          'similar images']\n      precifing the type of information to dump in the DataFrame\n    - name: (optional) the name of the image used in the request. \n      default is 'image'.\n\n    Returns:\n    a DataFrame with information for the specific option.\n    '''\n```\n#### _Description_:\nDump the information specific to the  ```option``` parameter into a pandas DataFrame.\n\n**N.B.**: Each option retrieves information via the output lists of the functions defined in Section 3. The same rule regarding the type of request and the information available is applicable to this method. \n\n#### _Parameters_:\n- **option** : a string representing the type of information to retrieve. Possible values: ```['face landmarks','face','head','angles','objects','landmarks','logos','labels','colors', 'crop hints','texts','pages','blocks','paragraphs','words','symbols','web entitites','matching images','similar images']```. All the possible options can printed with the method ```df_options()``` and retrieved as a list from the ```df_types``` attribute.\n- **name** : a value representing the name or the id of the processed image that will be appended to each row of the returned DataFrame.\n\n#### _Usage_:\n```python\n#print the possible options via method\ngvision.df_options()\n# or via attribute\nprint(gvision.df_types)\n\n# dump to DataFrame\ngvision.perform_request('object detection')\ndf = gvision.to_df('objects')\n```\n\n***\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gcgrossi/google-vision-wrapper",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "google-vision-wrapper",
    "package_url": "https://pypi.org/project/google-vision-wrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/google-vision-wrapper/",
    "project_urls": {
      "Homepage": "https://github.com/gcgrossi/google-vision-wrapper"
    },
    "release_url": "https://pypi.org/project/google-vision-wrapper/0.0.2/",
    "requires_dist": [
      "google-cloud-vision (>2)",
      "opencv-python",
      "pandas",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Tiny Python wrapper for Google Vision API. Query google vision API and obtain information in pandas DataFrame in few lines of code.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11099403,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a51bb68eaa6fc9366ac7a36091d1e6d79724d2ee0122e57d1fc8316c32c9302b",
          "md5": "c2a353128d4b37c9bfb92aa4c10fb684",
          "sha256": "b9654e05588870ff735edbeb44c3882ac30f666c6677e3fefa5ace874696b5ec"
        },
        "downloads": -1,
        "filename": "google_vision_wrapper-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2a353128d4b37c9bfb92aa4c10fb684",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11330,
        "upload_time": "2021-08-05T12:00:28",
        "upload_time_iso_8601": "2021-08-05T12:00:28.524769Z",
        "url": "https://files.pythonhosted.org/packages/a5/1b/b68eaa6fc9366ac7a36091d1e6d79724d2ee0122e57d1fc8316c32c9302b/google_vision_wrapper-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7959e8fd84176fbf7e939ac0af4e9ff47f773c04967234bd2fd4e62f931c34d0",
          "md5": "cc488356eb6f450f41ecf864758db4c9",
          "sha256": "cea958271a3861acd58f4cd37594f637a95e96bb38d2a5ff6806d9a152786182"
        },
        "downloads": -1,
        "filename": "google-vision-wrapper-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc488356eb6f450f41ecf864758db4c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12109,
        "upload_time": "2021-08-05T12:00:30",
        "upload_time_iso_8601": "2021-08-05T12:00:30.297286Z",
        "url": "https://files.pythonhosted.org/packages/79/59/e8fd84176fbf7e939ac0af4e9ff47f773c04967234bd2fd4e62f931c34d0/google-vision-wrapper-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a51bb68eaa6fc9366ac7a36091d1e6d79724d2ee0122e57d1fc8316c32c9302b",
        "md5": "c2a353128d4b37c9bfb92aa4c10fb684",
        "sha256": "b9654e05588870ff735edbeb44c3882ac30f666c6677e3fefa5ace874696b5ec"
      },
      "downloads": -1,
      "filename": "google_vision_wrapper-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c2a353128d4b37c9bfb92aa4c10fb684",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11330,
      "upload_time": "2021-08-05T12:00:28",
      "upload_time_iso_8601": "2021-08-05T12:00:28.524769Z",
      "url": "https://files.pythonhosted.org/packages/a5/1b/b68eaa6fc9366ac7a36091d1e6d79724d2ee0122e57d1fc8316c32c9302b/google_vision_wrapper-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7959e8fd84176fbf7e939ac0af4e9ff47f773c04967234bd2fd4e62f931c34d0",
        "md5": "cc488356eb6f450f41ecf864758db4c9",
        "sha256": "cea958271a3861acd58f4cd37594f637a95e96bb38d2a5ff6806d9a152786182"
      },
      "downloads": -1,
      "filename": "google-vision-wrapper-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cc488356eb6f450f41ecf864758db4c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12109,
      "upload_time": "2021-08-05T12:00:30",
      "upload_time_iso_8601": "2021-08-05T12:00:30.297286Z",
      "url": "https://files.pythonhosted.org/packages/79/59/e8fd84176fbf7e939ac0af4e9ff47f773c04967234bd2fd4e62f931c34d0/google-vision-wrapper-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}