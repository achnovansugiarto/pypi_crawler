{
  "info": {
    "author": "Vladimir Khramov",
    "author_email": "hr.vlad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=================\ndjango-cryptocoin\n=================\n\nDjango-cryptocoin is a Django app to organize accepting bitcoin, litecoin, novacoin and other cryptocoins, which support JSON-RPC commands getnewaddress and getreceivedbyaddress.\n\nQuick Start\n===========\n\n1. Install using pip `pip install django-cryptocoin`\n\n2. Add `'django-cryptocoin',` to INSTALLED_APPS in your `settings.py`\n\n3. Run `python manage.py migrate`\n\n4. Set settings similarly as https://github.com/quantum13/django-crypto-paid-chat/blob/master/cryptochat/settings_local.py-example\n\n5. Add command `python manage.py check_incomings` to cron with interval 1 minute\n\n6. Add relation to CryptoOrder to your order model::\n\n    crypto_order = models.OneToOneField(CryptoOrder, related_name='order')\n\n7. Add handler to payment end signal (delivery digital content, sending email, etc)::\n\n    @receiver(after_pay_confirmation)\n    def after_pay(sender, **kwargs):\n        pass\n\n8. After sending form with order we need create instance of CryptoOrder and redirect to process view. Example::\n\n        if form.is_valid():\n            crypto_order = CryptoOrder(\n                currency='btc',\n                amount=0.1,#price\n                date=timezone.now(),#time of invoice\n                redirect_to=reverse('home')#view to redirect after payment\n            )\n            crypto_order.save()\n            form.instance.crypto_order = crypto_order\n            form.save()\n            return redirect('cryptocoin-order-process', addr=crypto_order.addr)\n\nAfter confirmation of transaction sended signal `after_pay_confirmation` which handler described above.\n\nExample\n=======\n\nhttps://github.com/quantum13/django-crypto-paid-chat\n\nTested cryptocoins\n==================\n\n- Bitcoin\n- Litecoin\n- Novacoin\n- Emercoin\n\nOptions\n=======\n\nCRYPTO_COINS\n------------\nDict with supported crypto currencies. Default::\n\n    {\n        'btc': 'Bitcoin',\n        'ltc': 'Litecoin',\n        'nvc': 'Novacoin',\n    }\n\nCONNECTION_STRING\n-----------------\nConnection strings for JSON-RPC commands to coin clients. Default::\n\n    {\n        'btc': 'your_bitcoin_addr_to_send_btc',\n        'ltc': 'your_litecoin_addr_to_send_ltc',\n        'nvc': 'your_novacoin_addr_to_send_nvc',\n    }\n\nCONFIRMATIONS\n-------------\nNetwork confirmations count for each crypto currency. Default::\n\n    {\n        'btc': 1,\n        'ltc': 1,\n        'nvc': 1,\n    }\n\nPROCESS_TEMPLATE\n----------------\nTemplate for process view. You can use own site template for this page. For example if you have base template `base.html` with block `content` you can create `process.html` in your template folder and paste this code::\n\n    {% extends 'base.html' %}\n\n    {% block content %}\n        {% include 'django_cryptocoin/process.html' %}\n    {% endblock %}\n\nINVOICE_TIME\n------------\nHow many seconds app will wait for payment. If you set big value, exchange rate to USD can change significantly. Default `900` seconds/\n\nGENERATED_ADDRESSES_ACCOUNT\n---------------------------\nAccount for generated addresses in your wallet. Default `django_cryptocoin`.\n\nCURRENCY_PAIRS\n--------------\nCurrency pairs for which will retrieved exchange rates from btc-e.com. To retrieve this rates run command `python manage.py get_exchange_rates`. Than you can get this rates with function `ExchangeRate.get_exchange_rate(from_currency, to_currency)`. Default::\n\n    ['btc_usd', 'btc_rur', 'btc_eur', 'ltc_usd', 'ltc_rur', 'nvc_usd']\n\n\n\nDonate\n======\n\n- BTC: 1JrV8GW9HWRHWvJNQ14fExAkfgxawAY4oq\n- LTC: LiHkeymborDtpqUh3ExYT9CXJkyucDH4Cc\n- NVC: 4U5F4GQin6QkTpbd5k9si3f4iSkn2o3v9x",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/quantum13/django-cryptocoin",
    "keywords": null,
    "license": "BSD (3-Clause) License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cryptocoin",
    "package_url": "https://pypi.org/project/django-cryptocoin/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cryptocoin/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/quantum13/django-cryptocoin"
    },
    "release_url": "https://pypi.org/project/django-cryptocoin/0.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django app to organize accepting bitcoin, litecoin, novacoin and other cryptocoins.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 965249,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "701bc5523fb2cc8d85ff3e8143bb08b477b67c313978acf91dd045500115868d",
          "md5": "cdaa703cfe0e61f6ca186606a0800444",
          "sha256": "d5ed7b77caafa426926c4b50456c210f90537babd243c348074e3675c14dfd2c"
        },
        "downloads": -1,
        "filename": "django-cryptocoin-0.1.zip",
        "has_sig": false,
        "md5_digest": "cdaa703cfe0e61f6ca186606a0800444",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13825,
        "upload_time": "2014-01-09T05:32:55",
        "upload_time_iso_8601": "2014-01-09T05:32:55.036163Z",
        "url": "https://files.pythonhosted.org/packages/70/1b/c5523fb2cc8d85ff3e8143bb08b477b67c313978acf91dd045500115868d/django-cryptocoin-0.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f6e4bbcd2d2b0f15242527a59052b183f48491f463188eee7f5d8d06099b818",
          "md5": "25f92fc5cbe7e2fe9427bc6613e6f272",
          "sha256": "a26f92785d6e6daa3d2b05b8e36daf3878fcd34c75a32c1cdb595a9881f01c54"
        },
        "downloads": -1,
        "filename": "django-cryptocoin-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "25f92fc5cbe7e2fe9427bc6613e6f272",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16328,
        "upload_time": "2014-01-09T07:03:18",
        "upload_time_iso_8601": "2014-01-09T07:03:18.620011Z",
        "url": "https://files.pythonhosted.org/packages/7f/6e/4bbcd2d2b0f15242527a59052b183f48491f463188eee7f5d8d06099b818/django-cryptocoin-0.1.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f6e4bbcd2d2b0f15242527a59052b183f48491f463188eee7f5d8d06099b818",
        "md5": "25f92fc5cbe7e2fe9427bc6613e6f272",
        "sha256": "a26f92785d6e6daa3d2b05b8e36daf3878fcd34c75a32c1cdb595a9881f01c54"
      },
      "downloads": -1,
      "filename": "django-cryptocoin-0.1.1.zip",
      "has_sig": false,
      "md5_digest": "25f92fc5cbe7e2fe9427bc6613e6f272",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16328,
      "upload_time": "2014-01-09T07:03:18",
      "upload_time_iso_8601": "2014-01-09T07:03:18.620011Z",
      "url": "https://files.pythonhosted.org/packages/7f/6e/4bbcd2d2b0f15242527a59052b183f48491f463188eee7f5d8d06099b818/django-cryptocoin-0.1.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}