{
  "info": {
    "author": "Michael Boulton",
    "author_email": "boulton@zoetrope.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "Tavern-Extended\n==================\nThis is Tavern fork which includes features which are not (yet?) present in the original project.\n\n\n\n.. image:: https://travis-ci.org/taverntesting/tavern.svg?branch=master\n    :target: https://travis-ci.org/taverntesting/tavern\n\n.. image:: https://img.shields.io/pypi/v/tavern.svg\n    :target: https://pypi.org/project/tavern/\n\nEasier API testing\n==================\n\nTavern is a pytest plugin, command-line tool and Python library for\nautomated testing of APIs, with a simple, concise and flexible\nYAML-based syntax. It's very simple to get started, and highly\ncustomisable for complex tests. Tavern supports testing RESTful APIs as\nwell as MQTT based APIs.\n\nThe best way to use Tavern is with\n`pytest <https://docs.pytest.org/en/latest/>`__. Tavern comes with a\npytest plugin so that literally all you have to do is install pytest and\nTavern, write your tests in ``.tavern.yaml`` files and run pytest. This\nmeans you get access to all of the pytest ecosystem and allows you to do\nall sorts of things like regularly run your tests against a test server\nand report failures or generate HTML reports.\n\nYou can also integrate Tavern into your own test framework or continuous\nintegration setup using the Python library, or use the command line\ntool, ``tavern-ci`` with bash scripts and cron jobs.\n\nTo learn more, check out the `examples <https://taverntesting.github.io/examples>`__ or the complete\n`documentation <https://taverntesting.github.io/documentation>`__. If you're interested in contributing\nto the project take a look at the `GitHub\nrepo <https://github.com/taverntesting/tavern>`__.\n\nQuickstart\n----------\n\nFirst, let's create a basic test, ``test_minimal.tavern.yaml``:\n\n.. code:: yaml\n\n    ---\n    # Every test file has one or more tests...\n    test_name: Get some fake data from the JSON placeholder API\n\n    # ...and each test has one or more stages (e.g. an HTTP request)\n    stages:\n      - name: Make sure we have the right ID\n\n        # Define the request to be made...\n        request:\n          url: https://jsonplaceholder.typicode.com/posts/1\n          method: GET\n\n        # ...and the expected response code and body\n        response:\n          status_code: 200\n          body:\n            id: 1\n\nThis file can have any name, but if you intend to use Pytest with\nTavern, it will only pick up files called ``test_*.tavern.yaml``.\n\nThis can then be run like so:\n\n.. code:: bash\n\n    $ pip install tavern[pytest]\n    $ py.test test_minimal.tavern.yaml  -v\n    =================================== test session starts ===================================\n    platform linux -- Python 3.5.2, pytest-3.4.2, py-1.5.2, pluggy-0.6.0 -- /home/taverntester/.virtualenvs/tavernexample/bin/python3\n    cachedir: .pytest_cache\n    rootdir: /home/taverntester/myproject, inifile:\n    plugins: tavern-0.7.2\n    collected 1 item\n\n    test_minimal.tavern.yaml::Get some fake data from the JSON placeholder API PASSED   [100%]\n\n    ================================ 1 passed in 0.14 seconds =================================\n\nIt is strongly advised that you use Tavern with Pytest - not only does\nit have a lot of utility to control discovery and execution of tests,\nthere are a huge amount of plugins to improve your development\nexperience. If you absolutely can't use Pytest for some reason, use the\n``tavern-ci`` command line interface:\n\n.. code:: bash\n\n    $ pip install tavern\n    $ tavern-ci --stdout test_minimal.tavern.yaml\n    2017-11-08 16:17:00,152 [INFO]: (tavern.core:55) Running test : Get some fake data from the JSON placeholder API\n    2017-11-08 16:17:00,153 [INFO]: (tavern.core:69) Running stage : Make sure we have the right ID\n    2017-11-08 16:17:00,239 [INFO]: (tavern.core:73) Response: '<Response [200]>' ({\n      \"userId\": 1,\n      \"id\": 1,\n      \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n      \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n    })\n    2017-11-08 16:17:00,239 [INFO]: (tavern.printer:9) PASSED: Make sure we have the right ID [200]\n\nWhy not Postman, Insomnia or pyresttest etc?\n--------------------------------------------\n\nTavern is a focused tool which does one thing well: automated testing of\nAPIs.\n\n**Postman** and **Insomnia** are excellent tools which cover a wide\nrange of use-cases for RESTful APIs, and indeed we use Tavern alongside\nPostman. However, specifically with regards to automated testing, Tavern\nhas several advantages over Postman: - A full-featured Python\nenvironment for writing easily reusable custom validation functions -\nTesting of MQTT based systems in tandem with RESTful APIS. - Seamless\nintegration with pytest to keep all your tests in one place - A simpler,\nless verbose and clearer testing language\n\nTavern does not do many of the things Postman and Insomnia do. For\nexample, Tavern does not have a GUI nor does it do API monitoring or\nmock servers. On the other hand, Tavern is free and open-source and is a\nmore powerful tool for developers to automate tests.\n\n**pyresttest** is a similar tool to Tavern for testing RESTful APIs, but\nis no longer actively developed. On top of MQTT testing, Tavern has\nseveral other advantages over PyRestTest which overall add up to a\nbetter developer experience:\n\n-  Cleaner test syntax which is more intuitive, especially for\n   non-developers\n-  Validation function are more flexible and easier to use\n-  Better explanations of why a test failed\n\nHacking on Tavern\n-----------------\n\nIf you want to add a feature to Tavern or just play around with it\nlocally, it's a good plan to first create a local development\nenvironment (`this\npage <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`__ has a\ngood primer for working with development environments with Python).\nAfter you've created your development environment, just\n``pip install tox`` and run ``tox`` to run the unit tests. If you want\nto run the integration tests, make sure you have\n`docker <https://www.docker.com/>`__ installed and run\n``tox -c tox-integraton.ini`` (bear in mind this might take a while.)\nIt's that simple!\n\nIf you want to add a feature to get merged back into mainline Tavern: -\nAdd the feature you want - Add some tests for your feature: - If you are\nadding some utility functionality such as improving verification of\nresponses, adding some unit tests might be best. These are in the\n``tests/unit/`` folder and are written using Pytest. - If you are adding\nmore advanced functionality like extra validation functions, or some\nfunctionality that directly depends on the format of the input YAML, it\nmight also be useful to add some integration tests. At the time of\nwriting, this is done by adding an example flask endpoint in\n``tests/integration/server.py`` and a corresponding Tavern YAML test\nfile in the same directory. This will be cleaned up a bit once we have a\nproper plugin system implemented. - Open a `pull\nrequest <https://github.com/taverntesting/tavern/pulls>`__.\n\nNote that Tavern supports Python 2.7 (for the time being), so any code\nyou add has to be compatible with it. We currently use the\n`future <https://pypi.python.org/pypi/future>`__ library to provide\nbackwards compatibility.\n\nAcknowledgements\n----------------\n\nTavern makes use of several excellent open-source projects:\n\n-  `pytest <https://docs.pytest.org/en/latest/>`__, the testing\n   framework Tavern intergrates with\n-  `requests <http://docs.python-requests.org/en/master/>`__, for HTTP\n   requests\n-  `YAML <http://yaml.org/>`__ and\n   `pyyaml <https://github.com/yaml/pyyaml>`__, for the test syntax\n-  `pykwalify <https://github.com/Grokzen/pykwalify>`__, for YAML schema\n   validation\n-  `pyjwt <https://github.com/jpadilla/pyjwt>`__, for decoding JSON Web\n   Tokens\n-  `colorlog <https://github.com/borntyping/python-colorlog>`__, for\n   formatting terminal outputs\n-  `paho-mqtt <https://github.com/eclipse/paho.mqtt.python>`__, for\n   sending MQTT messages\n\nDeveloped and maintained by `Overlock <https://overlock.io>`__\n--------------------------------------------------------------\n\nOverlock helps developers quickly find and fix bugs in distributed\nsystems such as IoT deployments by gathering together exception\ninformation from end devices, gateways or servers. We're currently in\nbeta - find out more at `overlock.io <https://overlock.io>`__",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://taverntesting.github.io/",
    "keywords": "testing,pytest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tavern-extended",
    "package_url": "https://pypi.org/project/tavern-extended/",
    "platform": "",
    "project_url": "https://pypi.org/project/tavern-extended/",
    "project_urls": {
      "Homepage": "https://taverntesting.github.io/"
    },
    "release_url": "https://pypi.org/project/tavern-extended/0.9.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple testing of RESTful APIs",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3985399,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76cd88e10caaf83e98315d7bde6ccb2ad5c7e1fd7d15a54c69aa95827757a8d0",
          "md5": "d43df63c9aeed4fd1990cf41a6c74ea1",
          "sha256": "eca84cb3d27678899c7748c28470197c911ae42b06fba10a797596743e04a6f9"
        },
        "downloads": -1,
        "filename": "tavern-extended-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d43df63c9aeed4fd1990cf41a6c74ea1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34006,
        "upload_time": "2018-06-21T11:50:19",
        "upload_time_iso_8601": "2018-06-21T11:50:19.513807Z",
        "url": "https://files.pythonhosted.org/packages/76/cd/88e10caaf83e98315d7bde6ccb2ad5c7e1fd7d15a54c69aa95827757a8d0/tavern-extended-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76cd88e10caaf83e98315d7bde6ccb2ad5c7e1fd7d15a54c69aa95827757a8d0",
        "md5": "d43df63c9aeed4fd1990cf41a6c74ea1",
        "sha256": "eca84cb3d27678899c7748c28470197c911ae42b06fba10a797596743e04a6f9"
      },
      "downloads": -1,
      "filename": "tavern-extended-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d43df63c9aeed4fd1990cf41a6c74ea1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34006,
      "upload_time": "2018-06-21T11:50:19",
      "upload_time_iso_8601": "2018-06-21T11:50:19.513807Z",
      "url": "https://files.pythonhosted.org/packages/76/cd/88e10caaf83e98315d7bde6ccb2ad5c7e1fd7d15a54c69aa95827757a8d0/tavern-extended-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}