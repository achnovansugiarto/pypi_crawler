{
  "info": {
    "author": "Intellivoid Technologies",
    "author_email": "nocturn9x@intellivoid.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# OpenBlu-Python-Wrapper\n\nOfficial Python wrapper around OpenBlu API\n\n\n# Overview\n\nThis wrapper can be used to fetch servers from the OpenBlu API and retrieve their OpenVPN configuration.\n\nTo make things easy, the library abstracts the JSON responses from the API inside three objects:\n\n- `Server` -> Contains more detailed information from the server as described in [OpenBlu's Documentation](https://docs.intellivoid.net/openblu/v1/get_server)\n- `ServerListing` -> Contains metadata from a server such as ping, country and location\n- `OpenVPN` -> Contained inside a `Server` object, stores the OpenVPN configuratiom for the server\n\n\nThe `ServerListing` and `Server` objects can be printed to get an overview of the server's information.\n\n\n## Installation\n\nTo install this wrapper, simply clone this repo with `git clone`, then run `python3 setup.py install`\n\n\n## Usage\n\n### Fetch multiple servers\n\nTo fetch multiple servers, without their OpenVPN configuration, you can use the `list_servers()` method of the `openblu.OpenBluAPI` class like shown below\n\n```python\n\nfrom openblu import OpenBluAPI\n\napi = OpenBluAPI('access_key')  # Get your access key at openblu.intellivoid.net\n\nservers = api.list_servers(filter_by=(\"germany\", \"country\"))\n```\n\nBelow the full documentation for the `list_servers` method in Sphinx format\n\n```\nFetches OpenVPN servers from the OpenBlu API\n\n:param filter_by: If not ``None``, filter the results by the given parameter. It must be a tuple containing a country name and either one of these strings (In this order): \"country\", \"country_short\". If \"country_short\" is the second element of the tuple, the country name must be the short form of its name (e.g. 'de' for germany or 'jp' for Japan) otherwise, the full extended form is required. Defaults to ``None``\n:type filter_by: tuple, None, optional\n:param order_by: If not ``None``, order the results by this order. It can either be ``'ascending'`` or ``'descending'``, defaults to ``None``.\n:type order_by: str, None, optional\n:param sort_by: Sorts the list by the given condition, defaults to ``None`` (no sorting). Possible choices are \"score\", \"ping\", \"sessions\", \"total_sessions\", \"last_updated\" and \"created\"\n:type sort_by: str, None, optional\n:param verbose: If ``True``, make the output verbose, default to ``False``\n:type verbose: bool, optional\n:returns servers_list: A list of class:ServerListing objects\n:rtype servers_list: list\n:raises OpenBluError: An proper subclass of OpenBluError is raised if something goes wrong. If the error cannot be determined, a generic OpenBluError is raised\n```\n\n\n### Get a single server\n\nAs described in OpenBlu's documentation, servers can be identified by a unique ID. That ID can be used to fetch a more detailed server object containing the OpenVPN server configuration from the OpenBlu API as shown below.\nThis server object also contains the server's IP address\n\n```python\n\nfrom openblu import OpenBluAPI\n\napi = OpenBluAPI('access_key')  # Get your access key at openblu.intellivoid.net\n\nservers = api.list_servers(filter_by=(\"germany\", \"country\"))\n\nserver = servers[0]    # Take the first entry\n\nsrv = api.get_server(server.id)   # Retrieve the server's configuration\n```\n\nBelow the full documentation for the `get_server` method in Sphinx format\n\n```\n\nFetches a single OpenVPN server from the OpenBlu API, given its unique ID\n\n:param uuid: The unique ID of the desired server\n:type uuid: string\n:param verbose: If ``True``, make output verbose, default to ``False``\n:type verbose: bool, optional\n:returns: A class:Server object\n:rtype: class: Server\n:raises OpenBluError: An proper subclass of OpenBluError is raised if something goes wrong. If the error cannot be determined, a generic OpenBluError is raised\n```\n\nFor more examples and a deeper description check the `examples.py` file in this repo\n\n## Objects' overview\n\nHere are some example objects to get you started straight away\n\n__Note__: All objects, when printed out, show all the information inside the object itself (including `None` values and such)\n\n\n### ServerListing\n\nWhen printed out, a `ServerListing` object should look like the following, although the corresponding parameters may differ.\n\n```\nServerListing(\nid=dbd24ff8e4802f22,\nhost_name=vpn774575625,\ncountry=Germany,\ncountry_short=DE,\nscore=366198,\nping=28,\nsessions=66,\ntotal_sessions=30926,\nlast_updated=1576539451,\ncreated=1576529629)\n```\n\n### Server\n\nThe server object has a similar output to the `ServerListing`, but (of course) it contains different and more descriptive information about a single server.\n\n```\nServer(\nid=dbd24ff8e4802f22,\nhost_name=vpn774575625,\ncountry=Germany,\ncountry_short=DE,\nscore=366198,\nping=28,\nsessions=66,\ntotal_sessions=30926,\nip_address=78.54.226.91,\nopenvpn=<OpenVPN object at 0x7b2b706f10>,\nlast_updated=1576539451,\ncreated=1576529629)\n```\n\n### OpenVPN objects\n\nOpenVPN objects' output is much less verbose, because printing all of the object's parameters would literally need pages of output, their attributes are still accessible both via dot notation and via dict-like accessing.\n\nFor the sake of completeness, all the object's parameters are listed here; to get detailed info about their meaning refer to [OpenBlu's official docs](https://docs.intellivoid.net/openblu/v1)\n\n```\n- parameters\n- certificate_authority\n- certificate_authority_b64\n- certificate\n- certificate_b64\n- key\n- key_b64\n- ovpn_configuration\n```\n\n## Exceptions\n\nThe wrapper implements 3 exceptions:\n- `OpenBluError` -> Generic parent class for all exceptions, also raised when an error other than 401 and 404 is returned by the API\n- `ServerNotFound` -> When an invalid server ID is provided to the API\n- `UnauthorizedAccess` -> When an invalid access key is provided to the API\n\nOther errors, such as JSON decoding errors or HTTP failures, are not catched and must be handled by the end user itself.\n\n### Last, but not least\n\nAll objects objects support dict-like accessing as well as dot notation, which means that doing `server[\"id\"]` or `server.id` yields the same result.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/intellivoid/OpenBlu-Python-Wrapper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openblu",
    "package_url": "https://pypi.org/project/openblu/",
    "platform": "",
    "project_url": "https://pypi.org/project/openblu/",
    "project_urls": {
      "Homepage": "https://github.com/intellivoid/OpenBlu-Python-Wrapper"
    },
    "release_url": "https://pypi.org/project/openblu/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Official Python 3 wrapper around the OpenBlu API",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7258183,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5914133ae76641371d50159ad52524fc2f178622ede193e29c10771505033a52",
          "md5": "01b5b59b8026dbb89c8592d887c3d20f",
          "sha256": "80c623d7664992a0009dfa8936d981c5fe7eb667eae836fc7da7059ce3b65e0b"
        },
        "downloads": -1,
        "filename": "openblu-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01b5b59b8026dbb89c8592d887c3d20f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5519,
        "upload_time": "2020-05-16T22:25:07",
        "upload_time_iso_8601": "2020-05-16T22:25:07.580132Z",
        "url": "https://files.pythonhosted.org/packages/59/14/133ae76641371d50159ad52524fc2f178622ede193e29c10771505033a52/openblu-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5914133ae76641371d50159ad52524fc2f178622ede193e29c10771505033a52",
        "md5": "01b5b59b8026dbb89c8592d887c3d20f",
        "sha256": "80c623d7664992a0009dfa8936d981c5fe7eb667eae836fc7da7059ce3b65e0b"
      },
      "downloads": -1,
      "filename": "openblu-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "01b5b59b8026dbb89c8592d887c3d20f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5519,
      "upload_time": "2020-05-16T22:25:07",
      "upload_time_iso_8601": "2020-05-16T22:25:07.580132Z",
      "url": "https://files.pythonhosted.org/packages/59/14/133ae76641371d50159ad52524fc2f178622ede193e29c10771505033a52/openblu-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}