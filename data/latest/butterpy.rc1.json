{
  "info": {
    "author": "Zachary R. Claytor <zclaytor@hawaii.edu> and Miles Lucas <mdlucas@hawaii.edu>",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "# Butterpy\n\nSimulate starspot evolution and the corresponding lightcurves.\n\n**Primary author: [Zachary Claytor](https://github.com/zclaytor)**\n\nThe code is written in both Python and Julia. See the Butterfly.jl section for the Julia documentation. The Python code can be found under the `butterpy` directory.\n\n\n## Installation\n\nAfter cloning, run\n```\n$ pipenv install\n```\nor\n```\n$ pip install -e .\n```\nDepending on your preferred virtualenv setup.\n\n## Usage\n\nSee `butterpy/simulate_lightcurves.py` or `notebooks/surface_fig.ipynb` for general usage.\n\n# Butterfly.jl\n\n**Primary author: [Miles Lucas](https://github.com/mileslucas)**\n\nThe Julia implementation is derived from the python work but applies Julian best practices. The Julia code can be found under the `src` directory. This requires Julia 1.2 or greater, and greatly benefits from the stability in multithreading found in Julia 1.3. Visit the [Julia website](https://julialang.org) for information on how to get Julia set up.\n\n## Installation\n\nOnce you have Julia set up, enter the REPL\n\n```\n$ julia\n```\n\nand set up the environment\n\n```julia\njulia> ]\n\n(v1.2) pkg> dev .\n\n(v1.2) pkg> <backspace>\n\njulia> using Butterfly\n```\n\n## Usage\n\nThe main workflow is similar to the python implementation\n\n### Generate and evolve starspots\n\n```julia\njulia> spots = evolve() # Solar values by default for 10 year time-span\n3371-element Array{Spot,1}:\n Spot{Float64}(25, -0.16473381557930752, 0.6011891165889124, 151.63266492815836, 0.0) \n Spot{Float64}(28, -0.1513712338337426, 6.279352287829287, 151.63266492815836, 0.0)   \n Spot{Float64}(35, -0.1678121828423019, 0.1170635115755915, 250.0, 0.0)               \n Spot{Float64}(46, -0.1087039654086646, 0.5784711270698818, 33.833820809153174, 0.0)  \n Spot{Float64}(47, -0.1223988077838112, 3.248376887285918, 33.833820809153174, 0.0)   \n Spot{Float64}(56, 0.16106980965050208, 4.880251878214368, 91.96986029286062, 0.0)    \n Spot{Float64}(56, -0.20579341905391327, 4.482267038663841, 33.833820809153174, 0.0)  \n ⋮\n Spot{Float64}(3645, 0.30590153485394156, 3.004852147666298, 151.63266492815836, 0.0) \n Spot{Float64}(3645, -0.18449038285124816, 6.089091009925041, 33.833820809153174, 0.0)\n Spot{Float64}(3646, 0.18567945472506195, 4.543798473242256, 151.63266492815836, 0.0) \n Spot{Float64}(3646, -0.23634723943652297, 0.6475271827528074, 91.96986029286062, 0.0)\n Spot{Float64}(3648, -0.0974766691802325, 4.791006457613271, 33.833820809153174, 0.0) \n Spot{Float64}(3648, 0.253768420357385, 5.710141733818553, 33.833820809153174, 0.0)   \n Spot{Float64}(3649, 0.21079744615702228, 1.0139028758201174, 33.833820809153174, 0.0)\n\njulia> spots = evolve(\n            butterfly = true,\n            activity_rate = 1,\n            cycle_length = 11,\n            cycle_overlap = 2,\n            max_ave_lat = 35,\n            min_ave_lat = 7,\n            tsim = 3650,\n            tstart = 0) # equivalent to above\n```\n\nyou can view the docstring by pressing `?` and then typing in `evolve` like so\n\n```julia\nhelp?> evolve\nsearch: evolve\n\n  evolve(;\n      butterfly = true,\n      activity_rate = 1,\n      cycle_length = 11,\n      cycle_overlap = 2,\n      max_ave_lat = 35,\n      min_ave_lat = 7,\n      tsim = 3650,\n      tstart = 0)\n\n  Simulates the emergence and evolution of starspots. \n\n  Output is a list of active regions.\n\n  Parameters\n  ≡≡≡≡≡≡≡≡≡≡≡≡\n\n    •    butterfly = bool - have spots decrease from maxlat to minlat or be randomly located in latitude\n\n    •    activityrate = Number of magnetic bipoles, normalized such that for the Sun, activityrate = 1.\n\n    •    cycle_length - length of cycle in years (Sun is 11)\n\n    •    cycle_overlap - overlap of cycles in years\n\n    •    maxavelat = maximum average latitude of spot emergence (deg)\n\n    •    minavelat = minimum average latitutde of emergence (deg)\n\n    •    tsim = how many days to emerge spots for\n\n    •    tstart = First day to simulate bipoles\n\n  Based on Section 4 of van Ballegooijen 1998, ApJ 501: 866 and Schrijver and Harvey 1994, SoPh 150: 1S Written by Joe Llama (joe.llama@lowell.edu) V\n  11/1/16 Converted to Python 3 9/5/2017\n\n  According to Schrijver and Harvey (1994), the number of active regions emerging with areas in the range [A, A+dA] in time interval dt is given by\n\n  n(A, t) dA dt = a(t) A^(-2) dA dt,\n\n  where A is the \"initial\" bipole area in square degrees, and t is the time in days; a(t) varies from 1.23 at cycle minimum to 10 at cycle maximum.\n\n  The bipole area is the area with the 25-Gauss contour in the \"initial\" state, i.e., at the time of maximum development of the active region. The\n  assumed peak flux density in the initial state is 100 G, and width = 0.4bsiz.\n```\n\n## Simulate Light Curves\n\nStart by creating a `SpotDynamics` object\n\n```julia\njulia> sd = SpotDynamics(spots)\nSpotDynamics{Float64}\n  nspots: 3370\n  duration: 3649.0\n  inclination: 0.24972224678784558\n  ω: 2.9682470272012405e-6\n  Δω: 5.936494054402481e-7\n  equatorial_period: 24.5\n  τ_emergence: 24.5\n  τ_decay: 122.5\n```\n\n\n```julia\nhelp?> SpotDynamics\nsearch: SpotDynamics\n\n  SpotDynamics(spots::AbstractVector{Spot};\n      duration = maximum([s.nday for s in spots]),\n      alpha_med = 0.0001,\n      inclination = asin(rand()),\n      ω = 1.0,\n      Δω = 0.2,\n      τ_decay = 5.0,\n      threshold = 0.1)\n\n  A container for the dynamics of starspots.\n\n  Parameters\n  ≡≡≡≡≡≡≡≡≡≡≡≡\n\n    •    spots - The list of Spots evolved over time\n\n    •    duration - The length of the evolution time\n\n    •    alpha_med - An activation parameter for the magnetic flux\n\n    •    inclination - Inclination of the star from our line of sight in radians\n\n    •    ω - Rotational velocity of the star in solar units\n\n    •    Δω - change in rotational velocity over the time in solar untis\n\n    •    τ_decay - The decay timescale\n\n    •    threshold - The threshold in magnetic flux for filtering starspots\n```\n\nto view the modulation of the star's flux at a given timestep, use `modulate`\n\n```julia\njulia> df = modulate(sd, 0)\n-3.7839717125012525e-5\n\njulia> dfs = modulate.(sd, 0:0.01:1)\n101-element Array{Float64,1}:\n -3.7839717125012525e-5\n -3.779490759845662e-5 \n -3.7749334907885015e-5\n -3.7702998398295e-5   \n -3.765589741966958e-5 \n -3.760803132698725e-5 \n -3.755939948023161e-5 \n  ⋮                    \n -3.025936981252681e-5 \n -3.014146726718377e-5 \n -3.0022765393355793e-5\n -2.9903264042371397e-5\n -2.978296307128816e-5 \n -2.9661862342899073e-5\n -2.953996172573867e-5\n```\n\n```julia\nhelp?> modulate\nsearch: modulate\n\n  modulate(::SpotDynamics, time)\n\n  Modulate the flux due starspots at the given timestep in days.\n```\n\nwe can simulate using multithreading using `simulate`. Note, you must have the environment variable `JULIA_NUM_THREADS` set to make use of multithreading.\n\n```julia\njulia> dfs = simulate(sd, duration=365, cadence=60)\n8761-element Array{Float64,1}:\n -3.7839717125012525e-5 \n -3.764797288782288e-5  \n -3.744294368105203e-5  \n -3.7224583843915496e-5 \n -3.6992849236707684e-5 \n -3.674769725267416e-5  \n -3.648908682971768e-5  \n  ⋮                     \n -0.00017763548300495392\n -0.0001785040018698553 \n -0.00017945659679677306\n -0.00018040299273987162\n -0.00018134308150915572\n -0.00018227675569909986\n -0.00018320390870043565\n```\n\n```julia\nhelp?> simulate\nsearch: simulate\n\n  simulate(::SpotDynamics; duration=3650, cadence=30)\n\n  Simulate the lightcurve modulation over duration days every cadence minutes.\n\n  ───────────────────────────────────────────────────────\n\n  simulate(::DataFrameRow; duration=3650, cadence=30)\n\n  Given a row from a dataframe with simulation data, will simulate the lightcurve modulation over duration days every cadence minutes.\n\n  ───────────────────────────────────────────────────────\n\n  simulate(::DataFrame; duration=3650, cadence=30)\n\n  Given a full dataframe with simulation data, will return a Vector of lightcurve modulations over duration days every cadence minutes.\n\n```\n\n## Generating Simulation Sets\n\nUsing `generate_simdata` we can produce a dataframe of simulation data that can be saved and passed directly to `simulate`\n\n```julia\nhelp?> generate_simdata\nsearch: generate_simdata\n\n  generate_simdata(n::Integer)\n\n  Generate n simulation datasets returned in a DataFrame.\n```\n\n# Benchmarks\n\nIn the directory `bench` there are some benchmarks comparing Python performance to Julia. In general, Julia is ~2x faster than Python when using multithreading.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zclaytor/butterpy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "butterpy",
    "package_url": "https://pypi.org/project/butterpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/butterpy/",
    "project_urls": {
      "Homepage": "https://github.com/zclaytor/butterpy"
    },
    "release_url": "https://pypi.org/project/butterpy/0.1.0/",
    "requires_dist": [
      "astropy",
      "numpy",
      "scipy",
      "matplotlib",
      "tqdm",
      "pandas"
    ],
    "requires_python": "==3.*,>=3.6.0",
    "summary": "Tools for simulating stellar rotational light curves using realistic spot evolution",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10124436,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d070b3f485e9409d3764918db5a3c3e2d462bbef4b2557be5e2e76137379d7a",
          "md5": "29a1305974ad2cdf41cfda629b435c54",
          "sha256": "85b2036f4b24b26184156b5e44605b9ae2266d19c72244e14a4ccc474a19bffc"
        },
        "downloads": -1,
        "filename": "butterpy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29a1305974ad2cdf41cfda629b435c54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.*,>=3.6.0",
        "size": 14538,
        "upload_time": "2021-04-21T01:05:43",
        "upload_time_iso_8601": "2021-04-21T01:05:43.384069Z",
        "url": "https://files.pythonhosted.org/packages/6d/07/0b3f485e9409d3764918db5a3c3e2d462bbef4b2557be5e2e76137379d7a/butterpy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0b74c81fc934e41b9687e6447dffbfd0806b36ce3d50f6e56f5ea17f980a4fd",
          "md5": "c84657d966eb24b2adc113cf7889c99c",
          "sha256": "449705763d93b218ee6c30521443fda91b8bea37d6398703bf63da3eb27aba79"
        },
        "downloads": -1,
        "filename": "butterpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c84657d966eb24b2adc113cf7889c99c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.*,>=3.6.0",
        "size": 17263,
        "upload_time": "2021-04-21T01:05:45",
        "upload_time_iso_8601": "2021-04-21T01:05:45.084815Z",
        "url": "https://files.pythonhosted.org/packages/d0/b7/4c81fc934e41b9687e6447dffbfd0806b36ce3d50f6e56f5ea17f980a4fd/butterpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d070b3f485e9409d3764918db5a3c3e2d462bbef4b2557be5e2e76137379d7a",
        "md5": "29a1305974ad2cdf41cfda629b435c54",
        "sha256": "85b2036f4b24b26184156b5e44605b9ae2266d19c72244e14a4ccc474a19bffc"
      },
      "downloads": -1,
      "filename": "butterpy-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "29a1305974ad2cdf41cfda629b435c54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "==3.*,>=3.6.0",
      "size": 14538,
      "upload_time": "2021-04-21T01:05:43",
      "upload_time_iso_8601": "2021-04-21T01:05:43.384069Z",
      "url": "https://files.pythonhosted.org/packages/6d/07/0b3f485e9409d3764918db5a3c3e2d462bbef4b2557be5e2e76137379d7a/butterpy-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0b74c81fc934e41b9687e6447dffbfd0806b36ce3d50f6e56f5ea17f980a4fd",
        "md5": "c84657d966eb24b2adc113cf7889c99c",
        "sha256": "449705763d93b218ee6c30521443fda91b8bea37d6398703bf63da3eb27aba79"
      },
      "downloads": -1,
      "filename": "butterpy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c84657d966eb24b2adc113cf7889c99c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "==3.*,>=3.6.0",
      "size": 17263,
      "upload_time": "2021-04-21T01:05:45",
      "upload_time_iso_8601": "2021-04-21T01:05:45.084815Z",
      "url": "https://files.pythonhosted.org/packages/d0/b7/4c81fc934e41b9687e6447dffbfd0806b36ce3d50f6e56f5ea17f980a4fd/butterpy-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}