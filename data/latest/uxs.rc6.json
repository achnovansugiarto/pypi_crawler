{
  "info": {
    "author": "binares",
    "author_email": "binares@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# UXS - Unified eXchange Streaming\nA unified crypto exchange websocket\n\nThis free to use python library is ccxt based. I use it for personal trading and data feeds. Pull requests are welcome, although I'll yet have to make some sort of guide on how to implement new exchanges.\n\n**DISCLAIMER: Use it at your own risk! I take no responsibility for any losses occurred!**\n\nInstallation (python 3.5.3+ required):\n\n`pip install --upgrade uxs`\n\nLatest development version:\n\n`pip install git+https://github.com/binares/uxs.git`\n\nSupported exchanges:\n\n|              | ticker | all_tickers | orderbook | l3 | ohlcv | trades | balance | order | fill | position |\n|--------------|--------|-------------|-----------|----|-------|--------|---------|-------|------|----------|\n| binance      |   +    |      +      |     +     |    |   +   |   +    |    +    |   +   |  p   |          |\n| binancefu    |   +    |      +      |     +     |    |   +   |   +    |    +    |   +   |  p   |    +     |\n| bitmex       |   p    |      +      |     +     |    |   p   |   p    |    +    |   o   |  o   |    +     |\n| bittrex      |   +    |      +      |     +     |    |   +   |   +    |    +    |   +   |  +   |          |\n| bw           |   +    |      +      |     +     |    |   +   |   +    |    p    |   p   |      |          |\n| coinbene     |   +    |      +      |     +     |    |   +   |   +    |    p    |   p   |      |          |\n| coindcx      |   p    |      p      |     +     |    |   p   |   +    |    +    |   p   |  +   |          |\n| gateiofu     |        |             |     +     |    |   p   |        |         |       |      |          |\n| hitbtc       |   +    |      p      |     +     |    |   p   |   p    |    p    |   +   |  +   |          |\n| kraken       |   +    |      p      |     +     |    |   +   |   +    |         |   +   |  +   |          |\n| krakenfu     |   +    |      p      |     +     |    |   p   |   +    |    +    |   +   |  +   |    +     |\n| kucoin       |   +    |      +      |     +     |    |   p   |   +    |    +    |   o   |  o   |          |\n| luno         |   p    |      p      |     w     | +  |   p   |   w    |    p    |   o   |  o   |          |\n| poloniex     |   p    |      +      |     +     |    |   p   |   p    |    +    |   +   |  +   |          |\n| southxchange |   p    |      p      |     +     |    |   p   |   +    |    p    |   p   |      |          |\n\nNote that there aren't separate subscription channels for *balance*, *order*, *fill* (your trade) and *position* - they all belong under *account*: `xs.subscribe_to_account()`. However some exchanges like bitmex require you to subscribe to each market directly for order and fill updates: `xs.subscribe_to_own_market(symbol)` (but you'll still want to also subscribe to *account*, as it contains balance and position updates). \n\n*+* - direct streaming\\\n*p* - emulated via polling (fetch_balance, fetch_tickers etc)\\\n*w* - emulated via streaming (l3 -> orderbook, l3 -> trades)\\\n*o* - must be subscribed to `own_market`\n\nTest environments are currently offered for: binancefu, bitmex, krakenfu and kucoin (kraken also offers some sort of non-sandboxed test env). For using them add `{'test': True}` to the config, and make sure you have created a sandbox account.\n\nSimple usage:\n\n```\nimport uxs\nimport asyncio\n\nxs = uxs.binance({'apiKey': '', 'secret': ''})\nxs.subscribe_to_orderbook('BTC/USDT')\n# Subscribes to balance, order, fill and position updates\nxs.subscribe_to_account()\nxs.start()\n\nasyncio.get_event_loop().run_forever()\n```\n\n## ExchangeSocket\n\nAll exchange streamer classes inherit from `uxs.ExchangeSocket`. Note that `uxs.ExchangeSocket` itself *isn't* a subclass of `ccxt.Exchange`, i.e. `uxs.binance` **!**=~ `ccxt.async_support.binance`. Its corresponding (asynchronous) ccxt Exchange instance is accessible under `.api`: `uxs.binance.api` =~ `ccxt.async_support.binance`. The `.api` object's class is a wrapped one through, with some extra attributes added for caching data, rounding up/down, calculating payout and altering the markets data (e.g. for personalized fees).\n\n`ExchangeSocket` does borrow *some* `ccxt.async_support.Exchange` methods: `create_order`, `edit_order`, `cancel_order` will normally evoke the same method of ccxt class, unless the exchange supports websocket trading (hitbtc). And `fetch_ticker`, `fetch_tickers`, `fetch_order_book`, `fetch_ohlcv`, `fetch_trades`, `fetch_balance`, `fetch_order`, `fetch_orders`, `fetch_open_orders`, `fetch_closed_orders`, which may in some cases be evoked through websocket.\n\nThe included examples show how to wait for updates, use callbacks, trade, cache fetch results and store tokens in a file / password encrypted file.\n\n## Subscriptions\n\n```\n# Subscribe\n\nxs.subscribe_to_ticker(symbol)\n\nxs.subscribe_to_all_tickers()\n\nxs.subscribe_to_orderbook(symbol)\n\nxs.subscribe_to_l3(symbol)\n\nxs.subscribe_to_ohlcv(symbol, timeframe)\n\nxs.subscribe_to_trades(symbol)\n\nxs.subscribe_to_account()\n\nxs.subscribe_to_own_market(symbol)\n\n# Unsubscribe\n\nxs.unsubscibe_to_{channel}(**params)\n\n# Shortened\n\nxs.sub_to_{channel}(**params)\n\nxs.unsub_to_{channel}(**params)\n\n# Dynamically\n\nxs.subscribe_to({'_': channel, **params})\n\nxs.unsubscribe_to({'_': channel, **params})\n\n# Subscription object\n\ns = xs.get_subscription({'_': channel, **params}) # for example {'_': 'orderbook', 'symbol': 'BTC/USDT'}\n# or\ns = xs.get_subscription((channel, *params)) # for example ('orderbook', 'BTC/USDT')\n\ns.state # 0=inactive, 1=active\n\nawait s.wait_till_active() # wait till the subscription becomes active\n# or\nawait xs.wait_till_subscription_active({'_': channel, **params})\n```\n\n## Data structures\n\nThese are attributes of ExchangeSocket instance (xs). The objects in these dicts are equivalent to those of ccxt.Exchange (except for position, which isn't yet implemented by ccxt).\n\n```\nxs.tickers[symbol]\n\nxs.orderbooks[symbol]\n\nxs.l3_books[symbol]\n\nxs.ohlcv[symbol][timeframe]\n\nxs.trades[symbol]\n\nxs.balances[currency]\n\nxs.orders[order_id]\n\nxs.open_orders[order_id]\n\nxs.fills[order_id]\n\nxs.positions[symbol]\n```\n\nAn order also contains 'payout' keyword, which is the current received amount in target currency.\n\nThe structures are updated on spot. Bids/asks are inserted directly into the existing list, dict values are updated but the dict objects' id never changes. That includes all sub-level dicts (orders, fills, ...), and even the 'info' dicts (but not the other dicts like 'fee': {'cost': .. , 'currency': ..}). So for any time spanning operation (await create_order()), or if you're accessing the data from another thread, there is a real possibility that the dict has been updated in the meanwhile. To ensure that you'll still have access to the old values, make a (deep)copy of the structure before. Also avoid looping over a structure while for example creating an order (in the loop), as the dict/list size might change, and python throws an error (in dict case).\n\n```\n# Do NOT do this:\nfor o in xs.open_orders.values():\n    await xs.cancel_order(o['id'], o['symbol'])\n\n# Instead:\nfor o in list(xs.open_orders.values()):\n    await xs.cancel_order(o['id'], o['symbol'])\n```\n\nNote that once a subscription feed is lost/unsubbed, the associated *real-time* data is automatically deleted. This it to prevent the user using outdated data, and by default includes these channels: *all_tickers*, *ticker*, *orderbook*. E.g. once ('orderbook', 'ETH/BTC') is lost, `xs.orderbooks['ETH/BTC']` is deleted. Account relevant data is not deleted, as you might want to cancel the orders / close the positions.\n\nTo change it initiate an exchange like this:\n```\n# specific channel\nuxs.binance({'channels': {'orderbook': {'delete_data_on_unsub': False}}})\n```\n\n## Wait on stream event\n\n```\n# See example c / docstring for description\nawait xs.wait_on(stream, id=-1)\n```\n\n## Add stream event callback\n\n```\n# See example d for description\nxs.add_callback(cb, stream, id=None)\n```\n\n## xs.create_order\n\nxs.create_order automatically rounds the price down for buy orders, and up for sell orders. The amount is also rounded, always down.\n\n## Logging\n\nInitialize with `verbose` value\n- 0.5 - create/edit/cancel order\n- 1 - connection, subscription, send, fetch/polling events + above\n- 2 - ping + some inner mechanisms + above\n- 3 - recv events + above\n\ndepending on how detailed log you want. Unexpected errors (not connectivity related) are logged in any case.\n\n```\nuxs.binance({'verbose': 1})\n```\n\nIf you just want to see recv output without including 0.5, 1 and 2, init with\n\n```\nuxs.binance({'connection_defaults': {'handle': print}})\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/binares/uxs",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uxs",
    "package_url": "https://pypi.org/project/uxs/",
    "platform": "",
    "project_url": "https://pypi.org/project/uxs/",
    "project_urls": {
      "Homepage": "https://github.com/binares/uxs"
    },
    "release_url": "https://pypi.org/project/uxs/0.6.1/",
    "requires_dist": null,
    "requires_python": ">=3.5.3",
    "summary": "A unified crypto exchange websocket",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11267148,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a383b402a9a6eeff42b5b4c25e0a8a82036ca9adb5207a6233ff3f3d668efe32",
          "md5": "047ee626b28168d6611ff5be112bd1a8",
          "sha256": "3790ed8f22249692785cf174f2421e55d0b10a1ee5a96dca5e737667950e1746"
        },
        "downloads": -1,
        "filename": "uxs-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "047ee626b28168d6611ff5be112bd1a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 464409,
        "upload_time": "2020-08-12T04:06:04",
        "upload_time_iso_8601": "2020-08-12T04:06:04.364720Z",
        "url": "https://files.pythonhosted.org/packages/a3/83/b402a9a6eeff42b5b4c25e0a8a82036ca9adb5207a6233ff3f3d668efe32/uxs-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7582fc1382168490ee42bb4d399ca78f41315077bdfcf13bb54a11fb372e55ec",
          "md5": "203a272bd02d5d0ba1eea9eb8ce1aa7c",
          "sha256": "dbe928d57f32f2720a8c535c8e4f9e4cecb90a4bb014bcf6e2f454e4088c5cf6"
        },
        "downloads": -1,
        "filename": "uxs-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "203a272bd02d5d0ba1eea9eb8ce1aa7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 475481,
        "upload_time": "2020-08-30T16:46:33",
        "upload_time_iso_8601": "2020-08-30T16:46:33.734502Z",
        "url": "https://files.pythonhosted.org/packages/75/82/fc1382168490ee42bb4d399ca78f41315077bdfcf13bb54a11fb372e55ec/uxs-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ca0aae3630b8640709e270b3be7ad4169d059d426621b5082e41a9bced4e0b1",
          "md5": "77566ff18993c2d4e63c248fa85e06fe",
          "sha256": "2a47e1ef2acac4b9bcd434e46b1e00c9f9d20b1281af84528014389142238766"
        },
        "downloads": -1,
        "filename": "uxs-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77566ff18993c2d4e63c248fa85e06fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 483865,
        "upload_time": "2020-09-13T18:01:25",
        "upload_time_iso_8601": "2020-09-13T18:01:25.152150Z",
        "url": "https://files.pythonhosted.org/packages/5c/a0/aae3630b8640709e270b3be7ad4169d059d426621b5082e41a9bced4e0b1/uxs-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94f86a8633a276914b67d149d20ba224c9b0a8b6f7253f055344a6876c987345",
          "md5": "2f18572d2f80bf3e565933a13bc00440",
          "sha256": "cc6a5d8e0299a88aa1564c9c5769a4fdc6b8bc660606fdf6e12ba2a1c06eed26"
        },
        "downloads": -1,
        "filename": "uxs-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f18572d2f80bf3e565933a13bc00440",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 510802,
        "upload_time": "2020-11-28T11:21:57",
        "upload_time_iso_8601": "2020-11-28T11:21:57.963169Z",
        "url": "https://files.pythonhosted.org/packages/94/f8/6a8633a276914b67d149d20ba224c9b0a8b6f7253f055344a6876c987345/uxs-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c417b048d8e010da70434860980b228c5d27bc7f257f737d99ffe7338dd4908f",
          "md5": "8a489f925b9712a4d4b06a85e64bb653",
          "sha256": "c88859189ba736ae78ea6b923551b9eaf22af1372e717b3f1d7964952d2d8248"
        },
        "downloads": -1,
        "filename": "uxs-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a489f925b9712a4d4b06a85e64bb653",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 191793,
        "upload_time": "2021-05-09T14:16:44",
        "upload_time_iso_8601": "2021-05-09T14:16:44.697523Z",
        "url": "https://files.pythonhosted.org/packages/c4/17/b048d8e010da70434860980b228c5d27bc7f257f737d99ffe7338dd4908f/uxs-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70712b5cc0aa93e73af23398f8b7bac3b8d51f2277cc87d65b7152c5e0d1a6b3",
          "md5": "69e60d1cfefe8a5d338e404c8d3c16cc",
          "sha256": "5dab0507789eb579b4ac319942b6beaae5aae4f81f089035cdbbd9024b5cd8c4"
        },
        "downloads": -1,
        "filename": "uxs-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "69e60d1cfefe8a5d338e404c8d3c16cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 191750,
        "upload_time": "2021-08-24T20:53:52",
        "upload_time_iso_8601": "2021-08-24T20:53:52.604763Z",
        "url": "https://files.pythonhosted.org/packages/70/71/2b5cc0aa93e73af23398f8b7bac3b8d51f2277cc87d65b7152c5e0d1a6b3/uxs-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70712b5cc0aa93e73af23398f8b7bac3b8d51f2277cc87d65b7152c5e0d1a6b3",
        "md5": "69e60d1cfefe8a5d338e404c8d3c16cc",
        "sha256": "5dab0507789eb579b4ac319942b6beaae5aae4f81f089035cdbbd9024b5cd8c4"
      },
      "downloads": -1,
      "filename": "uxs-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "69e60d1cfefe8a5d338e404c8d3c16cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.3",
      "size": 191750,
      "upload_time": "2021-08-24T20:53:52",
      "upload_time_iso_8601": "2021-08-24T20:53:52.604763Z",
      "url": "https://files.pythonhosted.org/packages/70/71/2b5cc0aa93e73af23398f8b7bac3b8d51f2277cc87d65b7152c5e0d1a6b3/uxs-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}