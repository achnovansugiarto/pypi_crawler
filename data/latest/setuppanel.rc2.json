{
  "info": {
    "author": "Marwynn Somridhivej",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# SetupPanel\nIntuitive and flexible configuration of interactive embed-based setup panels\nfor `discord.py`. This library provides convenient abstraction of \"normal\" setup\npanel code into a powerful, yet simple API.\n\n## Requirements\n- Python 3.6+\n- `discord.py`\n\n## Getting Started\nIf you would like to install `discord.py` along with this library, in your\nterminal, run:\n```\npip install -U setuppanel[dpy]\n```\nTo install `discord.py` with voice capabilities, run:\n```\npip install -U setuppanel[dpyv]\n```\nOr to install just this library, run:\n```\npip install -U setuppanel\n```\nYou're all set! However, it is recommended to install to a *Virtual Environment*\nto avoid polluting your global package installation. For more information,\n[read here](https://docs.python.org/3/tutorial/venv.html).\n\n## API\n\n### `setuppanel.SetupPanel`\n\n#### Attributes\n- **info** `Union[List[Tuple[str, bool, bool, bool]], None]`: information about\n  the steps in a `SetupPanel` instance. If steps have been added, returns a\n  list of tuples of the name, conditional flag, loop flag, and group_loop flag\n  of each step. Otherwise, `None`\n- **is_used** `bool`: if the `SetupPanel` instance has already been run\n- **`len(SetupPanel)`** `int`: the number of steps this setup panel will run\n\n#### Parameters\n- **bot** `Union[Bot, AutoShardedBot]`: the instance of a discord bot\n- **ctx** `Context`: the command's invocation context\n- **title** `str`: the title of this setup panel\n- **duplicate_roles** `Optional[bool]`: whether or not this setup panel allows\n  duplicate roles to be specified during a looping step, default `False`\n- **duplicate_role_embed** `Optional[discord.Embed]`: the embed to send if a\n  duplicate role is received and `duplicate_roles` is `False`. Defaults to `None`\n- **duplicate_emojis** `Optional[bool]`: whether or not this setup panel allows\n  duplicate emojis to be specified during a looping step, default `False`\n- **duplicate_emoji_embed** `Optional[discord.Embed]`: the embed to send if a\n  duplicate emoji is received and `duplicate_emojis` is `False`. Defaults to `None`\n- **error_color** `Optional[Union[discord.Color, int]]`: the color of the embed\n  that will be sent for the timeout and canceled message\n\n### Setup Operation Names\nBelow are all the various setup names that can be passed into the `name` and `names`\nparameters of the API functions.\n\n>Please note that the typing information merely describes the return type of a\n> step with a given name, not that the name should be of that type. Provide the\n> name as stated below, for example, content would be provided as `name=\"content\"`\n\n- content `str`\n- message `str` *(alias for content)*\n- channel `discord.TextChannel`\n- role `discord.Role`\n- emoji `str`\n- reaction `str` *(alias for emoji)*\n- member `discord.Member`\n- integer `int`\n- float `float`\n- title `Union[str, EmptyEmbed]`\n- description `Union[str, EmptyEmbed]`\n- color `discord.Color`\n- author `Union[str, None]`\n- footer `Union[str, None]`\n- url `Union[str, None]`\n\n### Add Step\n- Usage: `SetupPanel.add_step(params)`\n- Parameters:\n  - **name** `str`: see [valid names](#setup-operation-names)\n  - **embed** `discord.Embed`: the embed to display during the step\n  - **timeout** `Optional[int]`: the time (in seconds) to wait for a user to respond\n    with an option that satisfies `predicate`. Defaults to `120`\n  - **predicate** `Optional[Callable]`: a function that accepts the output of the\n    appropriate `bot.wait_for` listener and returns a `bool`\n- Returns class instance for fluuid chaining\n\n\n### Add Conditional Step\n- Usage: `SetupPanel.add_conditional_step(params)`\n- Parameters:\n  - **name** `str`: see [valid names](#setup-operation-names)\n  - **embed** `discord.Embed`: the embed to display during the step\n  - **condition** `Callable`: a function that accepts the output of the last step,\n    returning a `bool`. Step will be executed if the result of `condition` is\n    `True`, otherwise the result of this step will be `None`\n  - **timeout** `Optional[int]`: the time (in seconds) to wait for a user to respond\n    with an option that satisfies `predicate`. Defaults to `120`\n  - **predicate** `Optional[Callable]`: a function that accepts the output of the\n    appropriate `bot.wait_for` listener and returns a `bool`\n- Returns class instance for fluuid chaining\n\n### Add Looping Step\n- Usage: `SetupPanel.add_until_finish(params)`\n- Parameters:\n  - **name** `str`: see [valid names](#setup-operation-names)\n  - **embed** `discord.Embed`: the embed to display during the step\n  - **break_check** `Callable`: a function that accepts the same arguments as `predicate`,\n    returning a `bool`. If the result of `break_check` is `True`, it will break out\n    of the loop, proceeding to the next step. The result of this step is an aggregate\n    list of individual results of each loop\n  - **timeout** `Optional[int]`: the time (in seconds) to wait for a user to respond\n    with an option that satisfies `predicate`. Defaults to `120`\n  - **predicate** `Optional[Callable]`: a function that accepts the output of the\n    appropriate `bot.wait_for` listener and returns a `bool`\n- Returns class instance for fluuid chaining\n\n### Add Grouped Looping Step\n- Usage: `SetupPanel.add_group_loop(params)`\n- Parameters:\n  - **names** `List[str]`: see [valid names](#setup-operation-names)\n  - **embeds** `List[discord.Embed]`: the embed to display during the step\n  - **break_checks** `List[Callable]`: a list of functions that accept the same\n    arguments as `predicates` for each function, returning a `bool`. If the\n    result of `break_check` for a step is `True`, it will break out of the loop,\n    proceeding to the next step. The result of this step is an aggregate\n    list of the tuple of individual results of each loop\n  - **timeouts** `List[int]`: list of the time (in seconds) to wait for a user to respond\n    with an option that satisfies `predicates`\n  - **predicates** `Optional[List[Callable]]`: a list of functions that accept the\n    output of the appropriate `bot.wait_for` listener and returns a `bool`\n- Returns class instance for fluuid chaining\n> **Note:** *The length of each of the list parameters must be the same*\n\n### Start Setup\n- Usage: `await SetupPanel.start()`\n- Returns the aggregate list of the results of all setup steps in order. If\n  setup is canceled or times out, returns `None`\n\n## Examples\n```python\nimport discord\nfrom discord.ext import commands\nfrom discord.ext.commands import AutoShardedBot, Context\nfrom setuppanel import SetupPanel\n\n\nclass ExampleCog(commands.Cog):\n    def __init__(self, bot: AutoShardedBot) -> None:\n        self.bot = bot\n\n    @commands.command()\n    async def setuptest(self, ctx: Context):\n        sp = SetupPanel(\n            bot=self.bot,\n            ctx=ctx,\n            title=\"Test Setup Panel\",\n        ).add_step(\n            name=\"content\",\n            embed=discord.Embed(\n                title=\"Test Setup\",\n                description=f\"{ctx.author.mention}, message content please\",\n                color=discord.Color.blue(),\n            ),\n            timeout=300,\n        )\n        for name in [\"channel\", \"role\", \"member\"]:\n            sp.add_step(\n                name=name,\n                embed=discord.Embed(\n                    title=\"Test Setup\",\n                    description=f\"{ctx.author.mention}, mention a {name}\",\n                    color=discord.Color.blue(),\n                ),\n                timeout=300,\n            )\n        sp.add_until_finish(\n            name=\"content\",\n            embed=discord.Embed(\n                title=\"Test Setup\",\n                description=f\"{ctx.author.mention}, message content please\",\n                color=discord.Color.blue(),\n            ),\n            timeout=300,\n            break_check=lambda m: m.content == \"finish\" and m.author == ctx.author and m.channel == ctx.channel,\n        ).add_conditional_step(\n            name=\"integer\",\n            embed=discord.Embed(\n                title=\"Test Setup\",\n                description=f\"{ctx.author.mention}, please specify an integer value\",\n                color=discord.Color.blue(),\n            ),\n            timeout=300,\n            condition=lambda lv: bool(lv)\n        ).add_group_loop(\n            names=[\"content\", \"integer\"],\n            embeds=[\n                discord.Embed(\n                    title=\"Test Setup\",\n                    description=f\"{ctx.author.mention}, say something\",\n                    color=discord.Color.blue().\n                ),\n                discord.Embed(\n                    title=\"Test Setup\",\n                    description=f\"{ctx.author.mention}, say a number\",\n                    color=discord.Color.blue().\n                )\n            ],\n            timeouts=[300, 300],\n            break_checks=[\n                lambda m: m.content == \"stop looping\",\n                None,\n            ],\n        )\n        res = await sp.start()\n        await ctx.channel.send(content=res)\n\n\ndef setup(bot: AutoShardedBot) -> None:\n    bot.add_cog(Testing(bot))\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/marwynnsomridhivej/setuppanel",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SetupPanel",
    "package_url": "https://pypi.org/project/SetupPanel/",
    "platform": "",
    "project_url": "https://pypi.org/project/SetupPanel/",
    "project_urls": {
      "Homepage": "https://gitlab.com/marwynnsomridhivej/setuppanel"
    },
    "release_url": "https://pypi.org/project/SetupPanel/1.0.3/",
    "requires_dist": [
      "discord.py ; extra == 'dpy'",
      "discord.py[voice] ; extra == 'dpyv'"
    ],
    "requires_python": "",
    "summary": "Intuitive and flexible configuration of interactive embed-based setup panels for discord.py",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9696305,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fea3193445ccfd5fd8564e94a13d785e2a499b07260c0c0885a4200240a64b6c",
          "md5": "4fa46d4187bc508bc75b2a00ed127863",
          "sha256": "ea01fa553227ffa31c5ab71614c01eb08ab8a892fe07474292dad7738cb4d4c8"
        },
        "downloads": -1,
        "filename": "SetupPanel-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fa46d4187bc508bc75b2a00ed127863",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8896,
        "upload_time": "2021-02-27T14:03:36",
        "upload_time_iso_8601": "2021-02-27T14:03:36.581513Z",
        "url": "https://files.pythonhosted.org/packages/fe/a3/193445ccfd5fd8564e94a13d785e2a499b07260c0c0885a4200240a64b6c/SetupPanel-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eaf9846471516a16d882e57d1d8b6d9fa205d0d2823dff8b56d4698827ba866",
          "md5": "40dee23a87bfb1679850963c0cf535be",
          "sha256": "8e5e7c4c2c3f37b3af8318b38499608bd55c590d71cbd611357cd93ebcb33e85"
        },
        "downloads": -1,
        "filename": "SetupPanel-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "40dee23a87bfb1679850963c0cf535be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9144,
        "upload_time": "2021-02-27T14:03:37",
        "upload_time_iso_8601": "2021-02-27T14:03:37.513609Z",
        "url": "https://files.pythonhosted.org/packages/6e/af/9846471516a16d882e57d1d8b6d9fa205d0d2823dff8b56d4698827ba866/SetupPanel-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8338a0ecbc4c1723bd967ddbd84f3c7f91dea7a7def96ffb92c2bae754d7ac5e",
          "md5": "5ec387f29884bc6925e46cfd1b0b38b9",
          "sha256": "0595957c6d7a5f59bd422f7253003a2d2e88c7a11c58c9b7d9d79ee2603f3795"
        },
        "downloads": -1,
        "filename": "SetupPanel-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ec387f29884bc6925e46cfd1b0b38b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8946,
        "upload_time": "2021-03-07T16:31:29",
        "upload_time_iso_8601": "2021-03-07T16:31:29.183883Z",
        "url": "https://files.pythonhosted.org/packages/83/38/a0ecbc4c1723bd967ddbd84f3c7f91dea7a7def96ffb92c2bae754d7ac5e/SetupPanel-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cebb7158f679025e8072dab76bc6e409730ca6579b4f656cf665b8e5fbe7b92",
          "md5": "755906daaa3dde966389102544467f93",
          "sha256": "0267eec62b33a52a04b2b0776d77937db40f9170b181ef3eaf6bccd5c455d2fd"
        },
        "downloads": -1,
        "filename": "SetupPanel-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "755906daaa3dde966389102544467f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9183,
        "upload_time": "2021-03-07T16:31:30",
        "upload_time_iso_8601": "2021-03-07T16:31:30.269896Z",
        "url": "https://files.pythonhosted.org/packages/5c/eb/b7158f679025e8072dab76bc6e409730ca6579b4f656cf665b8e5fbe7b92/SetupPanel-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8338a0ecbc4c1723bd967ddbd84f3c7f91dea7a7def96ffb92c2bae754d7ac5e",
        "md5": "5ec387f29884bc6925e46cfd1b0b38b9",
        "sha256": "0595957c6d7a5f59bd422f7253003a2d2e88c7a11c58c9b7d9d79ee2603f3795"
      },
      "downloads": -1,
      "filename": "SetupPanel-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ec387f29884bc6925e46cfd1b0b38b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8946,
      "upload_time": "2021-03-07T16:31:29",
      "upload_time_iso_8601": "2021-03-07T16:31:29.183883Z",
      "url": "https://files.pythonhosted.org/packages/83/38/a0ecbc4c1723bd967ddbd84f3c7f91dea7a7def96ffb92c2bae754d7ac5e/SetupPanel-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cebb7158f679025e8072dab76bc6e409730ca6579b4f656cf665b8e5fbe7b92",
        "md5": "755906daaa3dde966389102544467f93",
        "sha256": "0267eec62b33a52a04b2b0776d77937db40f9170b181ef3eaf6bccd5c455d2fd"
      },
      "downloads": -1,
      "filename": "SetupPanel-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "755906daaa3dde966389102544467f93",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9183,
      "upload_time": "2021-03-07T16:31:30",
      "upload_time_iso_8601": "2021-03-07T16:31:30.269896Z",
      "url": "https://files.pythonhosted.org/packages/5c/eb/b7158f679025e8072dab76bc6e409730ca6579b4f656cf665b8e5fbe7b92/SetupPanel-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}