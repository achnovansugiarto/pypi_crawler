{
  "info": {
    "author": "VidarDB Team",
    "author_email": "info@vidardb.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyVidarDB\n\n[![Build Status](https://dev.azure.com/vidardb/PyVidarDB/_apis/build/status/vidardb.PyVidarDB?branchName=master)](https://dev.azure.com/vidardb/PyVidarDB/_build/latest?definitionId=1&branchName=master)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyvidardb)\n[![PyPI version](https://badge.fury.io/py/PyVidarDB.svg)](https://badge.fury.io/py/PyVidarDB)\n\nA simple python wrapper for [VidarDB](https://github.com/vidardb/vidardb-engine).\n\n## Use PyVidarDB\n\nPyVidarDB guarantees to support `Python >= 3.5`.\nThere is no need to have VidarDB installed in advance, PyVidarDB will install it automatically for you.\n\n### Dependencies\n\nFor Linux users (Ubuntu as an example):\n\n```bash\nsudo apt-get update\nsudo apt-get install git python3-pip build-essential cmake\n```\n\nFor MacOS users (Please install [Homebrew](https://brew.sh/) at first):\n\n```bash\nsudo brew install git python3 cmake\n```\n\nFor Windows users:\n\nThe compiler should support C++11 (at least Visual Studio 2015 update 3).\n\n### PyVidarDB Installation\n\nFrom PyPI:\n\n```bash\npip3 install PyVidarDB\n```\n\nFrom Github:\n\n```bash\ngit clone --recursive https://github.com/vidardb/PyVidarDB.git\npip3 install ./PyVidarDB\n```\n\n## Basic Usage\n\nHere is the basic usage for PyVidarDB:\n\n```python\nimport pyvidardb\n\ndb = pyvidardb.DB()\n\n# Open the database, will create one if not exist.\ndb.open(\"./hello_world\")\n\n# Put a map from 'key1' to 'value1' into the database.\ndb.put(b\"key1\", b\"value1\")\n\n# Get the value(s) of the provided key, will return None\n# if there is no such key in the database.\nvalue = db.get(b\"key1\")\nassert value == [b\"value1\"]\n\n# 'key2' does not exist in the database. So we will get None here.\nvalue = db.get(b\"key2\")\nassert value is None\n\n# Remove 'key1' from the database.\ndb.delete(b\"key1\")\n\n# Put a map from 'key2' to multiple values into the database.\ndb.put(b\"key2\", [b\"value1\", b\"value2\", b\"value3\"])\n\n# Get the value(s) of the provided key.\nvalue = db.get(b\"key2\")\nassert value == [b\"value1\", b\"value2\", b\"value3\"]\n\n# Remove 'key2' from the database.\ndb.delete(b\"key2\")\n\n# Close the database.\ndb.close()\n```\n\nPyVidarDB supports storing one key with multiple values. For example,\n`db.put(b\"key\", [b\"value1\", b\"value2\", b\"value3\"])` will put a map\nfrom `key` to `[b\"value1\", b\"value2\", b\"value3\"]` into the database.\nTo store one key with one value, simply call `db.put(b\"key\", b\"value\")`\nor `db.put(b\"key\", [b\"value\"])`. For `db.put()`, the passed key's type\nmust be `bytes`, while the values' type can be `bytes` or a list of `bytes`. \n\nFor `db.get(key: bytes)` and `db.delete(key: bytes)`, the passed arguments'\ntypes must be `bytes`. The return type of `db.get(key: bytes)` is a list of\n`bytes` which contains all the values of that key. If the provided key does\nnot exist in the database, `None` will be returned.\n\nMore examples can be found at here: https://github.com/vidardb/PyVidarDB/tree/master/examples \n\nSee our [wiki](https://github.com/vidardb/PyVidarDB/wiki) page for more information.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vidardb/PyVidarDB",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyVidarDB",
    "package_url": "https://pypi.org/project/PyVidarDB/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyVidarDB/",
    "project_urls": {
      "Homepage": "https://github.com/vidardb/PyVidarDB"
    },
    "release_url": "https://pypi.org/project/PyVidarDB/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Python Wrapper for VidarDB",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7864296,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82eecb33be929f5c9d39f82ab8eef6ce61a15832e02ed822010eb5b9c2f4484a",
          "md5": "73c8276f07e1cb4019365a27ba80900a",
          "sha256": "4e99e308fa4f46e7125488cea824665ef7cbf3873c7866780e76801e74337a65"
        },
        "downloads": -1,
        "filename": "PyVidarDB-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73c8276f07e1cb4019365a27ba80900a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2370136,
        "upload_time": "2020-07-30T06:07:18",
        "upload_time_iso_8601": "2020-07-30T06:07:18.121650Z",
        "url": "https://files.pythonhosted.org/packages/82/ee/cb33be929f5c9d39f82ab8eef6ce61a15832e02ed822010eb5b9c2f4484a/PyVidarDB-0.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83300f4c415cc190f17d5d9ea3a197758c678027d3cf73c04f1f495ebe8bc284",
          "md5": "d326b05937c475149c5dea055988d08f",
          "sha256": "5559178fc0266077fac84933df71702c25de458f1881b1a9147e6c93a1734bac"
        },
        "downloads": -1,
        "filename": "PyVidarDB-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d326b05937c475149c5dea055988d08f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2371160,
        "upload_time": "2020-08-02T00:19:11",
        "upload_time_iso_8601": "2020-08-02T00:19:11.973928Z",
        "url": "https://files.pythonhosted.org/packages/83/30/0f4c415cc190f17d5d9ea3a197758c678027d3cf73c04f1f495ebe8bc284/PyVidarDB-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83300f4c415cc190f17d5d9ea3a197758c678027d3cf73c04f1f495ebe8bc284",
        "md5": "d326b05937c475149c5dea055988d08f",
        "sha256": "5559178fc0266077fac84933df71702c25de458f1881b1a9147e6c93a1734bac"
      },
      "downloads": -1,
      "filename": "PyVidarDB-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d326b05937c475149c5dea055988d08f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 2371160,
      "upload_time": "2020-08-02T00:19:11",
      "upload_time_iso_8601": "2020-08-02T00:19:11.973928Z",
      "url": "https://files.pythonhosted.org/packages/83/30/0f4c415cc190f17d5d9ea3a197758c678027d3cf73c04f1f495ebe8bc284/PyVidarDB-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}