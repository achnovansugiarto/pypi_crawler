{
  "info": {
    "author": "HaaS Python",
    "author_email": "yinsuo.mys@alibaba-inc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": "\n## HaaS Python介绍\nHaaS Python是阿里云IoT团队最新研发的一套低代码编程框架，兼容MicroPython编程规范，依托HaaS平台软硬件积木提供AI、支付、蓝牙配网、云连接、UI等物联网场景常用的能力，从而解决了物联网应用开发难的问题。有了Python轻应用框架，物联网编程不再局限于专业软件开发人员，一般的技术员也可以快速实现复杂的物联网需求。\n更多HaaS Python介绍和开发资料见[HaaS Python官网](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.595660b1dZDX71#/?from=corp),[创意案例](https://haas.iot.aliyun.com/solution?from=crop), [硬件积木](https://haas.iot.aliyun.com/solution/hardware?from=corp)\n\nHaaS Python is a set of low-code programming frameworks newly developed by Alibaba Cloud IoT team. It is compatible with MicroPython programming specifications. It relies on the hardware and software building blocks of the HaaS platform to provide capabilities commonly used in IoT scenarios such as AI, payment, Bluetooth network configuration, cloud connection, and UI. Solve the difficult problem of IoT application development. With the Python light application framework, IoT programming is no longer limited to professional software developers, and general technicians can quickly implement complex IoT requirements.\nFor more HaaS Python introduction and development materials, see [HaaS Python official website](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.595660b1dZDX71#/?from=corp), [Creative Case](https://haas.iot.aliyun.com/solution?from=crop), [Hardware Building Blocks](https://haas.iot.aliyun.com/solution/hardware?from=corp)\n\n## 安装方法\n* 在[HaaS Python官网](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b50127119.0.0.4e1260b1ebMIf1#/)下载开发板对应的固件，并完成固件烧录\n\nDownload the firmware corresponding to the development board at [HaaS Python website](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b50127119.0.0.4e1260b1ebMIf1#/) and complete the firmware burning\n\n* 在开发板上运行以下命令完成安装和使用,如果您在使用过程中遇到问题，欢迎在[github上向我们提交issue](https://github.com/alibaba/AliOS-Things/issues)，我们的工程师会及时解答\n\nRun the following commands on the development board to complete the installation and use. If you encounter problems during use, please submit an issue to us on [github](https://github.com/alibaba/AliOS-Things/issues), Our engineers will answer in time\n```\nimport upip\nupip.install(\"haas-python-lcd1602\")\nimport haas-python-lcd1602\n```\n# LCD1602液晶屏 - LCD1602\n\n## 一、产品简介\nLCD1602 字符型液晶显示模块是专门用于显示字母、数字、符号等的点阵型液晶显示模块。分4位和8位数据传输方式。提供5x7点阵+游标的显示模式。提供显示数据缓冲区 DDRAM、字符发生器CGROM和字符发生器CGRAM，可以使用CGRAM来存储自己定义的最多8个5x8点阵的图形字符的字模数据。提供了丰富的指令设置：清显示；游标回原点；显示开/关；游标开/关；显示字符闪烁；游标移位；显示移位等。提供内部上电自动复位电路，当外加电源电压超过+4.5V时，自动对模块进行初始化操作，将模块设置为默认的显示工作状态。\n<div align=\"center\">\n<img src=\"./../../docs/images/lcd1602_front.jpg\"  width=40%/>\n</div>\n\n引脚定义：\n* VSS：电源地\n* VDD：电源+5V\n* VO：液晶显示偏压，接电位计VO\n* RS：数据/命令选择\n* RW：读/写选择\n* E：使能信号，用于数据传输\n* D0-D3：数据，暂未用\n* D4-D7：数据，接入 GPIO\n* A：背光源正极，接电源+5V\n* S：背光源负极，接电源地\n\n接线示意图：\n<div align=\"center\">\n<img src=\"./../../docs/images/lcd1602_pins.jpg\"  width=40%/>\n</div>\n\n## 二、技术参数\n* 显示容量：16×2个字符\n* 芯片工作电压：4.5—5.5V\n* 工作电流：2.0mA（5.0V）\n* 模块最佳工作电压：5.0V\n* 字符尺寸：2.95×4.35（W×H）mm\n\n## 三、软件接口\n\nLCD1602液晶屏HaaS Python驱动：[下载地址](https://github.com/alibaba/AliOS-Things/tree/master/haas_lib_bundles/python/libraries/lcd1602)\n<br>\n\n### LCD1602(...) - 创建 LCD1602 驱动对象\n* 函数原型：\n> drv = LCD1602(RS, RW, E, D4, D5, D6, D7)\n\n* 参数说明：\n\n|参数|类型|必选参数？|说明|\n|-----|----|:---:|----|\n|RS|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n|RW|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n|E|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n|D4|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n|D5|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n|D6|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n|D7|GPIO|是|调用此函数前需确保 GPIO 对象已经处于 open 状态|\n\n* 返回值：\nLCD1602 对象成功，返回 LCD1602 对象；LCD1602 对象创建失败，抛出 Exception\n\n* 示例代码：\n\n```python\nimport utime   # 延时函数在utime库中\nfrom driver import GPIO\nimport lcd1602\n\n# 初始化 LCD 的各个 GPIO 管脚\nprint('GPIO init begin')\n# 按照 board.json 中名为 \"RS\" 的设备节点的配置参数，如下以此类推\nRS = GPIO(); RS.open('RS')\nRW = GPIO(); RW.open('RW')\nE = GPIO(); E.open('E')\nD4 = GPIO(); D4.open('D4')\nD5 = GPIO(); D5.open('D5')\nD6 = GPIO(); D6.open('D6')\nD7 = GPIO(); D7.open('D7')\nprint('GPIO init done')\n\ndrv = LCD1602(RS, RW, E, D4, D5, D6, D7)\nprint('LCD inited!')\n```\n\n* 输出：\n```log\nGPIO init begin\nGPIO init done\nnoise inited!\n```\n\n### displayString(row, col, text) - 向 LCD 屏幕指定行列打印字符\n\n* 函数功能：\n先设置光标到指定行列偏移位置，然后打印字符，其中行列偏移为字符偏移而非点阵偏移，共2行16列\n\n* 函数原型：\n> drv.displayString(1, 0, 'Hello')\n\n* 参数说明：\n    * row 表示行偏移，范围是 0-1 表示 行1-行2\n    * col 表示列偏移，范围是 0-15 表示 列1-列16\n    * text 待打印的字符串\n\n* 返回值：\n成功打印的字符数量\n\n* 示例：\n\n```python\n# 在第二行，第一列打印字符 Hello\ndrv.displayString(1, 0, 'Hello')\nprint('LCD printed')\n```\n\n* 输出：\n```log\nLCD printed\n```\n\n## 四、接口案例\n此使用实例在 board.json 中定义了名为 RS, RW, E, D4, D5, D6, D7 的 GPIO 类型的对象。在 Python 脚本中初始化这些 GPIO 管脚并创建 LCD1602 驱动后，通过驱动控制屏幕初始化以及打印字符\n\n* 代码：\n```python\n# board.json配置：\n{\n    \"name\": \"board-name\",\n    \"version\": \"1.0.0\",\n    \"io\": {\n      \"RS\": { \"type\": \"GPIO\", \"port\": 16, \"dir\": \"output\", \"pull\": \"pullup\" },\n      \"RW\": { \"type\": \"GPIO\", \"port\": 17, \"dir\": \"output\", \"pull\": \"pullup\" },\n      \"E\": { \"type\": \"GPIO\", \"port\": 5, \"dir\": \"output\", \"pull\": \"pullup\" },\n\n      \"D4\": { \"type\": \"GPIO\", \"port\": 15, \"dir\": \"output\", \"pull\": \"pullup\" },\n      \"D5\": { \"type\": \"GPIO\", \"port\": 2, \"dir\": \"output\", \"pull\": \"pullup\" },\n      \"D6\": { \"type\": \"GPIO\", \"port\": 0, \"dir\": \"output\", \"pull\": \"pullup\" },\n      \"D7\": { \"type\": \"GPIO\", \"port\": 4, \"dir\": \"output\", \"pull\": \"pullup\" }\n    },\n    \"debugLevel\": \"ERROR\",\n    \"repl\": \"disable\"\n}\n\n```\n```python\n# Python代码\nimport utime   # 延时函数在utime库中\nfrom driver import GPIO\nimport lcd1602\n\nif __name__ == '__main__':\n    # 初始化 LCD 的各个 GPIO 管脚\n    print('GPIO init begin')\n    # 按照 board.json 中名为 \"RS\" 的设备节点的配置参数，如下以此类推\n    RS = GPIO(); RS.open('RS')\n    RW = GPIO(); RW.open('RW')\n    E = GPIO(); E.open('E')\n    D4 = GPIO(); D4.open('D4')\n    D5 = GPIO(); D5.open('D5')\n    D6 = GPIO(); D6.open('D6')\n    D7 = GPIO(); D7.open('D7')\n    print('GPIO init done')\n\n    drv = LCD1602(RS, RW, E, D4, D5, D6, D7)\n    print('LCD inited!')\n    drv.displayString(0, 0, 'Hello world')\n    print('LCD printed')\n```\n\n* 输出：\n```python\n...\nGPIO init begin\nGPIO init done\nLCD inited!\nLCD printed\n...\n\n```\n\n## 五、通信协议\n主控芯片和 LCD1602 控制器之间通信为 GPIO 通讯，分为初始化阶段以及指令通讯阶段。\n* 初始化阶段\n    * 通过三次发送 0x03，向 LCD 控制器发起初始化请求，每次间隔不同；\n    * 初始化后立即设置数据/命令传输模式为 4bits 模式；\n    * 然后进行功能、显示模式、打印项模式的设置，均为指令通讯方式；\n\n<div align=\"center\">\n<img src=\"./../../docs/images/lcd1602_init.jpg\"  width=50%/>\n</div>\n\n* 指令通讯阶段\n    * 通过 RS=0，选择 LCD 控制器的指令寄存器，随后通过D4-D7发送指令内容，可实现：清显示；游标回原点；显示开/关；游标开/关；显示字符闪烁；游标移位；显示移位等。\n    * 通过 RS=1，选择 LCD 控制器的数据寄存器，随后通过D4-D7发送数据内容，可实现向 LCD 屏幕打印字符的功能；\n\n<div align=\"center\">\n<img src=\"./../../docs/images/lcd1602_instructions.jpg\"  width=50%/>\n</div>\n\n* 4线传输机制\n    * 指令和数据每次传输均为 8bits，因此分为两次传输，每次传输4bits\n    * 传输时序：\n        * RS=0/1 先稳定寄存器显示选择\n        * 因为目前我们仅用到写，因此 RW=0 同时保持拉低\n        * 随即准备数据到 D4-D7 管脚，准备通知 LCD 读取\n        * 控制 E 管脚产生下降沿，其中高电平保持需要>450ns\n        * 因为 LCD 控制器获得下降沿时需要读取数据并执行指令，因此再保持一个命令执行的时间稳定，时间为 40us\n\n<div align=\"center\">\n<img src=\"./../../docs/images/lcd1602_rw_timing.jpg\"  width=50%/>\n</div>\n\n## 六、工作原理\n从如下实物图可以看到液晶显示屏，并从 LCD 控制器引出 16 个管脚用于控制指令/数据输入，通过 GPIO 控制。\n* VSS 为地电源\n* VDD 接5V正电源\n* VO 为液晶显示器对比度调整端，接正电源时对比度最弱，接地时对比度最高，对比度过高时会产生“鬼影”现象，使用时可以通过一个10k欧姆的电位器调整其对比度。\n* RS 为寄存器选择脚，高电平时选择数据寄存器、低电平时选择指令寄存器。\n* RW 为读/写信号线，高电平时进行读操作，低电平时进行写操作。当RS和RW共同为低电平时可以写入指令或显示地址；当RS为低电平，RW为高电平时，可以读忙信号；当RS为高电平，RW为低电平时，可以写入数据。\n* E 端为使能端，当E端由高电平跳变为低电平时，液晶模块读取 D0-D7 数据执行命令。\n* D0-D7 为8位双向数据线。\n* A 背光源正极。\n* K 背光源负极。\n\n<div align=\"center\">\n<img src=\"./../../docs/images/lcd1602_front.jpg\"  width=50%/>\n</div>\n\n## 参考文献及购买链接\n[1] [DOT MATRIX LIQUID CRYSTAL DISPLAY MODULE](http://hades.mech.northwestern.edu/images/f/f7/LCD16x2_HJ1602A.pdf)\n[2] [LCD1602系列](https://www.waveshare.com/datasheet/LCD_en_PDF/LCD1602.pdf)<br>\n[3] [商品链接]()",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://haas.iot.aliyun.com/?from=corp",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "haas-python-lcd1602",
    "package_url": "https://pypi.org/project/haas-python-lcd1602/",
    "platform": null,
    "project_url": "https://pypi.org/project/haas-python-lcd1602/",
    "project_urls": {
      "Bug Tracker": "https://github.com/alibaba/AliOS-Things/issues",
      "Documentation": "https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.81b460b1lzwYKw#/?from=corp",
      "Homepage": "https://haas.iot.aliyun.com/?from=corp",
      "Source Code": "https://github.com/alibaba/AliOS-Things"
    },
    "release_url": "https://pypi.org/project/haas-python-lcd1602/0.0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is lcd1602 driver for HaaS Python. HaaS Python is forked from micropython.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14170637,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db78c198a0cd0fc45f86aa65d47c16c6cbc1da2d2daebcc9d65ffd942d32bb94",
          "md5": "0fc115243036ca7455c0d079a801e53b",
          "sha256": "019d65f59a933e9b9b1480c910ea26843e2186e816d2fd4cb7651004b5eecafc"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0fc115243036ca7455c0d079a801e53b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11458,
        "upload_time": "2022-06-06T12:46:53",
        "upload_time_iso_8601": "2022-06-06T12:46:53.564219Z",
        "url": "https://files.pythonhosted.org/packages/db/78/c198a0cd0fc45f86aa65d47c16c6cbc1da2d2daebcc9d65ffd942d32bb94/haas-python-lcd1602-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5c619f3ae433cfd7210904bbc5b7cb841f5cad0f3099878ecb6be432102fe95",
          "md5": "4dd8e169c255fbffd541b1baca554eaf",
          "sha256": "340bce2d4d49452dfb5fd0445fe87addc6bb374188c264d5418d32d52175162e"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4dd8e169c255fbffd541b1baca554eaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11467,
        "upload_time": "2022-06-07T08:40:16",
        "upload_time_iso_8601": "2022-06-07T08:40:16.789532Z",
        "url": "https://files.pythonhosted.org/packages/d5/c6/19f3ae433cfd7210904bbc5b7cb841f5cad0f3099878ecb6be432102fe95/haas-python-lcd1602-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dee2910a6d416ea9fa57e22d5df406670a6e8e0a19f7936dbb6eabf773ae0178",
          "md5": "a8f31b355f686c094f27292fc669df1e",
          "sha256": "3493b6afd55f38f979d92eda671a0464d9cf3c8ddb95253e178b8498baa31e87"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a8f31b355f686c094f27292fc669df1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11470,
        "upload_time": "2022-06-08T07:43:34",
        "upload_time_iso_8601": "2022-06-08T07:43:34.277534Z",
        "url": "https://files.pythonhosted.org/packages/de/e2/910a6d416ea9fa57e22d5df406670a6e8e0a19f7936dbb6eabf773ae0178/haas-python-lcd1602-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d08884055ac17eb04703bca878c23bc28e3f0a1aa8febd109daa75672462e6d9",
          "md5": "a82fc234bdaf24f46309da13c8eac3fa",
          "sha256": "93c4eacbf174327c3481f6e012e79fd217c0400aa84c6de18439afcde6c99931"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a82fc234bdaf24f46309da13c8eac3fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11465,
        "upload_time": "2022-06-10T01:37:44",
        "upload_time_iso_8601": "2022-06-10T01:37:44.575814Z",
        "url": "https://files.pythonhosted.org/packages/d0/88/84055ac17eb04703bca878c23bc28e3f0a1aa8febd109daa75672462e6d9/haas-python-lcd1602-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09b8dae9bba4a8b8230173b573c0b6a730dcbd5d6ae2fea6d30dd2a454591635",
          "md5": "57b4b867dba7ed3f54a2534ee0b6607e",
          "sha256": "0ccee4e3c6d0e59aaf4c9fbf75f69fea31c64ee955843cfbc4c502e1d1b43400"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "57b4b867dba7ed3f54a2534ee0b6607e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11468,
        "upload_time": "2022-06-14T06:06:02",
        "upload_time_iso_8601": "2022-06-14T06:06:02.347214Z",
        "url": "https://files.pythonhosted.org/packages/09/b8/dae9bba4a8b8230173b573c0b6a730dcbd5d6ae2fea6d30dd2a454591635/haas-python-lcd1602-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "265331412a33e5f0886a4dfa78085ba6e6cffda9e382164a700eef3eda32eba8",
          "md5": "45fd1221cadd0f20165dc7b5acb3644d",
          "sha256": "257dc7ec0cc1619c645bc5bc1a077bd423692dcd55e3930d2209d8cf3b6eff2b"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "45fd1221cadd0f20165dc7b5acb3644d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11466,
        "upload_time": "2022-06-15T06:18:51",
        "upload_time_iso_8601": "2022-06-15T06:18:51.577313Z",
        "url": "https://files.pythonhosted.org/packages/26/53/31412a33e5f0886a4dfa78085ba6e6cffda9e382164a700eef3eda32eba8/haas-python-lcd1602-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3383049e820656cb5bdc33365b0940e7194ad981cbfb998026d33854e94b398a",
          "md5": "b58a97970e6bf9b64f0d5c154fb8d422",
          "sha256": "2e81717951dabbab52c5bb33622400795d6fad61cf10977f9af7dcb841189af2"
        },
        "downloads": -1,
        "filename": "haas-python-lcd1602-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b58a97970e6bf9b64f0d5c154fb8d422",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11468,
        "upload_time": "2022-06-18T10:15:28",
        "upload_time_iso_8601": "2022-06-18T10:15:28.319058Z",
        "url": "https://files.pythonhosted.org/packages/33/83/049e820656cb5bdc33365b0940e7194ad981cbfb998026d33854e94b398a/haas-python-lcd1602-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3383049e820656cb5bdc33365b0940e7194ad981cbfb998026d33854e94b398a",
        "md5": "b58a97970e6bf9b64f0d5c154fb8d422",
        "sha256": "2e81717951dabbab52c5bb33622400795d6fad61cf10977f9af7dcb841189af2"
      },
      "downloads": -1,
      "filename": "haas-python-lcd1602-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "b58a97970e6bf9b64f0d5c154fb8d422",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11468,
      "upload_time": "2022-06-18T10:15:28",
      "upload_time_iso_8601": "2022-06-18T10:15:28.319058Z",
      "url": "https://files.pythonhosted.org/packages/33/83/049e820656cb5bdc33365b0940e7194ad981cbfb998026d33854e94b398a/haas-python-lcd1602-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}