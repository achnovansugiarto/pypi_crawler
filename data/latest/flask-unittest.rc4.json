{
  "info": {
    "author": "TotallyNotChase",
    "author_email": "totallynotchase42@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# flask-unittest\nA hassle free solution to testing flask application using `unittest`\n\nProvides functionality for testing using the `Flask` object, the `FlaskClient` object, a combination of the two, or even a live flask server!\n\nThis library is intended to provide utilities that help the user follow the [official flask application testing guidelines](https://flask.palletsprojects.com/en/1.1.x/testing/). It is recommended you familiarize yourself with that page.\n\nUnless you're interested in testing a live flask server using a headless browser. In which case, familiarity with your preferred headless browser is enough.\n\n# Features\n* Test flask applications using a `Flask` object\n  * Access to `app_context`, `test_request_context` etc\n  * Access to flask globals like `g`, `request`, and `session`\n  * Access to `test_client` through the `Flask` object\n  * Same `Flask` object will be usable in the test method and its corresponding `setUp` and `tearDown` methods\n  * App is created per test method in the testcase\n* Test flask applications using a `FlaskClient` object\n  * Access to flask globals like `g`, `request`, and `session`\n  * Test your flask app in an **API centric way** using the functionality provided by `FlaskClient`\n  * Same `FlaskClient` object will be usable in the test method and its corresponding `setUp` and `tearDown` methods\n  * The `FlaskClient` is created per test method of the testcase by using the given `Flask` object (App)\n  * App can either be a constant class property throughout the testcase, or be created per test method\n* Test flask applications running *live* on localhost - using your preferred **headless browser** (e.g `selenium`, `pyppeteer` etc)\n  * Contrary to the previous ones, this functionality is handled by a test suite, rather than a test case\n  * The flask server is started in a daemon thread when the `LiveTestSuite` runs - it runs for the duration of the program\n* Simple access to the context so you can access flask globals (`g`, `request`, and `session`) with minimal headaches and no gotchas!\n* Support for using generators as `create_app` - essentially emulating `pytest`'s fixtures (more of that in `example/tests/`)\n* No extra dependencies! (well, except for `flask`...) - easily integratable with the built in `unittest` module\n\n# Quick Start\nInstall `flask-unittest` from pypi using `pip`\n```bash\npip install flask-unittest\n```\n\nImport in your module and start testing!\n```py\nimport flask_unittest\n```\n\nNow, before moving on to the examples below - I **highly recommend** checking out the official [Testing Flask Applications example](https://flask.palletsprojects.com/en/1.1.x/testing/). It's *extremely simple* and should take only 5 minutes to digest.\n\nAlternatively, you can directly dive into the examples at [`tests/`](./tests/) and [`example/tests/`](./example/tests). Though this might be a bit intimidating if you're just starting out at testing flask apps.\n\n**NOTE**: For all the following testcases using `FlaskClient`, it is recommended to set `.testing` on your `Flask` app to `True` (i.e `app.testing = True`)\n\n# Test using `FlaskClient`\nIf you want to use a [`FlaskClient`](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.test_client) object to test - this is the testcase for you!\n\nThis testcase creates a `FlaskClient` object for each test method. But the `app` property is kept constant.\n```py\nimport flask_unittest\nimport flask.globals\n\nclass TestFoo(flask_unittest.ClientTestCase):\n    # Assign the `Flask` app object\n    app = ...\n\n    def setUp(self, client):\n        # Perform set up before each test, using client\n        pass\n\n    def tearDown(self, client):\n        # Perform tear down after each test, using client\n        pass\n\n    '''\n    Note: the setUp and tearDown method don't need to be explicitly declared\n    if they don't do anything (like in here) - this is just an example\n    Only declare the setUp and tearDown methods with a body, same as regular unittest testcases\n    '''\n\n    def test_foo_with_client(self, client):\n        # Use the client here\n        # Example request to a route returning \"hello world\" (on a hypothetical app)\n        rv = client.get('/hello')\n        self.assertInResponse(rv, 'hello world!')\n\n    def test_bar_with_client(self, client):\n        # Use the client here\n        # Example login request (on a hypothetical app)\n        rv = client.post('/login', {'username': 'pinkerton', 'password': 'secret_key'})\n        # Make sure rv is a redirect request to index page\n        self.assertLocationHeader('http://localhost/')\n        # Make sure session is set\n        self.assertIn('user_id', flask.globals.session)\n```\nRemember to assign a correctly configured `Flask` app object to `app`!\n\nEach test method, as well as the `setUp` and `tearDown` methods, should take `client` as a parameter. You can name this parameter whatever you want of course but the 2nd parameter (including `self` as first) is a `FlaskClient` object.\n\nNote that the `client` is different for *each test method*. But it's the same for a singular test method and its corresponding `setUp` and `tearDown` methods.\n\nWhat does this mean? Well, when it's time to run `test_foo_with_client`, a `FlaskClient` object is created using `app.test_client()`. Then this is passed to `setUp`, which does its job of setup. After that, the same `client` is passed to `test_foo_with_client`, which does the testing. Finally, the same `client` again, is passed to `tearDown` - which cleans the stuff up.\n\nNow when it's time to run `test_bar_with_client`, a new `FlaskClient` object is created and so on.\n\nThis essentially means that any global changes (such as `session` and cookies) you perform in `setUp` using `client`, will be persistent in the actual test method. And the changes in the test method will be persistent in the `tearDown`. These changes get destroyed in the next test method, where a new `FlaskClient` object is created.\n\n**NOTE**: If you want to **disable** the use of cookies on `client`, you need to put `test_client_use_cookies = False` in your testcase body.\n\nYou can also pass in extra kwargs to the `test_client()` call by setting `test_client_kwargs` in your testcase body.\n\n**Full Example**: [`flask_client_test.py`](./tests/flask_client_test.py)\n\n# Test using `Flask`\nIf you want to use a [`Flask`](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask) object to test - this is the testcase for you!\n\nThis testcase creates a `Flask` object for each test method, using the `create_app` method implemented by the user\n```py\nimport flask_unittest\nfrom flaskr.db import get_db\n\nclass TestFoo(flask_unittest.AppTestCase):\n\n    def create_app(self):\n        # Return/Yield a `Flask` object here\n        pass\n\n    def setUp(self, app):\n        # Perform set up before each test, using app\n        pass\n\n    def tearDown(self, app):\n        # Perform tear down after each test, using app\n        pass\n\n    '''\n    Note: the setUp and tearDown method don't need to be explicitly declared\n    if they don't do anything (like in here) - this is just an example\n    Only declare the setUp and tearDown methods with a body, same as regular unittest testcases\n    '''\n\n    def test_foo_with_app(self, app):\n        # Use the app here\n        # Example of using test_request_context (on a hypothetical app)\n        with app.test_request_context('/1/update'):\n            self.assertEqual(request.endpoint, 'blog.update')\n\n    def test_bar_with_app(self, app):\n        # Use the app here\n        # Example of using client from app (on a hypothetical app)\n        with app.test_client() as client:\n            rv = client.get('/hello')\n            self.assertInResponse(rv, 'hello world!')\n\n    def test_baz_with_app(self, app):\n        # Use the app here\n        # Example of using app_context (on a hypothetical app)\n        with app.app_context():\n            get_db().execute(\"INSERT INTO user (username, password) VALUES ('test', 'testpass');\")\n```\nThe `create_app` function should return a correctly configured `Flask` object representing the webapp to test\n\nYou can also do any set up, extra config for the app (db init etc) here\n\nIt's also possible (and encouraged) to `yield` a `Flask` object here instead of `return`ing one (essentially making this a generator function)\nThis way, you can put cleanup right here after the `yield` and they will be executed once the test method has run\n\nSee [Emulating official flask testing example using `flask-unittest`](#emulating-official-flask-testing-example-using-flask-unittest)\n\nEach test method, as well as the `setUp` and `tearDown` methods, should take `app` as a parameter. You can name this parameter whatever you want of course but the 2nd parameter (including `self` as first) is a `Flask` object returned/yielded from the user provided `create_app`.\n\nNote that the `app` is different for *each test method*. But it's the same for a singular test method and its corresponding `setUp` and `tearDown` methods.\n\nWhat does this mean? Well, when it's time to run `test_foo_with_app`, a `Flask` object is created using `create_app`. Then this is passed to `setUp`, which does its job of setup. After that, the same `app` is passed to `test_foo_with_app`, which does the testing. Finally, the same `app` again, is passed to `tearDown` - which cleans the stuff up.\n\nNow when it's time to run `test_bar_with_app` - `create_app` is called again and a new `Flask` object is created and so on.\n\nIf `create_app` is a generator function. All the stuff after `yield app` will be executed after the test method (and its `tearDown`, if any) has run\n\n**Full Example**: [`flask_app_test.py`](./tests/flask_app_test.py)\n\n# Test using both `Flask` and `FlaskClient`\nIf you want to use both [`Flask`](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask) *and* [`FlaskClient`](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.test_client) to test - this is the testcase for you!\n\nThis testcase creates a `Flask` object, using the `create_app` method implemented by the user, *and* a `FlaskClient` object from said `Flask` object, for each test method\n```py\nimport flask_unittest\nfrom flaskr import get_db\n\nclass TestFoo(flask_unittest.AppClientTestCase):\n\n    def create_app(self):\n        # Return/Yield a `Flask` object here\n        pass\n\n    def setUp(self, app, client):\n        # Perform set up before each test, using app and client\n        pass\n\n    def tearDown(self, app, client):\n        # Perform tear down after each test, using app and client\n        pass\n\n    '''\n    Note: the setUp and tearDown method don't need to be explicitly declared\n    if they don't do anything (like in here) - this is just an example\n    Only declare the setUp and tearDown methods with a body, same as regular unittest testcases\n    '''\n\n    def test_foo_with_both(self, app, client):\n        # Use the app and client here\n        # Example of registering a user and checking if the entry exists in db (on a hypothetical app)\n        response = client.post('/auth/register', data={'username': 'a', 'password': 'a'})\n        self.assertLocationHeader(response, 'http://localhost/auth/login')\n\n        # test that the user was inserted into the database\n        with app.app_context():\n            self.assertIsNotNone(get_db().execute(\"select * from user where username = 'a'\").fetchone())\n\n    def test_bar_with_both(self, app, client):\n        # Use the app and client here\n        # Example of creating a post and checking if the entry exists in db (on a hypothetical app)\n        client.post('/create', data={'title': 'created', 'body': ''})\n\n        with app.app_context():\n            db = get_db()\n            count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]\n            self.assertEqual(count, 2)\n```\nThe `create_app` function should return a correctly configured `Flask` object representing the webapp to test\n\nYou can also do any set up, extra config for the app (db init etc) here\n\nIt's also possible (and encouraged) to `yield` a `Flask` object here instead of `return`ing one (essentially making this a generator function)\nThis way, you can put cleanup right here after the `yield` and they will be executed once the test method has run\n\nSee [Emulating official flask testing example using `flask-unittest`](#emulating-official-flask-testing-example-using-flask-unittest)\n\nEach test method, as well as the `setUp` and `tearDown` methods, should take `app` and `client` as a parameter. You can name these parameters whatever you want of course but the 2nd parameter (including `self` as first) is a `Flask` object returned/yielded from the user provided `create_app`, and the third parameter is a `FlaskClient` object returned from calling `.test_client` on said `Flask` object.\n\nNote that the `app` and `client` are different for *each test method*. But they are the same for a singular test method and its corresponding `setUp` and `tearDown` methods.\n\nWhat does this mean? Well, when it's time to run `test_foo_with_both`, a `Flask` object is created using `create_app()`, and a `FlaskClient` object is created from it. Then they are passed to `setUp`, which does its job of setup. After that, the same `app` and `client` are passed to `test_foo_with_both`, which does the testing. Finally, the same `app` and `client` again, are passed to `tearDown` - which cleans the stuff up.\n\nNow when it's time to run `test_bar_with_app` - `create_app` is called again to create a new `Flask` object, and also `.test_client` to create a new `FlaskClient` object and so on.\n\nIf `create_app` is a generator function. All the stuff after `yield app` will be executed after the test method (and its `tearDown` if any) has run\n\n**Full Example**: [`flask_appclient_test.py`](./tests/flask_appclient_test.py)\n\n# Test using a headless browser (eg `selenium`, `pyppeteer` etc)\nIf you want to test a live flask server using a headless browser - `LiveTestSuite` is for you!\n\nUnlike the previous ones, this functionality relies on the use of a **suite**, *not a testcase*. The testcases should inherit from `LiveTestCase` but the real juice is in `LiveTestSuite`.\n\nAn example testcase for this would look like-\n```py\nimport flask_unittest\nfrom selenium.webdriver import Chrome, ChromeOptions\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nclass TestFoo(flask_unittest.LiveTestCase):\n    driver: Union[Chrome, None] = None\n    std_wait: Union[WebDriverWait, None] = None\n\n    ### setUpClass and tearDownClass for the entire class\n    # Not quite mandatory, but this is the best place to set up and tear down selenium\n\n    @classmethod\n    def setUpClass(cls):\n        # Initiate the selenium webdriver\n        options = ChromeOptions()\n        options.add_argument('--headless')\n        cls.driver = Chrome(options=options)\n        cls.std_wait = WebDriverWait(cls.driver, 5)\n\n    @classmethod\n    def tearDownClass(cls):\n        # Quit the webdriver\n        cls.driver.quit()\n\n    ### Actual test methods\n\n    def test_foo_with_driver(self):\n        # Use self.driver here\n        # You also have access to self.server_url and self.app\n        # Example of using selenium to go to index page and try to find some elements (on a hypothetical app)\n        self.driver.get(self.server_url)\n        self.std_wait.until(EC.presence_of_element_located((By.LINK_TEXT, 'Register')))\n        self.std_wait.until(EC.presence_of_element_located((By.LINK_TEXT, 'Log In')))\n```\nThis is pretty straight forward, it's just a regular test case that you would use if you spawned the flask server from the terminal before running tests\n\nNow, you need to use the `LiveTestSuite` to run this. The previous testcases could be run using `unitttest.TestSuite`, or simply `unittest.main` but this *has to be* run using the custom suite\n```py\n# Assign the flask app here\napp = ...\n\n# Add TestFoo to suite\nsuite = flask_unittest.LiveTestSuite(app)\nsuite.addTest(unittest.makeSuite(TestFoo))\n\n# Run the suite\nrunner = unittest.TextTestRunner(verbosity=2)\nrunner.run(suite)\n```\nThe `LiveTestSuite` requires a built and configured `Flask` app object. It'll spawn this flask app using `app.run` as a daemon thread.\n\nBy default, the app runs on host 127.0.0.1 and port 5000. If you'd like to change this assign your custom host (as a `str`) and a port (as an `int`) to `app.config` under the key `HOST` and `PORT` respectively. (`app.config['HOST'] = '0.0.0.0'; app.config['PORT'] = 7000`)\n\nThe server is started when the suite is first run and it runs for the duration of the program\n\nYou will have access to the `app` passed to the suite inside `LiveTestCase`, using `self.app`. You will also have access to the url the server is running on inside the testcase, using `self.server_url`\n\n**Full Example** (of `LiveTestCase`): [`flask_live_test.py`](./tests/flask_live_test.py)\n**Full Example** (of `LiveTestSuite`): [`__init__.py`](./tests/__init__.py)\n\n# About request context and flask globals\nBoth `ClientTestCase` and `AppClientTestCase` allow you to use flask gloabls, such as `request`, `g`, and `session`, directly in your test method (and your `setUp` and `tearDown` methods)\n\nThis is because the `client` is *instantiated using a `with` block*, and the test method, the `setUp` and `tearDown` methods **happen inside the `with` block**\n\nVery rough psuedocode representation of this would look like-\n```py\nwith app.test_client() as client:\n    self.setUp(client)\n    self.test_method(client)\n    self.tearDown(client)\n```\nThis means you can treat everything in your test method, and `setUp` and `tearDown` methods, as if they are within a `with client:` block\n\nPractically, this lets you use the flask globals after making a request using `client` - which is great for testing\n\nAdditional info in the [official docs](https://flask.palletsprojects.com/en/1.1.x/testing/#keeping-the-context-around)\n\n# Emulating official flask testing example using `flask-unittest`\nThe official flask testing example can be found [in the flask repo](https://github.com/pallets/flask/tree/master/examples/tutorial/tests)\n\nThe original tests are written using `pytest`. This example demonstrates how `flask-unittest` can provide the same functionality for you, with the same degree of control!\n\nNote that this demonstration does not implement the `test_cli_runner` - since that is not directly supported by `flask-unittest` (yet). However, it's completely possible to simply use `.test_cli_runner()` on the `app` object in the testcases provided by `flask-unittest` to emulate this.\n\nThe primary thing to demonstrate here, is to emulate the pytest fixtures defined in the original [`conftest.py`](https://github.com/pallets/flask/blob/master/examples/tutorial/tests/conftest.py)-\n```py\n@pytest.fixture\ndef app():\n    \"\"\"Create and configure a new app instance for each test.\"\"\"\n    # create a temporary file to isolate the database for each test\n    db_fd, db_path = tempfile.mkstemp()\n    # create the app with common test config\n    app = create_app({\"TESTING\": True, \"DATABASE\": db_path})\n\n    # create the database and load test data\n    with app.app_context():\n        init_db()\n        get_db().executescript(_data_sql)\n\n    yield app\n\n    # close and remove the temporary database\n    os.close(db_fd)\n    os.unlink(db_path)\n\n\n@pytest.fixture\ndef client(app):\n    \"\"\"A test client for the app.\"\"\"\n    return app.test_client()\n```\n\nAs you can see, this creates the app **and** the test client *per test*. So we'll be using `AppClientTestCase` for this.\n\nLet's make a base class that provides functionality for this - all the other testcases can inherit from it. Defined in [`conftest.py`](./example/tests/conftest.py)\n\n```py\nimport flask_unittest\n\n\nclass TestBase(flask_unittest.AppClientTestCase):\n\n    def create_app(self):\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n        # create the app with common test config\n        app = create_app({\"TESTING\": True, \"DATABASE\": db_path})\n\n        # create the database and load test data\n        with app.app_context():\n            init_db()\n            get_db().executescript(_data_sql)\n\n            # Yield the app\n            '''\n            This can be outside the `with` block too, but we need to \n            call `close_db` before exiting current context\n            Otherwise windows will have trouble removing the temp file\n            that doesn't happen on unices though, which is nice\n            '''\n            yield app\n\n            ## Close the db\n            close_db()\n        \n        ## Cleanup temp file\n        os.close(db_fd)\n        os.remove(db_path)\n```\n\nThis is very similar to the original pytest fixtures and achieves the exact same functionality in the actual testcases too!\n\nDo note however, there's an extra call inside `with app.app_context()` - `close_db`. Windows struggles to remove the temp database using `os.remove` if it hasn't been closed already - so we have to do that (this is true for the original pytest methods too).\n\nAlso of note, creation of the `AuthActions` object should be handled manually in each of the test case. This is just how `unittest` works in contrast to `pytest`. This shouldn't pose any issue whatsoever though.\n\nNow let's look at an actual testcase. We'll be looking at `test_auth.py`, since it demonstrates the use of `app`, `client` and the flask globals very nicely.\n\nFor context, the original file is defined at [`test_auth.py`](https://github.com/pallets/flask/blob/master/examples/tutorial/tests/test_auth.py)\n\nThe full emulation of this file is at [`test_auth.py`](./example/tests/test_auth.py)\n\nOk! Let's look at the emulation of `test_register`.\n\nFor context, this is the original function-\n```py\ndef test_register(client, app):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/register\").status_code == 200\n\n    # test that successful registration redirects to the login page\n    response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n    assert \"http://localhost/auth/login\" == response.headers[\"Location\"]\n\n    # test that the user was inserted into the database\n    with app.app_context():\n        assert (\n            get_db().execute(\"select * from user where username = 'a'\").fetchone()\n            is not None\n        )\n```\n\nAnd here's the `flask-unittest` version!\n```py\nfrom example.tests.conftest import AuthActions, TestBase\n\n\nclass TestAuth(TestBase):\n\n    def test_register(self, app, client):\n        # test that viewing the page renders without template errors\n        self.assertStatus(client.get(\"/auth/register\"), 200)\n\n        # test that successful registration redirects to the login page\n        response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n        self.assertLocationHeader(response, \"http://localhost/auth/login\")\n\n        # test that the user was inserted into the database\n        with app.app_context():\n            self.assertIsNotNone(\n                get_db().execute(\"select * from user where username = 'a'\").fetchone()\n            )\n```\nSee how similar it is? The only difference is that the function should be a method in a class that is extending `flask_unittest.AppClientTestCase` with `create_app` defined. In our case, that's `TestBase` from `conftest.py` - so we extend from that.\n\nAs mentioned previously, each test method of an `AppClientTestCase` should have the parameters `self, app, client` - not necessarily with the same names but the second param **will be** the `Flask` object, and the third param **will be** the `FlaskClient` object\n\nAlso, this is using `self.assert...` functions as per `unittest` convention. However, regular `assert`s should work just fine.\n\nNice! Let's look at a function that uses flask globals - `test_login`\n\nHere's the original snippet-\n```py\ndef test_login(client, auth):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/login\").status_code == 200\n\n    # test that successful login redirects to the index page\n    response = auth.login()\n    assert response.headers[\"Location\"] == \"http://localhost/\"\n\n    # login request set the user_id in the session\n    # check that the user is loaded from the session\n    with client:\n        client.get(\"/\")\n        assert session[\"user_id\"] == 1\n        assert g.user[\"username\"] == \"test\"\n\n```\n\nAnd here's the `flask-unittest` version-\n```py\nclass TestAuth(TestBase):\n    \n    def test_login(self, _, client):\n        # test that viewing the page renders without template errors\n        self.assertStatus(client.get(\"/auth/login\"), 200)\n\n        # test that successful login redirects to the index page\n        auth = AuthActions(client)\n        response = auth.login()\n        self.assertLocationHeader(response, \"http://localhost/\")\n\n        # login request set the user_id in the session\n        # check that the user is loaded from the session\n        client.get(\"/\")\n        self.assertEqual(session[\"user_id\"], 1)\n        self.assertEqual(g.user[\"username\"], \"test\")\n```\n\n(this is a continuation of the previous example for `test_register`)\n\nOnce again, very similar. But there's a couple of things to note here.\n\nFirstly, notice we are ignoring the second argument of `test_login`, since we have no reason to use `app` here. We do, however, need to use the `FlaskClient` object\n\nAlso notice, we don't have to do `with client` to access the request context. `flask-unittest` already handles this for us, so we have direct access to `session` and `g`.\n\nLet's check out a case where we only use the `Flask` object and not the `FlaskClient` object - in which case, we can use `AppTestCase`.\n\nThe original function, `test_get_close_db`, is defined at [`test_db.py`](https://github.com/pallets/flask/blob/master/examples/tutorial/tests/test_db.py)\n\n```py\ndef test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute(\"SELECT 1\")\n\n    assert \"closed\" in str(e.value)\n```\n\nThe `flask-unittest` version can be seen at [`test_db.py`](./example/tests/test_db.py)\n\n```py\nimport flask_unittest\n\nclass TestDB(flask_unittest.AppTestCase):\n\n   # create_app omitted for brevity - remember to include it!\n   \n    def test_get_close_db(self, app):\n        with app.app_context():\n            db = get_db()\n            assert db is get_db()\n\n        try:\n            db.execute(\"SELECT 1\")\n        except sqlite3.ProgrammingError as e:\n            self.assertIn(\"closed\", str(e.args[0]))\n\n```\n\nVery similar once again!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TotallyNotChase/flask-unittest",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-unittest",
    "package_url": "https://pypi.org/project/flask-unittest/",
    "platform": "any",
    "project_url": "https://pypi.org/project/flask-unittest/",
    "project_urls": {
      "Homepage": "https://github.com/TotallyNotChase/flask-unittest"
    },
    "release_url": "https://pypi.org/project/flask-unittest/0.1.3/",
    "requires_dist": [
      "Flask (>=1.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Unit testing flask applications made easy!",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14035463,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca330456330d3e14bc0666baa5e1857b05543d8c2dbabd1b7f5931cc536bced8",
          "md5": "4c7c011589fb7120a38f527bad955bc0",
          "sha256": "ef22fa455d5daec95fc162ace6dba0463c6c4fd339db30e6a2dbe2dc205b55a7"
        },
        "downloads": -1,
        "filename": "flask_unittest-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c7c011589fb7120a38f527bad955bc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16449,
        "upload_time": "2020-11-01T17:25:22",
        "upload_time_iso_8601": "2020-11-01T17:25:22.074781Z",
        "url": "https://files.pythonhosted.org/packages/ca/33/0456330d3e14bc0666baa5e1857b05543d8c2dbabd1b7f5931cc536bced8/flask_unittest-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a27092dfc21cb8b2af9dcf3abb4bf482211ae042edfbba0262c511b9c448a86d",
          "md5": "6913f398c2ee86036fa69ce112819215",
          "sha256": "5233da6b5a967e39470a2c524dca073e45c41581b632f4318ab769dfeb9f52b0"
        },
        "downloads": -1,
        "filename": "flask-unittest-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6913f398c2ee86036fa69ce112819215",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27509,
        "upload_time": "2020-11-01T17:25:26",
        "upload_time_iso_8601": "2020-11-01T17:25:26.006781Z",
        "url": "https://files.pythonhosted.org/packages/a2/70/92dfc21cb8b2af9dcf3abb4bf482211ae042edfbba0262c511b9c448a86d/flask-unittest-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3db4a03e3c506cef0d3262250ec628ba27caddef78f9b131d15ee3537317e556",
          "md5": "8a06514cf0635f1c24552285d0200479",
          "sha256": "fe679ab4fcfb9eaaa6e125bf35bf724ef826c0970496447d3fa2d32e2cfb458f"
        },
        "downloads": -1,
        "filename": "flask_unittest-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a06514cf0635f1c24552285d0200479",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16476,
        "upload_time": "2020-11-12T09:07:21",
        "upload_time_iso_8601": "2020-11-12T09:07:21.629744Z",
        "url": "https://files.pythonhosted.org/packages/3d/b4/a03e3c506cef0d3262250ec628ba27caddef78f9b131d15ee3537317e556/flask_unittest-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c95aff1b8a1b01dbb870e45a6f4c2b9f81c0eee86f458e7a5a10f610dbe0f3e",
          "md5": "ae232059c73cbab711c4eddb23b697b3",
          "sha256": "a04ce46b26863ebe3e3dc8c1561ae75e7ce9329755192387d755ac141b035caf"
        },
        "downloads": -1,
        "filename": "flask-unittest-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae232059c73cbab711c4eddb23b697b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27562,
        "upload_time": "2020-11-12T09:07:22",
        "upload_time_iso_8601": "2020-11-12T09:07:22.930513Z",
        "url": "https://files.pythonhosted.org/packages/8c/95/aff1b8a1b01dbb870e45a6f4c2b9f81c0eee86f458e7a5a10f610dbe0f3e/flask-unittest-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bb0b35284d76128687264c4df23d856d59c7a0438874f4e9eca0169dd038124",
          "md5": "5819a5ff6fe3fc678de7a494ea280727",
          "sha256": "4c2db8eba14495cb4f96cc4b1fa7e3decc96e33eab59598287c56475f8e262cd"
        },
        "downloads": -1,
        "filename": "flask_unittest-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5819a5ff6fe3fc678de7a494ea280727",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16141,
        "upload_time": "2021-06-15T13:04:05",
        "upload_time_iso_8601": "2021-06-15T13:04:05.781203Z",
        "url": "https://files.pythonhosted.org/packages/4b/b0/b35284d76128687264c4df23d856d59c7a0438874f4e9eca0169dd038124/flask_unittest-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ca437ee82d1e531720fb19f6f55ee73c8a80a0c77cfea851e9368b0b335ae85",
          "md5": "a8fb4585a358e43afd2c123ffb6f79f4",
          "sha256": "4306725aac35a6e831f84f66df865e90220d9bee8369aa9ee7b80c3359926562"
        },
        "downloads": -1,
        "filename": "flask-unittest-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a8fb4585a358e43afd2c123ffb6f79f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22851,
        "upload_time": "2021-06-15T13:04:07",
        "upload_time_iso_8601": "2021-06-15T13:04:07.595109Z",
        "url": "https://files.pythonhosted.org/packages/1c/a4/37ee82d1e531720fb19f6f55ee73c8a80a0c77cfea851e9368b0b335ae85/flask-unittest-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52cbd5217d8341c61081aaec931846e35ced62fbb6b67468e8e6c8db4ada69ec",
          "md5": "4798001fcd34d09c435cb3bbf46ba376",
          "sha256": "a847e1a56d2694040269c3b7fd6f7d67cb33615ae0549d32e3688d6276bda8bd"
        },
        "downloads": -1,
        "filename": "flask_unittest-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4798001fcd34d09c435cb3bbf46ba376",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16119,
        "upload_time": "2022-06-05T06:45:10",
        "upload_time_iso_8601": "2022-06-05T06:45:10.422058Z",
        "url": "https://files.pythonhosted.org/packages/52/cb/d5217d8341c61081aaec931846e35ced62fbb6b67468e8e6c8db4ada69ec/flask_unittest-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce658858ad436da94463af0c36bbbf9c42a893d0cfe0c788f6ab64dba739c86b",
          "md5": "162b8577e72d8231632d995360ee33e3",
          "sha256": "057470ddcfe188b28dae6ebfbda6006d88ca4c37d49e657de3533aa6eeba51d0"
        },
        "downloads": -1,
        "filename": "flask-unittest-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "162b8577e72d8231632d995360ee33e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21648,
        "upload_time": "2022-06-05T06:45:12",
        "upload_time_iso_8601": "2022-06-05T06:45:12.517028Z",
        "url": "https://files.pythonhosted.org/packages/ce/65/8858ad436da94463af0c36bbbf9c42a893d0cfe0c788f6ab64dba739c86b/flask-unittest-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52cbd5217d8341c61081aaec931846e35ced62fbb6b67468e8e6c8db4ada69ec",
        "md5": "4798001fcd34d09c435cb3bbf46ba376",
        "sha256": "a847e1a56d2694040269c3b7fd6f7d67cb33615ae0549d32e3688d6276bda8bd"
      },
      "downloads": -1,
      "filename": "flask_unittest-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4798001fcd34d09c435cb3bbf46ba376",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16119,
      "upload_time": "2022-06-05T06:45:10",
      "upload_time_iso_8601": "2022-06-05T06:45:10.422058Z",
      "url": "https://files.pythonhosted.org/packages/52/cb/d5217d8341c61081aaec931846e35ced62fbb6b67468e8e6c8db4ada69ec/flask_unittest-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce658858ad436da94463af0c36bbbf9c42a893d0cfe0c788f6ab64dba739c86b",
        "md5": "162b8577e72d8231632d995360ee33e3",
        "sha256": "057470ddcfe188b28dae6ebfbda6006d88ca4c37d49e657de3533aa6eeba51d0"
      },
      "downloads": -1,
      "filename": "flask-unittest-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "162b8577e72d8231632d995360ee33e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21648,
      "upload_time": "2022-06-05T06:45:12",
      "upload_time_iso_8601": "2022-06-05T06:45:12.517028Z",
      "url": "https://files.pythonhosted.org/packages/ce/65/8858ad436da94463af0c36bbbf9c42a893d0cfe0c788f6ab64dba739c86b/flask-unittest-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}