{
  "info": {
    "author": "RayFed Team",
    "author_email": "rayfed-dev@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# RayFed\n![docs building](https://readthedocs.org/projects/rayfed/badge/?version=latest) ![test on ray 2.0.0](https://github.com/ray-project/rayfed/actions/workflows/test_on_ray2.0.0.yml/badge.svg) ![test on ray 1.13.0](https://github.com/ray-project/rayfed/actions/workflows/test_on_ray1.13.0.yml/badge.svg)\n\nA multiple parties joint, distributed execution engine based on Ray, to help build your own federated learning frameworks in minutes.\n\n## Overview\n**Note: This project is now in actively developing.**\n\nRayFed is a distributed computing framework for cross-parties federated learning.\nBuilt in the Ray ecosystem, RayFed provides a Ray native programming pattern for federated learning so that users can build a distributed program easily.\n\nIt provides users the role of \"party\", thus users can write code belonging to the specific party explicitly imposing more clear data perimeters. These codes will be restricted to execute within the party.\n\nAs for the code execution, RayFed introduces the multi-controller architecture:\nThe code view in each party is exactly the same, but the execution differs based on the declared party of code and the current party of executor. \n\n\n\n## Features\n- **Ray Native Programming Pattern**  \n  \n  Let you write your federated and distributed computing applications like a single-machine program.\n\n- **Multiple Controller Execution Mode**  \n  \n  The RayFed job can be run in the single-controller mode for developing and debugging and the multiple-controller mode for production without code change.\n  \n- **Very Restricted and Clear Data Perimeters**  \n  \n  Because of the PUSH-BASED data transferring mechanism and multiple controller execution mode, the data transmission authority is held by the data owner rather than the data demander.\n\n- **Very Large Scale Federated Computing and Training**  \n  \n  Powered by the scalabilities and the distributed abilities from Ray, large scale federated computing and training jobs are naturally supported.\n\n\n## Supported Ray Versions\n| RayFed Versions | ray-1.13.0 | ray-2.0.0 | ray-2.1.0 | ray-2.2.0 | ray-2.3.0 |\n|:---------------:|:--------:|:--------:|:--------:|:--------:|:--------:|\n| 0.1.0           |✅      | ✅      | ✅      | ✅      | ❌      |\n| 0.2.0           |not released|not released|not released|not released|not released|\n\n\n## Installation\nInstall it from pypi.\n\n```shell\npip install -U rayfed\n```\n\n## Quick Start\n\nThis example shows how to aggregate values across two participators.\n\n### Step 1: Write an Actor that Generates Value\nThe `MyActor` increment its value by `num`. \nThis actor will be executed within the explicitly declared party.\n\n```python\nimport sys\nimport fed\n\n@fed.remote\nclass MyActor:\n    def __init__(self, value):\n        self.value = value\n\n    def inc(self, num):\n        self.value = self.value + num\n        return self.value\n```\n### Step 2: Define Aggregation Function\nThe below function collects and aggragates values from two parties separately, and will also be executed within the declared party.\n\n```python\n@fed.remote\ndef aggregate(val1, val2):\n    return val1 + val2\n```\n\n### Step 3: Create the actor and call methods in a specific party\n\nThe creation code is similar with `Ray`, however, the difference is that in `RayFed` the actor must be explicitly created within a party:\n\n```python\nactor_alice = MyActor.party(\"alice\").remote(1)\nactor_bob = MyActor.party(\"bob\").remote(1)\n\nval_alice = actor_alice.inc.remote(1)\nval_bob = actor_bob.inc.remote(2)\n\nsum_val_obj = aggregate.party(\"bob\").remote(val_alice, val_bob)\n```\nThe above codes:\n1. Create two `MyActor`s separately in each party, i.e. 'alice' and 'bob';\n2. Increment by '1' in alice and '2' in 'bob';\n3. Execute the aggregation function in party 'bob'.\n\n### Step 4: Declare Cross-party Cluster & Init \n```python\ndef main(party):\n    cluster = {\n        'alice': {'address': '127.0.0.1:11010'},\n        'bob': {'address': '127.0.0.1:11011'},\n    }\n    fed.init(address='local', cluster=cluster, party=party)\n```\nThis first declares a two-party cluster, whose addresses corresponding to '127.0.0.1:11010' in 'alice' and '127.0.0.1:11011' in 'bob'.\nAnd then, the `fed.init` create a cluster in the specified party.\nNote that `fed.init` should be called twice, passing in the different party each time.\n\nWhen executing codes in step 1~3, the 'alice' cluster will only execute functions whose \"party\" are also declared as 'alice'.\n\n### Put it together !\nSave below codes as `demo.py`: \n```python\nimport sys\nimport fed\n\n\n@fed.remote\nclass MyActor:\n    def __init__(self, value):\n        self.value = value\n\n    def inc(self, num):\n        self.value = self.value + num\n        return self.value\n\n\n@fed.remote\ndef aggregate(val1, val2):\n    return val1 + val2\n\n\ndef main(party):\n    cluster = {\n        'alice': {'address': '127.0.0.1:11010'},\n        'bob': {'address': '127.0.0.1:11011'},\n    }\n    fed.init(address='local', cluster=cluster, party=party)\n\n    actor_alice = MyActor.party(\"alice\").remote(1)\n    actor_bob = MyActor.party(\"bob\").remote(1)\n\n    val_alice = actor_alice.inc.remote(1)\n    val_bob = actor_bob.inc.remote(2)\n\n    sum_val_obj = aggregate.party(\"bob\").remote(val_alice, val_bob)\n    result = fed.get(sum_val_obj)\n    print(f\"The result in party {party} is {result}\")\n\n    fed.shutdown()\n\n\nif __name__ == \"__main__\":\n    assert len(sys.argv) == 2, 'Please run this script with party.'\n    main(sys.argv[1])\n\n```\n\n### Run The Code.\n\nOpen a terminal and run the code as `alice`. It's recommended to run the code with Ray TLS enabled (please refer to [Ray TLS](https://docs.ray.io/en/latest/ray-core/configure.html#tls-authentication))\n```shell\nRAY_USE_TLS=1 \\\nRAY_TLS_SERVER_CERT='/path/to/the/server/cert/file' \\\nRAY_TLS_SERVER_KEY='/path/to/the/server/key/file' \\\nRAY_TLS_CA_CERT='/path/to/the/ca/cert/file' \\\npython test.py alice\n```\n\nIn the mean time, open another terminal and run the code as `bob`.\n```shell\nRAY_USE_TLS=1 \\\nRAY_TLS_SERVER_CERT='/path/to/the/server/cert/file' \\\nRAY_TLS_SERVER_KEY='/path/to/the/server/key/file' \\\nRAY_TLS_CA_CERT='/path/to/the/ca/cert/file' \\\npython test.py bob\n```\n\nThen you will get `The result in party alice is 5` on the first terminal screen and `The result in party bob is 5` on the second terminal screen.\n\nFigure shows the execution under the hood:\n![ppeH68x.png](https://s1.ax1x.com/2023/03/08/ppeH68x.png)\n\n## Running untrusted codes\nAs a general rule: Always execute untrusted codes inside a sandbox (e.g., [nsjail](https://github.com/google/nsjail)).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ray-project/rayfed",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "secretflow-rayfed",
    "package_url": "https://pypi.org/project/secretflow-rayfed/",
    "platform": null,
    "project_url": "https://pypi.org/project/secretflow-rayfed/",
    "project_urls": {
      "Homepage": "https://github.com/ray-project/rayfed"
    },
    "release_url": "https://pypi.org/project/secretflow-rayfed/0.1.1a3/",
    "requires_dist": [
      "jax (>=0.3.0)",
      "jaxlib (>=0.3.0)",
      "cloudpickle",
      "protobuf",
      "secretflow-ray (>=2.1.0)",
      "pickle5 (==0.0.11) ; python_version < \"3.8\"",
      "pylint ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A multiple parties joint, distributed execution engine based on Ray,to help build your own federated learning frameworks in minutes.",
    "version": "0.1.1a3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17378305,
  "releases": {
    "0.1.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4003a47b3f194f6c42222c6207a8b7cbb95b0c6c9ba443364a85d98042174cf",
          "md5": "963546bd88d09e6b2852ec7e6b65b364",
          "sha256": "c04c8c97fdb986018dcf2f2a8fc719015b6a02fee0f3c9c07297d576e80c6002"
        },
        "downloads": -1,
        "filename": "secretflow_rayfed-0.1.0b0-py3-none-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "963546bd88d09e6b2852ec7e6b65b364",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28103,
        "upload_time": "2023-01-09T12:44:41",
        "upload_time_iso_8601": "2023-01-09T12:44:41.126310Z",
        "url": "https://files.pythonhosted.org/packages/c4/00/3a47b3f194f6c42222c6207a8b7cbb95b0c6c9ba443364a85d98042174cf/secretflow_rayfed-0.1.0b0-py3-none-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9869baf56534d93e59ba757b2f50d863c3e0c8bd174b8ff0cc5019771dc79513",
          "md5": "fe770d8d8aa72da65e5cc2db408923d0",
          "sha256": "12e8a0690aaf68c9f4b1f70cb23f5238674bd88618c1621d296f220ade9e6b36"
        },
        "downloads": -1,
        "filename": "secretflow_rayfed-0.1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe770d8d8aa72da65e5cc2db408923d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28084,
        "upload_time": "2023-01-09T13:20:26",
        "upload_time_iso_8601": "2023-01-09T13:20:26.873388Z",
        "url": "https://files.pythonhosted.org/packages/98/69/baf56534d93e59ba757b2f50d863c3e0c8bd174b8ff0cc5019771dc79513/secretflow_rayfed-0.1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71097dd971bde723a4bce451bc8b01f86ca2cbebd985afe4974da8248eb9a75f",
          "md5": "b627edbad167bd11931e1c22f13cbaef",
          "sha256": "45c2740551f3dcfb8a448712dd48bd7f6d7bcded26251c25854697a97511e1b0"
        },
        "downloads": -1,
        "filename": "secretflow_rayfed-0.1.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b627edbad167bd11931e1c22f13cbaef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31006,
        "upload_time": "2023-03-07T07:49:57",
        "upload_time_iso_8601": "2023-03-07T07:49:57.844655Z",
        "url": "https://files.pythonhosted.org/packages/71/09/7dd971bde723a4bce451bc8b01f86ca2cbebd985afe4974da8248eb9a75f/secretflow_rayfed-0.1.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "559dccb91fca12d214de106b29a4fc25ef3b0adc1b46a32370ffa97a4f36d94f",
          "md5": "3cb23c56bd51ef72ff0c906eff55a1b6",
          "sha256": "61c77eb31d5f894ac4616568e515293a31a803dc04b07dbb3405b999c776ecec"
        },
        "downloads": -1,
        "filename": "secretflow_rayfed-0.1.1a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cb23c56bd51ef72ff0c906eff55a1b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34805,
        "upload_time": "2023-03-21T11:42:41",
        "upload_time_iso_8601": "2023-03-21T11:42:41.941406Z",
        "url": "https://files.pythonhosted.org/packages/55/9d/ccb91fca12d214de106b29a4fc25ef3b0adc1b46a32370ffa97a4f36d94f/secretflow_rayfed-0.1.1a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "559dccb91fca12d214de106b29a4fc25ef3b0adc1b46a32370ffa97a4f36d94f",
        "md5": "3cb23c56bd51ef72ff0c906eff55a1b6",
        "sha256": "61c77eb31d5f894ac4616568e515293a31a803dc04b07dbb3405b999c776ecec"
      },
      "downloads": -1,
      "filename": "secretflow_rayfed-0.1.1a3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3cb23c56bd51ef72ff0c906eff55a1b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34805,
      "upload_time": "2023-03-21T11:42:41",
      "upload_time_iso_8601": "2023-03-21T11:42:41.941406Z",
      "url": "https://files.pythonhosted.org/packages/55/9d/ccb91fca12d214de106b29a4fc25ef3b0adc1b46a32370ffa97a4f36d94f/secretflow_rayfed-0.1.1a3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}