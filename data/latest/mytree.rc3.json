{
  "info": {
    "author": "Daniel Dodd",
    "author_email": "daniel_dodd@icloud.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# My🌳\n[![PyPI version](https://badge.fury.io/py/mytree.svg)](https://badge.fury.io/py/mytree)\n[![codecov](https://codecov.io/gh/Daniel-Dodd/mytree/branch/main/graph/badge.svg?token=Q1R280Vb5i)](https://codecov.io/gh/Daniel-Dodd/mytree)\n\n\n\"**M**odule p**ytree**s\" that cleanly handle parameter **trainability** and **transformations** for JAX models.\n\n## Installation\n```bash\npip install mytree\n```\n\n## Usage\n\n### Defining a model\n- Mark leaf attributes with `param_field` to set a default bijector and trainable status.\n- Unmarked leaf attributes default to an `Identity` bijector and trainablility set to `True`.\n\n```python\nfrom mytree import Mytree, param_field, Softplus, Identity\n\nclass SimpleModel(Mytree):\n    weight: float = param_field(bijector=Softplus, trainable=False)\n\n    def __init__(self, weight, bias):\n        self.weight = weight\n        self.bias = bias # Unmarked 🍀 attribute `bias`, has `Identity` bijector and trainability set to `True`.\n    \n    def __call__(self, test_point):\n        return test_point * self.weight + self.bias\n```\n- Fully compatible with [Distrax](https://github.com/deepmind/distrax) and [TensorFlow Probability](https://www.tensorflow.org/probability) bijectors, so feel free to use these!\n\n### Dataclasses\nWorks seamlessly with the `dataclasses.dataclass` decorators!\n\n```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass SimpleModel(Mytree):\n    weight: float = param_field(bijector=Softplus, trainable=False)\n    bias: float\n    \n    def __call__(self, test_point):\n        return test_point * self.weight + self.bias\n```\n\n### Replacing values\nUpdate values via `replace`.\n\n```python\nmodel = SimpleModel(1.0, 2.0)\nmodel.replace(weight=123.0)\n```\n\n```\nSimpleModel(weight=123.0, bias=2.0)\n```\n \n## Transformations 🤖\n\n### Applying transformations\nUse `constrain` / `unconstrain` to return a `Mytree` with each parameter's bijector `forward` / `inverse` operation applied!\n    \n```python\nmodel.constrain()\nmodel.unconstrain()\n```\n    \n```\nSimpleModel(weight=1.3132616, bias=2.0)\nSimpleModel(weight=0.5413248, bias=2.0)\n```\n\n### Replacing transformations\nDefault transformations can be replaced on an instance via the `replace_bijector` method.\n```python\nnew = model.replace_bijector(bias=Identity)\n```\n```python\nnew.constrain()\nnew.unconstrain()\n```\n\n```\nSimpleModel(weight=1.0, bias=2.0)\nSimpleModel(weight=1.0, bias=2.0)\n```\nAnd we see that `weight`'s parameter is no longer transformed under the `Identity`.\n\n## Trainability 🚂\n\n### Applying trainability\n\nApplying `stop_gradient` **within** the loss function, prevents the flow of gradients during forward or reverse-mode automatic differentiation.\n```python\nimport jax\n\n# Create simulated data.\nn = 100\nkey = jax.random.PRNGKey(123)\nx = jax.random.uniform(key, (n, ))\ny = 3.0 * x + 2.0 + 1e-3 * jax.random.normal(key, (n, ))\n\n\n# Define a mean-squared-error loss.\ndef loss(model: SimpleModel) -> float:\n   model = model.stop_gradient() # 🛑 Stop gradients!\n   return jax.numpy.sum((y - model(x))**2)\n   \njax.grad(loss)(model)\n```\n```\nSimpleModel(weight=0.0, bias=-188.37418)\n```\nAs `weight` trainability was set to `False`, it's gradient is zero as expected!\n    \n### Replacing trainability\nDefault trainability status can be replaced via the `replace_trainable` method.\n```python\nnew = model.replace_trainable(weight=True)\njax.grad(loss)(model)\n```\n```\nSimpleModel(weight=-121.42676, bias=-188.37418)\n```\nAnd we see that `weight`'s gradient is no longer zero.\n\n## Metadata\n\n### Viewing `field` metadata\nView field metadata pytree via `meta`.\n```python\nfrom mytree import meta\nmeta(model)\n```\n```\nSimpleModel(weight=({'bijector': Bijector(forward=<function <lambda> at 0x17a024e50>, inverse=<function <lambda> at 0x17a024430>), 1.0), 'trainable': False, 'pytree_node': True}, bias=({}, 2.0))\n```\n\nOr the metadata pytree leaves via `meta_leaves`.\n```python\nfrom mytree import meta_leaves\nmeta_leaves(model)\n```\n```\n[({}, 2.0),\n ({'bijector': Bijector(forward=<function <lambda> at 0x17a024e50>, inverse=<function <lambda> at 0x17a024430>),\n  'trainable': False,\n  'pytree_node': True}, 1.0)]\n```\nNote this shows any metadata defined via a `dataclasses.field` for the pytree leaves. So feel free to define your own.\n\n### Applying `field` metadata\nLeaf metadata can be applied via the `meta_map` function.\n```python\nfrom mytree import meta_map\n\n# Function passed to `meta_map` has its argument as a `(meta, leaf)` tuple!\ndef if_trainable_then_10(meta_leaf):\n    meta, leaf = meta_leaf\n    if meta.get(\"trainable\", True):\n        return 10.0\n    else:\n        return leaf\n\nmeta_map(if_trainable_then_10, model)\n```\n```\nSimpleModel(weight=1.0, bias=10.0)\n```\nIt is possible to define your own custom metadata and therefore your own metadata transformations in this vein.\n\n## Static fields\nSince `Mytree` inherits from [simple-pytree](https://github.com/cgarciae/simple-pytree)'s `Pytree`, fields can be marked as static via simple_pytree's `static_field`.\n\n```python\nimport jax.tree_util as jtu\nfrom simple_pytree import static_field\n\nclass StaticExample(Mytree):\n    b: float = static_field\n    \n    def __init__(self, a=1.0, b=2.0):\n        self.a=a\n        self.b=b\n    \njtu.tree_leaves(StaticExample())\n```\n```\n[1.0]\n```\n\n## Performance 🏎\nPreliminary benchmarks can be found in: https://github.com/Daniel-Dodd/mytree/blob/master/benchmarks/benchmarks.ipynb",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mytree",
    "package_url": "https://pypi.org/project/mytree/",
    "platform": null,
    "project_url": "https://pypi.org/project/mytree/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mytree/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Module pytrees that cleanly handle parameter trainability and transformations for JAX models.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17403461,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fedc349ef6bc1f0cb11882389e2cbd022ff9911d844f0a8aa7a76e4530b53f2",
          "md5": "34f4862b1051878c24a482169860e11f",
          "sha256": "658757ecce9ca1a204318cc7b2db79154151fd6d70564ea9245929b2aec11e86"
        },
        "downloads": -1,
        "filename": "mytree-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34f4862b1051878c24a482169860e11f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7151,
        "upload_time": "2023-03-19T14:50:18",
        "upload_time_iso_8601": "2023-03-19T14:50:18.351344Z",
        "url": "https://files.pythonhosted.org/packages/5f/ed/c349ef6bc1f0cb11882389e2cbd022ff9911d844f0a8aa7a76e4530b53f2/mytree-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "567241e0a527a8685feaea2927d4b96b1dd95095346d3c7e514390dfe81a8405",
          "md5": "7e054d806e875e246d2972c995b47967",
          "sha256": "7017c4390eaff93e0f947d80bfe14eafa82a687b58b2cdb552f7eb6fedcca046"
        },
        "downloads": -1,
        "filename": "mytree-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e054d806e875e246d2972c995b47967",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6490,
        "upload_time": "2023-03-19T14:50:20",
        "upload_time_iso_8601": "2023-03-19T14:50:20.562538Z",
        "url": "https://files.pythonhosted.org/packages/56/72/41e0a527a8685feaea2927d4b96b1dd95095346d3c7e514390dfe81a8405/mytree-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6882b11f4561e5a7534816fc639bc3a1c77e22d8dfdde9d1b9249a78a9117780",
          "md5": "71d58c254394e4da278dac1acdf9516c",
          "sha256": "e0adfee43f604c897f19341d457b71b0a35741d8bff1eaa1af96097341b11149"
        },
        "downloads": -1,
        "filename": "mytree-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71d58c254394e4da278dac1acdf9516c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 8199,
        "upload_time": "2023-03-22T15:24:33",
        "upload_time_iso_8601": "2023-03-22T15:24:33.412317Z",
        "url": "https://files.pythonhosted.org/packages/68/82/b11f4561e5a7534816fc639bc3a1c77e22d8dfdde9d1b9249a78a9117780/mytree-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b9195d8cf093d319bf4684eeec4eaeae7dfa07928f7a1dd60ec4a24095d998f",
          "md5": "a53cb229e28666743e77e2c9b4e23f40",
          "sha256": "c20b8e2bcf4d3f5fe680e074c649da9761eac01f3a2eaf7079357f65d8c89688"
        },
        "downloads": -1,
        "filename": "mytree-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a53cb229e28666743e77e2c9b4e23f40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8121,
        "upload_time": "2023-03-22T19:40:13",
        "upload_time_iso_8601": "2023-03-22T19:40:13.140789Z",
        "url": "https://files.pythonhosted.org/packages/6b/91/95d8cf093d319bf4684eeec4eaeae7dfa07928f7a1dd60ec4a24095d998f/mytree-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b9195d8cf093d319bf4684eeec4eaeae7dfa07928f7a1dd60ec4a24095d998f",
        "md5": "a53cb229e28666743e77e2c9b4e23f40",
        "sha256": "c20b8e2bcf4d3f5fe680e074c649da9761eac01f3a2eaf7079357f65d8c89688"
      },
      "downloads": -1,
      "filename": "mytree-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a53cb229e28666743e77e2c9b4e23f40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8121,
      "upload_time": "2023-03-22T19:40:13",
      "upload_time_iso_8601": "2023-03-22T19:40:13.140789Z",
      "url": "https://files.pythonhosted.org/packages/6b/91/95d8cf093d319bf4684eeec4eaeae7dfa07928f7a1dd60ec4a24095d998f/mytree-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}