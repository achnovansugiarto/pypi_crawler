{
  "info": {
    "author": "Nicholas Vadivelu",
    "author_email": "nicholas.vadivelu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# ShapeCheck\n\n![Build & Tests](https://github.com/n2cholas/shapecheck/workflows/Build%20and%20Tests/badge.svg)\n[![codecov](https://codecov.io/gh/n2cholas/shapecheck/branch/main/graph/badge.svg?token=KAW5F029PM)](https://codecov.io/gh/n2cholas/shapecheck)\n\nFramework-agnostic library for checking array/tensor shapes at runtime.\n\nFinding the root of shape mismatches can be troublesome, especially with\nbroadcasting rules and mutable arrays. Comments documenting shapes can easily\nbecome out of date as code evolves. This library aims to solve both of those\nproblems by ensuring function input/output shape expectations are met. The\nconcise syntax for expressing shapes serves to document code as well, so new\nusers can quickly understand what's going on.\n\nWith frameworks like JAX or TensorFlow, \"runtime\" is actually \"compile\" or\n\"trace\" time, so you don't pay any cost during execution. For frameworks like\nPyTorch, asynchronous execution will hide the cost of shape checking. You only\npay a small overhead with synchronous, eager frameworks like numpy.\n\n## Install Library\n\nFrom PyPI:\n\n```bash\npip install --upgrade shapecheck\n```\n\nTo install the latest version:\n\n```bash\npip install --upgrade git+https://github.com/n2cholas/shapecheck.git\n```\n\n## Usage\n\n```python\nimport numpy as np\nfrom shapecheck import check_shapes\n\n@check_shapes({'imgs': 'N,W,W,-1', 'labels': 'N,1'}, aux_info=None, out_='')\ndef loss_fn(batch, aux_info):\n    # do something with aux_info\n    diff = (batch['imgs'].mean((1, 2, 3)) - batch['labels'].squeeze())\n    return np.mean(diff**2)\n\nloss_fn({'imgs': np.ones((3, 2, 2, 1)), 'labels': np.ones((3,1))}, np.ones(1))\nloss_fn({'imgs': np.ones((5, 3, 3, 4)), 'labels': np.ones((5,1))}, 'any')\n# Below line fails:\nloss_fn({'imgs': np.ones((3, 5, 2, 1)), 'labels': np.ones((3,1))}, 'any')\n```\n\nError message:\n\n```\nshapecheck.exception.ShapeError: in function loss_fn.\nNamed Dimensions: {'N': 3, 'W': 5}.\nInput:\n    Argument: batch  Type: <class 'dict'>\n        MisMatch: Key: imgs Expected Shape: ('N', 'W', 'W', -1) Actual Shape: (3, 5, 2, 1).\n        Match:    Key: labels Expected Shape: ('N', 1) Actual Shape: (3, 1).\n    Skipped:  Argument: aux_info.\n```\n\nIn the above example, we compute the loss with a batch of data, which is a\ndictionary with images and labels. We specify that we want `N` square images\nwhich can have any number of channels (indicated by the `-1`).  Inputs to\n`check_shape` can be arbitrarily nested dicts/lists/tuples, as long as the\nstructure of the shape specification matches the structure of the inputs to the\ndecorated function.\n\nWe also specify that `aux_info` shouldn't be checked. Equivalently, we could've\nexcluded it from the definition:\n\n```python\n@check_shapes({'imgs': 'N,W,W,-1', 'labels': 'N,1'}, out_='')\n```\n\nor passed it as a positional argument.\n\n```python\n@check_shapes({'imgs': 'N,W,W,-1', 'labels': 'N,1'}, None, out_='')\n```\n\nFinally, we specify the output shape should be a scalar via `out_=''`. All\nnon-input shape arguments to `check_shape` have an underscore after them so\nthey don't conflict with the decorated function's arguments (for now, just\n`out_` and `match_callees_`).\n\nIf you have a function with shape-checking that calls many other functions with\nshape-checking, you can optionally enforce that dimensions with the same letter\nname in the caller correspond to the same sized dimension in the callees via\n`match_callees_=True`.  That is, you can check that a function's input named\ndimensions match the same named dimensions of all checked functions higher in\nthe call stack. For example:\n\n```python\n@check_shapes('M', 'N', 'O', out_='M')\ndef callee(a, b, c):\n    return a\n\n@check_shapes('M', 'N', 'R')\ndef caller_fn_1(x, y, z):\n    return callee(y, x, z)\n\n@check_shapes('M', 'N', 'R', match_callees_=True)\ndef caller_fn_2(x, y, z):\n    return callee(y, x, z)\n\ncaller_fn_1(np.ones(5), np.ones(6), np.ones(7))  # succeeds\ncaller_fn_2(np.ones(5), np.ones(6), np.ones(7))  # fails\n```\n\nHere, we (accidentally) swapped `x` and `y` when calling `callee`.\n`caller_fn_1` succeeds because the inputs are compatible when considering the\nnamed dimensions for `callee_fn` alone. But `caller_fn_2` fails because the\nnamed dimensions are inconsistent between the caller and the callee. The\nfollowing error would be produced:\n\n```\nshapecheck.exception.ShapeError: in function callee.\nNamed Dimensions: {'M': 5, 'N': 6, 'R': 7, 'O': 7}.\nInput:\n    MisMatch: Argument: a Expected Shape: ('M',) Actual Shape: (6,).\n    MisMatch: Argument: b Expected Shape: ('N',) Actual Shape: (5,).\n    Match:    Argument: c Expected Shape: ('O',) Actual Shape: (7,).\n```\n\nThis library also supports variadic dimensions. You can use '...' to indicate 0\nor more dimensions:\n\n```python\n@check_shapes('dim, ..., 1', '..., dim, 1')\ndef g(a, b):\n    pass\n\ng(np.ones((2, 3, 4, 1)), np.ones((5, 2, 1)))  # succeeds\ng(np.ones((3, 1)), np.ones((3, 1)))  # succeeds\ng(np.ones((2, 3, 4, 1)), np.ones((1, 1)))  # fails\n```\n\nThe last statement fails with the following error, since `dim` doesn't match:\n\n```\nshapecheck.exception.ShapeError: in function g.\nNamed Dimensions: {'dim': 2}.\nInput:\n    Match:    Argument: a Expected Shape: ('dim', '...', 1) Actual Shape: (2, 3, 4, 1).\n    MisMatch: Argument: b Expected Shape: ('...', 'dim', 1) Actual Shape: (1, 1).\n```\n\nYou can also name the variadic dimensions, to ensure that a contiguous sequence\nof dimensions match between arguments. For example:\n\n```python\n@check_shapes('batch,variadic...', 'variadic...')\ndef h(a, b):\n    pass\n\nh(np.ones((7, 1, 2)), np.ones((1, 2)))  # succeeds\nh(np.ones((6, 2)), np.ones((1, 1)))  # fails\nh(np.ones((6, 2)), np.ones((1)))  # fails\n```\n\nYou can enable/disable shapechecking globally as shown below:\n\n```python\nfrom shapecheck import is_checking_enabled, set_checking_enabled\n\nassert is_checking_enabled()\nset_checking_enabled(False)\nassert not is_checking_enabled()\nset_checking_enabled(True)\nassert is_checking_enabled()\n```\n\nOr via a context manager:\n\n```python\nassert is_checking_enabled()\nwith set_checking_enabled(False):\n    assert not is_checking_enabled()\nassert is_checking_enabled()\n```\n\nIf you have any questions or issues with the library, please raise an issue on\n[GitHub](https://github.com/n2cholas/shapecheck/issues). Hope you enjoy using\nthe library!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/n2cholas/shapecheck",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shapecheck",
    "package_url": "https://pypi.org/project/shapecheck/",
    "platform": "",
    "project_url": "https://pypi.org/project/shapecheck/",
    "project_urls": {
      "Homepage": "https://github.com/n2cholas/shapecheck"
    },
    "release_url": "https://pypi.org/project/shapecheck/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Framework-agnostic library for checking array shapes at runtime.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9062830,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "becea38b4e8f299427d1e5c72f344cc2c6dad6d529c21f1a2a8315dcc533c50b",
          "md5": "2395069c0a8a455939658f77fe0d656f",
          "sha256": "fa567ab2bbcd9ea7e3e811cda2019c673d97369a0b9fe2add15dc49eb1114535"
        },
        "downloads": -1,
        "filename": "shapecheck-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2395069c0a8a455939658f77fe0d656f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10513,
        "upload_time": "2021-01-02T10:35:46",
        "upload_time_iso_8601": "2021-01-02T10:35:46.252307Z",
        "url": "https://files.pythonhosted.org/packages/be/ce/a38b4e8f299427d1e5c72f344cc2c6dad6d529c21f1a2a8315dcc533c50b/shapecheck-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0263a9f757fc9c04fa3925aaac72b7fa32e8170411d117d9040c51679188b4e",
          "md5": "1ff850f927b1465dc0c5ec3683547986",
          "sha256": "0c260c8ccf3bd2a41f04e95cee50aadb8b27e51368e869380b9e150463a84e4e"
        },
        "downloads": -1,
        "filename": "shapecheck-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1ff850f927b1465dc0c5ec3683547986",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11722,
        "upload_time": "2021-01-02T10:35:47",
        "upload_time_iso_8601": "2021-01-02T10:35:47.505769Z",
        "url": "https://files.pythonhosted.org/packages/e0/26/3a9f757fc9c04fa3925aaac72b7fa32e8170411d117d9040c51679188b4e/shapecheck-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ee6fb52c53abe03282e71e4149e84374afc1ad5f017e57986686f6224761fb7",
          "md5": "f7cfbd7ec1c8edc6bcc663a6bcbece1e",
          "sha256": "7f20e66cd3bdd99dae4d1fedf63087fe109afe0e2c903139cd80b4e078fc1759"
        },
        "downloads": -1,
        "filename": "shapecheck-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7cfbd7ec1c8edc6bcc663a6bcbece1e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11238,
        "upload_time": "2021-01-06T00:48:49",
        "upload_time_iso_8601": "2021-01-06T00:48:49.191011Z",
        "url": "https://files.pythonhosted.org/packages/8e/e6/fb52c53abe03282e71e4149e84374afc1ad5f017e57986686f6224761fb7/shapecheck-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cc97f37121dc9faf2889383f963cf9aab2e95b5d5b13b0798fdc50c9f93eed3",
          "md5": "76816283cb72c35f4468d7c2d81ab08f",
          "sha256": "0e2baf8c50c664258e5a426fc17a025456144277c4b366763a53be4d21a867b2"
        },
        "downloads": -1,
        "filename": "shapecheck-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "76816283cb72c35f4468d7c2d81ab08f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12628,
        "upload_time": "2021-01-06T00:48:51",
        "upload_time_iso_8601": "2021-01-06T00:48:51.073598Z",
        "url": "https://files.pythonhosted.org/packages/1c/c9/7f37121dc9faf2889383f963cf9aab2e95b5d5b13b0798fdc50c9f93eed3/shapecheck-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ee6fb52c53abe03282e71e4149e84374afc1ad5f017e57986686f6224761fb7",
        "md5": "f7cfbd7ec1c8edc6bcc663a6bcbece1e",
        "sha256": "7f20e66cd3bdd99dae4d1fedf63087fe109afe0e2c903139cd80b4e078fc1759"
      },
      "downloads": -1,
      "filename": "shapecheck-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7cfbd7ec1c8edc6bcc663a6bcbece1e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11238,
      "upload_time": "2021-01-06T00:48:49",
      "upload_time_iso_8601": "2021-01-06T00:48:49.191011Z",
      "url": "https://files.pythonhosted.org/packages/8e/e6/fb52c53abe03282e71e4149e84374afc1ad5f017e57986686f6224761fb7/shapecheck-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cc97f37121dc9faf2889383f963cf9aab2e95b5d5b13b0798fdc50c9f93eed3",
        "md5": "76816283cb72c35f4468d7c2d81ab08f",
        "sha256": "0e2baf8c50c664258e5a426fc17a025456144277c4b366763a53be4d21a867b2"
      },
      "downloads": -1,
      "filename": "shapecheck-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "76816283cb72c35f4468d7c2d81ab08f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12628,
      "upload_time": "2021-01-06T00:48:51",
      "upload_time_iso_8601": "2021-01-06T00:48:51.073598Z",
      "url": "https://files.pythonhosted.org/packages/1c/c9/7f37121dc9faf2889383f963cf9aab2e95b5d5b13b0798fdc50c9f93eed3/shapecheck-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}