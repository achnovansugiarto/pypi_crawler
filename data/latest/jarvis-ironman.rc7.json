{
  "info": {
    "author": "",
    "author_email": "Vignesh Sivanandha Rao <svignesh1793@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Framework :: FastAPI",
      "Framework :: Flake8",
      "Framework :: Sphinx",
      "Framework :: aiohttp",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Home Automation",
      "Topic :: Multimedia :: Sound/Audio :: Conversion",
      "Topic :: Multimedia :: Sound/Audio :: Speech",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Human Machine Interfaces",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Hardware :: Hardware Drivers",
      "Topic :: System :: Hardware :: Symmetric Multi-processing",
      "Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Human Interface Device (HID)",
      "Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Wireless Controller"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://vigneshrao.com/Jarvis/logo.png\" width=\"371px\" height=\"350px\">\n</p>\n<h2 align=\"center\">Natural Language User Interface</h2>\n\n[![ForTheBadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)\n[![ForTheBadge built-with-swag](http://ForTheBadge.com/images/badges/built-with-swag.svg)](https://github.com/thevickypedia/Jarvis)\n\n![Python](https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-blue)\n\n**Platform Supported**\n\n![Generic badge](https://img.shields.io/badge/Platform-Linux|MacOS|Windows-1f425f.svg)\n\n**Language Stats**\n\n![Language count](https://img.shields.io/github/languages/count/thevickypedia/Jarvis)\n![Code coverage](https://img.shields.io/github/languages/top/thevickypedia/Jarvis)\n\n**Repo Stats**\n\n[![GitHub Repo stars](https://img.shields.io/github/stars/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub Repo forks](https://img.shields.io/github/forks/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub Repo watchers](https://img.shields.io/github/watchers/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n\n[![GitHub](https://img.shields.io/github/license/thevickypedia/Jarvis)](https://github.com/thevickypedia/Jarvis/blob/master/LICENSE)\n[![GitHub repo size](https://img.shields.io/github/repo-size/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub code size](https://img.shields.io/github/languages/code-size/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![LOC](https://img.shields.io/tokei/lines/github/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n\n[![GitHub Repo issues](https://img.shields.io/github/issues-closed-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub Repo issues](https://img.shields.io/github/issues-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub Repo pr](https://img.shields.io/github/issues-pr-closed-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub Repo pr](https://img.shields.io/github/issues-pr-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n\n**Code Stats**\n\n![Modules](https://img.shields.io/github/search/thevickypedia/Jarvis/module)\n![Python](https://img.shields.io/github/search/thevickypedia/Jarvis/.py)\n![Threads](https://img.shields.io/github/search/thevickypedia/Jarvis/thread)\n![Listener](https://img.shields.io/github/search/thevickypedia/Jarvis/listener)\n![Speaker](https://img.shields.io/github/search/thevickypedia/Jarvis/speaker)\n![Bash](https://img.shields.io/github/search/thevickypedia/Jarvis/.sh)\n![AppleScript](https://img.shields.io/github/search/thevickypedia/Jarvis/.scpt)\n![Make](https://img.shields.io/github/search/thevickypedia/Jarvis/Makefile)\n\n**Deployments**\n\n[![pages-build-deployment](https://github.com/thevickypedia/Jarvis/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/thevickypedia/Jarvis/actions/workflows/pages/pages-build-deployment)\n[![pypi](https://github.com/thevickypedia/Jarvis/actions/workflows/python-publish.yml/badge.svg)](https://github.com/thevickypedia/Jarvis/actions/workflows/python-publish.yml)\n\n[![Pypi-format](https://img.shields.io/pypi/format/jarvis-ironman)](https://pypi.org/project/jarvis-ironman/#files)\n[![Pypi-status](https://img.shields.io/pypi/status/jarvis-ironman)](https://pypi.org/project/jarvis-ironman)\n[![sourcerank](https://img.shields.io/librariesio/sourcerank/pypi/jarvis-ironman)](https://libraries.io/pypi/jarvis-ironman)\n\n**Activity**\n\n[![GitHub Repo created](https://img.shields.io/date/1599432310)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub commit activity](https://img.shields.io/github/commit-activity/y/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub last commit](https://img.shields.io/github/last-commit/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n[![GitHub last release](https://img.shields.io/github/release-date/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)\n\n**Development and Maintenance**\n\n[![Active Development](https://img.shields.io/badge/Development%20Level-Actively%20Developed-success.svg)](https://github.com/thevickypedia/Jarvis)\n[![Actively Maintained](https://img.shields.io/badge/Maintenance%20Level-Actively%20Maintained-success.svg)](https://github.com/thevickypedia/Jarvis)\n[![Maintainer](https://img.shields.io/badge/Maintained%20By-Vignesh%20Sivanandha%20Rao-blue.svg)](https://vigneshrao.com/)\n\n**Reach Out**\n\n[![StackOverflow](https://img.shields.io/stackexchange/stackoverflow/r/13691532)](https://stackoverflow.com/users/13691532/vignesh-rao)\n[![Ask Me | Anything ](https://img.shields.io/badge/Ask%20me-Anything-1abc9c.svg)](https://vigneshrao.com/contact)\n\n## Kick off\n\n**Install**\n```shell\npython -m pip install jarvis-ironman\n```\n\n**Initiate**\n```python\nimport jarvis\n\n\nif __name__ == '__main__':\n    jarvis.start()\n```\n\n## Prerequisites\n   - **MacOS** <br> _Tested on **macOS High Sierra, Mojave, Catalina, Big Sur, Monterey and Ventura***_\n     - `System Preferences` → `Security & Privacy` → `Privacy`\n     - Click `+` sign and add the preferred `IDE` and `Terminal` in the following sections in left pane.\n       - `Microphone` - **Required** to listen and respond.\n       - `Accessibility` - **Required** to use key combinations for brightness and volume controls.\n       - `Camera` - **[Optional]** Required only during face recognition/detection.\n       - `Automation` - **Required** to control `System Events` and other apps like Outlook and Calendar.\n       - `Files and Folders` **[OR]** `Full Disk Access` - **Required** for all `FileIO` operations.\n\n     :warning: Known Issue with <a href=https://pypi.org/project/pyttsx3/>pyttsx3 module</a> on <a href=https://www.apple.com/macos/ventura/> macOS Ventura 13.0</a>: This version of macOS does not hold the attribute `VoiceAge`. <a href=https://github.com/nateshmbhat/pyttsx3/pull/247>Workaround has been raised as a PR</a><br><br>\n\n   - **Linux** <br> _Tested on **Ubuntu 22.04 LTS**_\n     - Store the host machine's password as the env var: `ROOT_PASSWORD`\n     - Unlike macOS and Windows, `Ubuntu` does not have app specific permissions.\n\n   - **Windows** <br> _Tested on **Windows 10**_\n     - `Settings` → `Privacy`\n       - `Microphone` - **Required** to listen and respond.\n       - `Camera` - **[Optional]** Required only during face recognition/detection.\n       - Unlike `macOS`, `Windows` pops a confirmation window to **Allow** or **Deny** access to files and folders.\n     - Install [Anaconda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html#windows-installers), [VisualStudio C++ BuildTools](https://visualstudio.microsoft.com/visual-cpp-build-tools/), and [Git](https://git-scm.com/download/win/)\n     - Make sure C++ build tools are installed completely and restart\n     - Add anaconda/miniconda scripts location to `PATH` in Environment Variables\n\n## Test peripherals\n**Camera**\n```python\nfrom jarvis.modules.camera import camera\n\n\nif __name__ == '__main__':\n    cam_object = camera.Camera()\n    print(cam_object.get_index())  # Get index id of each camera\n    print(cam_object.list_cameras())  # List all connected cameras\n```\n\n**Text to Speech**\n```python\nfrom jarvis.modules.speaker import speak\n\n\nif __name__ == '__main__':\n    speak_object = speak.Speaker()\n    speak_object.run()\n    print(list(speak_object.get_all_voices()))\n```\n\n**Speech to Text**\n```python\nimport asyncio\n\nfrom jarvis.modules.microphone import recognizer\n\n\nif __name__ == '__main__':\n    asyncio.run(recognizer.main())\n```\n\n## ENV Variables\nEnvironment variables are loaded from a `.env` file and validated using `pydantic`\n\n<details>\n<summary><strong>More on Environment variables</strong></summary>\n\n- **ROOT_PASSWORD** - System password to get the system vitals and run other `sudo` commands. Mandatory for `Linux`\n- **NAME** - Name which Jarvis should address the user by. Defaults to `Vignesh`\n- **TITLE** - Title which Jarvis should address the user by. Defaults to `sir`\n- **PLOT_MIC** - Boolean value whether to show microphone usage in realtime. Defaults to `True`\n- **LOG_RETENTION** - Number of days to store the logs. Defaults to `10`\n- **WAKE_WORDS** - List of wake words to initiate Jarvis' listener. Defaults to `['jarvis']` (Defaults to `['alexa']` in legacy macOS)<br>\n:warning: Jarvis has limitations on the wake words as it relies on ML libraries for wake word detection.\n\n- **VOICE_NAME** - Name of the voice supported by the OperatingSystem. Defaults to the author's favorite.\n- **VOICE_RATE** - Speed/rate at which the text should be spoken. Defaults to the value from `pyttsx3` module. Typically `200`\n\n    <details>\n    <summary><strong><i>To add more voices</i></strong></summary>\n\n    **macOS**:\n    >   - System Preferences → Accessibility → Spoken Content → System voice → Manage Voices...\n\n    **Windows**:\n    >   - Settings → Time & Language → Speech → Manage voices → Add voices\n\n    </details>\n\n- **SENSITIVITY** - Hot word detection sensitivity. Allowed range: [0-1] Defaults to `0.5`\n- **TIMEOUT** - Timeout in seconds until which the listener should wait for speech. Defaults to `3`\n- **PHRASE_LIMIT** - Timeout in seconds until which the listener will remain active. Defaults to `None`\n- **LIMITED** - Boolean flag to run only the main version of `Jarvis` skipping background processes. Defaults to `False` Enforced based on the number of CPU cores.\n- **DEBUG** - Boolean flag to enable debug level for logging. Defaults to `False`\n- **RECOGNIZER_SETTINGS** - A JSON object that has with customized speech recognition settings.\n\n    <details>\n    <summary><strong><i>Custom settings for speech recognition</i></strong></summary>\n\n    These are customized according to the author's voice pitch.\n    Please use [recognizer.py](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/microphone/recognizer.py) to figure out the suitable values on a trial and error basis.\n\n    > These settings are added (optionally), to avoid the hard coded `PHRASE_LIMIT`\n    > <br>\n    > Cons in using hard coded `PHRASE_LIMIT`:\n    >   - Disables the listener after the set limit even the speaker is actively talking.\n    >   - Listener will be active until the set limit even after the speaker has stopped talking.\n\n    Sample settings (formatted as JSON object)\n    - `RECOGNIZER_SETTINGS`: `'{\"energy_threshold\": 1100, \"dynamic_energy_threshold\": false, \"pause_threshold\": 2, \"phrase_threshold\": 0.1, \"non_speaking_duration\": 2}'`\n\n    **Description**\n    - `energy_threshold`: Minimum audio energy to consider for recording. Greater the value, louder the speech should be.\n    - `dynamic_energy_threshold`: Change considerable audio energy threshold dynamically.\n    - `pause_threshold`: Seconds of non-speaking audio before a phrase is considered complete.\n    - `phrase_threshold`: Minimum seconds of speaking audio before it can be considered a phrase - values below this are ignored. This helps to filter out clicks and pops.\n    - `non_speaking_duration`: Seconds of non-speaking audio to keep on both sides of the recording.\n\n    </details>\n\n---\n\n### Peripherals\n- **CAMERA_INDEX** - Camera index that has to be used. Run [camera.py](https://github.com/thevickypedia/Jarvis/tree/master/jarvis/modules/camera/camera.py) to get the index value of each camera.\n- **SPEAKER_INDEX** - Speaker index that has to be used. Run [peripherals.py](https://github.com/thevickypedia/Jarvis/tree/master/jarvis/modules/peripherals.py) to get the index value of each speaker.\n- **MICROPHONE_INDEX** - Microphone index that has to be used. Run [peripherals.py](https://github.com/thevickypedia/Jarvis/tree/master/jarvis/modules/peripherals.py) to get the index value of each microphone.\n\n### Features\n- **GIT_USER** - GitHub Username\n- **GIT_PASS** - GitHub Token\n- **WEATHER_API** - API Key from [openweathermap](https://openweathermap.org/) \n- **NEWS_API** - API Key from [newsapi](https://newsapi.org/docs/client-libraries/python)\n- **MAPS_API** - API Key for maps from [Google](https://developers.google.com/maps/documentation/maps-static/get-api-key)\n- **BIRTHDAY** - Birth date in the format DD-MM - Example: `24-April`\n- **WOLFRAM_API_KEY** - API Key from wolfram alpha.\n\n**[Email/SMS notifications](https://github.com/thevickypedia/gmail-connector)**\n- **GMAIL_USER** - Gmail account username to send and read emails.\n- **GMAIL_PASS** - Gmail account password to send and read emails.\n- **ALT_GMAIL_USER** - Alternate gmail account username to send an SMS. (`GMAIL_USER` can be re-used)\n- **ALT_GMAIL_PASS** - Alternate gmail account password to send an SMS. (`GMAIL_PASS` can be re-used)\n- **RECIPIENT** - Email address to which the emails from jarvis have to be received.\n\n**iOS integrations**\n- **ICLOUD_USER** - iCloud account username/email.\n- **ICLOUD_PASS** - iCloud account password.\n- **ICLOUD_RECOVERY** - Recovery phone number to activate lost mode on a target device - Example: `+11234567890`\n- **PHONE_NUMBER** - To send SMS from Jarvis - Example: `+11234567890`\n\n**Calendar/Meeting integrations**\n- **ICS_URL** - Shared calendar URL to get meetings information from. Should end with `.ics`\n- **MUTE_FOR_MEETING** - Boolean value to disable the listener during meetings. Defaults to `False`\n- **EVENT_APP** - To read events from `outlook` or `calendar` application in `macOS`. Defaults to `calendar` <br>\n:bulb: &nbsp; When `calender` is used, the name of the _calendar_ within the `Calendar.app` should be **Jarvis** <br>\n\n**Background scans [Defaults to 1 hour]**\n- **SYNC_MEETINGS** - Interval in seconds to generate ``meetings`` information using an `ics` URL.\n- **SYNC_EVENTS** - Interval in seconds to generate ``events`` information using `calendar` or `outlook` application.\n\n**[Wi-Fi Controls](https://github.com/thevickypedia/pywifi-controls)**\n- **WIFI_SSID** - SSID of the wireless connection.\n- **WIFI_PASSWORD** - Password for the wireless connection.\n- **CONNECTION_RETRY** - Frequency in seconds to check for an active internet connection. Defaults to 10 seconds.\n\n**[VPNServer](https://github.com/thevickypedia/vpn-server) integration**\n- **VPN_USERNAME** - Username to create vpn-server. Defaults to profile username.\n- **VPN_PASSWORD** - Password to authenticate vpn-server. Defaults to profile password.\n- **VPN_DOMAIN** - Domain name for the hosted zone.\n- **VPN_RECORD_NAME** - Alias record name to access VPN server.\n\n**[Car Controls](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/car)** - Applies only for JLR vehicles subscribed to `InControl` application.\n- **CAR_EMAIL** - Email address to log in to InControl API.\n- **CAR_PASS** - Password to authenticate InControl API.\n- **CAR_PIN** - InControl PIN.\n\n**[Garage Controls](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/myq/myq.py)** - Applies only for garages using [MyQ garage controller](https://www.myq.com/products/smart-garage-control).\n- **MYQ_USERNAME** - Email address to log in to MyQ API.\n- **MYQ_PASSWORD** - Password to authenticate MyQ API.\n\n**[Telegram Bot](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/telegram.py) integration**\n- **BOT_TOKEN** - Telegram BOT token.\n- **BOT_CHAT_IDS** - UserID/ChatID for a particular user.\n- **BOT_USERS** - Usernames that should have access to Jarvis.\n\n**[OS Agnostic Voice Model](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/audio/speech_synthesis.py)**\n- **SPEECH_SYNTHESIS_TIMEOUT** - Timeout to connect to the docker container that processes text to speech requests.\n- **SPEECH_SYNTHESIS_VOICE** - Voice for the speech synthesis model. Defaults to author's favorite.\n- **SPEECH_SYNTHESIS_QUALITY** - Quality of speech synthesis conversion. Defaults to `medium`. <br>\n    <details>\n    <summary><strong><i>To enable independent speech-synthesis</i></strong></summary>\n\n    ```shell\n    docker run \\\n        -it \\\n        -p 5002:5002 \\\n        -e \"HOME=${HOME}\" \\\n        -v \"$HOME:${HOME}\" \\\n        -v /usr/share/ca-certificates:/usr/share/ca-certificates \\\n        -v /etc/ssl/certs:/etc/ssl/certs \\\n        -w \"${PWD}\" \\\n        --user \"$(id -u):$(id -g)\" \\\n        rhasspy/larynx\n    ```\n\n    :bulb: &nbsp; Speech Synthesis can run on a docker container for better voices but, response might be negligibly slower. If you don't have docker installed or simply don't want to use it, set the `SPEECH_SYNTHESIS_TIMEOUT` env var to 0. This is also done automatically if failed to launch a docker container upon startup.\n\n    </details>\n\n---\n\n**[Offline communicator](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/offline.py)**\n- **OFFLINE_PORT** - Port number to initiate offline communicator. Defaults to `4483`\n- **OFFLINE_PASS** - Secure phrase to authenticate offline requests. Defaults to `OfflineComm`\n- **WORKERS** - Number of uvicorn workers (processes) to spin up. Defaults to `1`\n\n**Stock Portfolio**\n- **ROBINHOOD_USER** - Robinhood account username.\n- **ROBINHOOD_PASS** - Robinhood account password.\n- **ROBINHOOD_QR** - Robinhood login [QR code](https://robinhood.com/account/settings)\n\n**API Features**\n- **ROBINHOOD_ENDPOINT_AUTH** - Authentication token to access the robinhood portfolio which is generated every hour.\n- **SURVEILLANCE_ENDPOINT_AUTH** - Token to access webcam live feed via Jarvis API.\n- **SURVEILLANCE_SESSION_TIMEOUT** - Session time out for `/surveillance`. Defaults to 300 seconds.\n\n</details>\n\n### Background Tasks\nThere are two options to run background tasks on Jarvis.\n\n- Jarvis can run internal tasks (offline communicator compatible) at certain intervals using a `background_tasks.yaml` file stored in `fileio` directory.\n    <details>\n    <summary><strong><i>Setup Instructions</i></strong></summary>\n\n  This is the sample content of `background_tasks.yaml`\n\n    ```yaml\n    - seconds: 1_800\n      task: just turn off all lights  # Runs every 30 minutes - 'just' flag retains the lights' last setting (eg: brightness or color)\n    - seconds: 10_800\n      task: remind me to drink water  # Runs every 3 hours ignoring the hours specified\n      ignore_hours:\n       - 21\n       - 22\n       - 23\n       - 0\n       - 1\n       - 2\n       - 3\n       - 4\n       - 5\n       - 6\n    ```\n    </details>\n\n- **CRONTAB** - Runs external tasks using cron expressions. Needs to be stored as env var.\n    <details>\n    <summary><strong><i>Sample value</i></strong></summary>\n\n    ```yaml\n    [\n      \"0 0 * * 1-5/2 find /var/log -delete\",\n      \"0 5 * * 1 tar -zcf /var/backups/home.tgz /home/\"\n    ]\n    ```\n    </details>\n\n### Contacts\nJarvis can send on demand notifications using a ``contacts.yaml`` file stored in ``fileio`` directory. Uses [gmail-connector](https://pypi.org/project/gmail-connector/) for SMS and email notifications.\n\n<details>\n<summary><strong><i>Setup Instructions</i></strong></summary>\n\n> Note: Jarvis currently supports sending emails only when the ``contacts.yaml`` file is present, however phone numbers can be used directly.\n\n```yaml\nphone:\n  Tony: 0123456789\n  Thor: 1234567890\nemail:\n  Eddard: ned@gmail.com\n  Aegon: egg@yahoo.com\n```\n</details>\n\n### Smart Devices\nA source file `smart_devices.yaml` is used to store smart devices' hostnames.\nJarvis supports `MagicHome` for [lights](https://www.amazon.com/gp/product/B08C7GY43L), `LGWebOS` and `Roku` for TVs.\n\n- TV hostnames should include the brand name [`LG`/`Roku`] to distinguish the modules accordingly.\n  - This will be set by default, if yours doesn't include the brand name change it in the TV settings.\n\n- To wake up `Roku` TVs using MAC address, make sure the `Bandwidth saver` feature is turned off under,\n    ```text\n    Settings/Network/Bandwidth saver >> Off\n    ```\n\n- For first time users on `LGWebOS` TVs, there will be a prompt on the TV to accept the connection request.\n  - Once the connection request is accepted a client key will be generated and logged.\n  - Please make sure to store this in `smart_devices.yaml` file to avoid repeated connection prompt.\n\n<details>\n<summary><strong><i>Setup Instructions</i></strong></summary>\n\n- TV identifiers should have the word `tv` to distinguish between lights and tv.\n- The name used in the keys (for both lights and tv) will be the identifier when an action is requested.\n- Lights should be a dictionary of identifier and a list of hostnames.\n- TVs should be a nested dictionary of multiple parameters.\n- The source file (`smart_devices.yaml`) should be as following:\n\n```yaml\nbedroom:\n  - 'HOSTNAMES'\nhallway:\n  - 'HOSTNAMES'\nhallway basement:\n  - 'HOSTNAMES'\nkitchen:\n  - 'HOSTNAMES'\nliving room:\n  - 'HOSTNAMES'\nparty mode:  # Light hostnames that needs to be engaged for party mode, if not present individual lights can be enabled\n  - 'HOSTNAMES'\nliving room tv:\n  hostname: 'HOSTNAME'\n  client_key: 'CLIENT_KEY'  # Generated automatically if unavailable\n  mac_address:  # Mac addresses can either be a string or a list\n  - 'WIRED_MAC_ADDRESS'\n  - 'WIRELESS_MAC_ADDRESS'\nbedroom tv:\n  hostname: 'HOSTNAME'\n  mac_address: 'MAC_ADDRESS'\n```\n</details>\n\n### Automation Setup [Optional]\nJarvis can execute [offline compatible](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/offline/compatibles.py) tasks \nat pre-defined times without any user interaction. Uses an `automation.yaml` file as source which should be stored \nwithin the directory `fileio`\n\n<details>\n<summary><strong><i>Setup Instructions</i></strong></summary>\n\nThe YAML file should be a dictionary within a dictionary that looks like the below.\n\n**OPTIONAL:** The key, `day` can be a `list` of days, or a `str` of a specific day or simply a `str` saying `weekday` or\n`weekend` when the particular automation should be executed.\n\n> Not having the key `day` will run the automation daily.\n> Date format should match exactly as described below.\n\n```yaml\n06:00 AM:\n  day: weekday  # Runs only between Monday and Friday\n  task: set my bedroom lights to 50%\n06:30 AM:\n  day:  # Runs only on Monday, Wednesday and Friday\n  - Monday\n  - wednesday\n  - FRIDAY\n  task: set my bedroom lights to 100%\n08:00 AM:  # Runs only on Saturday and Sunday\n  day: weekend\n  task: set my bedroom lights to 100%\n09:00 PM:  # Runs daily\n  task: set my bedroom lights to 5%\n12:00 AM:  # Even performs tasks that are not supported via voice commands\n  task: restart all background processes\n```\n</details>\n\n### Simulation Setup [Optional]\nJarvis can execute [offline compatible](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/offline/compatibles.py) tasks \nas a simulation to test the required functions and send an email with the results. Uses a `simulation.yaml` file as source which should be stored\nwithin the directory `fileio`\n\n<details>\n<summary><strong><i>Setup Instructions</i></strong></summary>\n\nThe YAML file should be a list of phrases within a dictionary that looks like the below.\n\n```yaml\nmeeting_event:\n- get me the events from my calendar\n- what meetings do I have today\n```\n\n</details>\n\n## Guide\nPlease refer to the [wiki](https://github.com/thevickypedia/Jarvis/wiki) page for API usage, access controls, env variables, features' overview and demo videos.\n\n## FAQs\nPlease refer to the [FAQs](https://github.com/thevickypedia/Jarvis/wiki/FAQs) section of the wiki.\n\n## Coding Standards\nDocstring format: [`Google`](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) <br>\nStyling conventions: [`PEP 8`](https://www.python.org/dev/peps/pep-0008/) <br>\nClean code with pre-commit hooks: [`flake8`](https://flake8.pycqa.org/en/latest/) and \n[`isort`](https://pycqa.github.io/isort/)\n\n## [Release Notes](https://github.com/thevickypedia/Jarvis/blob/master/release_notes.rst)\n**Requirement**\n```shell\npython -m pip install changelog-generator\n```\n\n**Usage**\n```shell\nchangelog reverse -f release_notes.rst -t 'Release Notes'\n```\n\n## Linting\n`PreCommit` will ensure linting, and the doc creation are run on every commit.\n\n**Requirement**\n```shell\npip install sphinx==5.1.1 pre-commit recommonmark\n```\n\n**Usage**\n```shell\npre-commit run --all-files\n```\n\n## Pypi Package\n[![pypi-module](https://img.shields.io/badge/Software%20Repository-pypi-1f425f.svg)](https://packaging.python.org/tutorials/packaging-projects/)\n\n[https://pypi.org/project/jarvis-ironman/](https://pypi.org/project/jarvis-ironman/)\n\n## Runbook\n[![made-with-sphinx-doc](https://img.shields.io/badge/Code%20Docs-Sphinx-1f425f.svg)](https://www.sphinx-doc.org/en/master/man/sphinx-autogen.html)\n\n[https://thevickypedia.github.io/Jarvis/](https://thevickypedia.github.io/Jarvis/)\n\n## License & copyright\n\n&copy; Vignesh Sivanandha Rao\n\nLicensed under the [MIT License](https://github.com/thevickypedia/Jarvis/blob/master/LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,home-automation,natural-language-processing,text-to-speech,speech-recognition,jarvis,hotword-detection,virtual-assistant",
    "license": "MIT License  Copyright (c) 2020 Vignesh Sivanandha Rao  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jarvis-ironman",
    "package_url": "https://pypi.org/project/jarvis-ironman/",
    "platform": null,
    "project_url": "https://pypi.org/project/jarvis-ironman/",
    "project_urls": {
      "Bug Tracker": "https://github.com/thevickypedia/Jarvis/issues",
      "Demo": "https://vigneshrao.com/Jarvis/Jarvis_Demo.mp4",
      "Docs": "https://thevickypedia.github.io/Jarvis",
      "Homepage": "https://github.com/thevickypedia/Jarvis",
      "Release Notes": "https://github.com/thevickypedia/Jarvis/blob/master/release_notes.rst",
      "Source": "https://github.com/thevickypedia/Jarvis"
    },
    "release_url": "https://pypi.org/project/jarvis-ironman/7.2.0/",
    "requires_dist": [
      "SpeechRecognition (==3.8.1)",
      "wave (==0.0.2)",
      "pyttsx3 (==2.90)",
      "wikipedia (==1.4.0)",
      "newsapi-python (==0.2.7)",
      "pyrh (==2.0)",
      "pytz (==2022.7.1)",
      "timezonefinder (==6.1.9)",
      "pyicloud (==1.0.0)",
      "geopy (==2.3.0)",
      "PyYAML (==6.0)",
      "axju-jokes (==1.0.3)",
      "inflect (==6.0.2)",
      "pywebostv (==0.8.9)",
      "speedtest-cli (==2.1.3)",
      "holidays (==0.21)",
      "randfacts (==0.20.1)",
      "wolframalpha (==5.0.0)",
      "fastapi (==0.94.0)",
      "uvicorn (==0.21.0)",
      "aiofiles (==23.1.0)",
      "python-multipart (==0.0.6)",
      "pydantic[email] (==1.10.6)",
      "ics (==0.7.2)",
      "Jinja2 (==3.1.2)",
      "certifi (==2022.12.7)",
      "googlehomepush (==0.1.0)",
      "PyChromecast (==2.3.0)",
      "psutil (==5.9.4)",
      "pytest (==7.2.2)",
      "bs4 (==0.0.1)",
      "Pillow (==9.4.0)",
      "packaging (==23.0)",
      "numpy (==1.24.2)",
      "SoundFile (==0.12.1)",
      "deepdiff (==6.2.3)",
      "pymyq (==3.1.6)",
      "docker (==6.0.1)",
      "websockets (==10.4)",
      "PyJWT (==2.6.0)",
      "webull (==0.6.1)",
      "matplotlib (==3.7.1)",
      "pandas (==1.5.3)",
      "lxml (==4.9.2)",
      "aiohttp (==3.8.4)",
      "python-dateutil (==2.8.2)",
      "requests (==2.28.2)",
      "sounddevice (==0.4.6)",
      "gmail-connector",
      "vpn-server",
      "pycontrols",
      "pytest ; extra == 'dev'",
      "pre-commit ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Natural Language User Interface",
    "version": "7.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17354957,
  "releases": {
    "7.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92e5f383a718523264c2477fa423a009146dedfefb589732c0c53589f4d9bbf2",
          "md5": "380ad6b15ccb9a76febaba4e87fe7ce8",
          "sha256": "1de273b95de78a39555f93468a538a647870d4cee08f4fda7ac41025f5c7efc0"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "380ad6b15ccb9a76febaba4e87fe7ce8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3443486,
        "upload_time": "2023-01-31T03:35:06",
        "upload_time_iso_8601": "2023-01-31T03:35:06.637450Z",
        "url": "https://files.pythonhosted.org/packages/92/e5/f383a718523264c2477fa423a009146dedfefb589732c0c53589f4d9bbf2/jarvis_ironman-7.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c880cda9e1902dbc16e131d660c925beb0d9ff0594dfb16e29c04dc7ddfc934",
          "md5": "679d06d215f96dee98f897c1eb554f5f",
          "sha256": "9a050ea0968a9272580bedb2d81920ca4661361ede1ca53a843019f860fd69c9"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "679d06d215f96dee98f897c1eb554f5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3443720,
        "upload_time": "2023-02-01T16:36:32",
        "upload_time_iso_8601": "2023-02-01T16:36:32.715670Z",
        "url": "https://files.pythonhosted.org/packages/2c/88/0cda9e1902dbc16e131d660c925beb0d9ff0594dfb16e29c04dc7ddfc934/jarvis_ironman-7.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98ad9463f53bb87ca3fde7b02ebe4b87121d3606ae7bf342307902dd181c6636",
          "md5": "5877af8c2a1e9e2facb6654182f66624",
          "sha256": "c20bb0f2efe69d0c344e46ea56ce191e29aac00938a6282a337060938a6e11a2"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5877af8c2a1e9e2facb6654182f66624",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3444959,
        "upload_time": "2023-02-06T03:29:39",
        "upload_time_iso_8601": "2023-02-06T03:29:39.644103Z",
        "url": "https://files.pythonhosted.org/packages/98/ad/9463f53bb87ca3fde7b02ebe4b87121d3606ae7bf342307902dd181c6636/jarvis_ironman-7.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05c37bb6ed353630e48b446388f475c003d32c66c02996b94bbc9092605d3b6e",
          "md5": "272257f4b58b3220f090bbf3571116c0",
          "sha256": "037da6d9a20aa253eb09b7818402571a06cc0491a926fec6e88d2f194f57afac"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "272257f4b58b3220f090bbf3571116c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3445126,
        "upload_time": "2023-02-10T21:18:33",
        "upload_time_iso_8601": "2023-02-10T21:18:33.866404Z",
        "url": "https://files.pythonhosted.org/packages/05/c3/7bb6ed353630e48b446388f475c003d32c66c02996b94bbc9092605d3b6e/jarvis_ironman-7.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d92c1c4a1a3e648356133d2ed341611471b4f6139cb4fe7ca37239cadc295d",
          "md5": "1d765072a46aab58ddf93ad0d3185902",
          "sha256": "972751b798a0e1bb84bce4153ba6aa02773807eb6adf7f916caf559d9624d434"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d765072a46aab58ddf93ad0d3185902",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3443940,
        "upload_time": "2023-02-13T00:46:32",
        "upload_time_iso_8601": "2023-02-13T00:46:32.371177Z",
        "url": "https://files.pythonhosted.org/packages/32/d9/2c1c4a1a3e648356133d2ed341611471b4f6139cb4fe7ca37239cadc295d/jarvis_ironman-7.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eca65b1073bfcf534b0fc2a3773cd4656d13ccb51bd15e4ee87068067a6b4315",
          "md5": "3ddf436a56affdd1b7b36b709fab5bc9",
          "sha256": "c30ff1a0986b3529b4bfbe1a97e1521c4522f7cf2cc38c29fde789a6ebfb36e2"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ddf436a56affdd1b7b36b709fab5bc9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3444297,
        "upload_time": "2023-02-27T04:26:45",
        "upload_time_iso_8601": "2023-02-27T04:26:45.239509Z",
        "url": "https://files.pythonhosted.org/packages/ec/a6/5b1073bfcf534b0fc2a3773cd4656d13ccb51bd15e4ee87068067a6b4315/jarvis_ironman-7.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de4489319e5828850750a80d674ee200e954fb3795f2bbfdcc12e76782a77b6b",
          "md5": "e7061e54d36d0b70187f84f687858c46",
          "sha256": "01c9faad1c4d93cced82f4d30db19fec18c193394cfc1306954dfb9363fdc455"
        },
        "downloads": -1,
        "filename": "jarvis_ironman-7.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7061e54d36d0b70187f84f687858c46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3445336,
        "upload_time": "2023-03-19T16:46:30",
        "upload_time_iso_8601": "2023-03-19T16:46:30.813670Z",
        "url": "https://files.pythonhosted.org/packages/de/44/89319e5828850750a80d674ee200e954fb3795f2bbfdcc12e76782a77b6b/jarvis_ironman-7.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de4489319e5828850750a80d674ee200e954fb3795f2bbfdcc12e76782a77b6b",
        "md5": "e7061e54d36d0b70187f84f687858c46",
        "sha256": "01c9faad1c4d93cced82f4d30db19fec18c193394cfc1306954dfb9363fdc455"
      },
      "downloads": -1,
      "filename": "jarvis_ironman-7.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e7061e54d36d0b70187f84f687858c46",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 3445336,
      "upload_time": "2023-03-19T16:46:30",
      "upload_time_iso_8601": "2023-03-19T16:46:30.813670Z",
      "url": "https://files.pythonhosted.org/packages/de/44/89319e5828850750a80d674ee200e954fb3795f2bbfdcc12e76782a77b6b/jarvis_ironman-7.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}