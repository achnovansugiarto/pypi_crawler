{
  "info": {
    "author": "ClÃ©ment Doumergue",
    "author_email": "clement.doumergue@epitech.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pegomancy\n\nYet another parsing thingy\n\n## Installation\n\nThis project is written using Python 3.8. It can be installed using setuptools or pip.\n\n## Usage\n\n### As a tool\n\nPegomancy provides a `pegomant` executable that can be used to generate Python code to parse data according to a given grammar specification.\n\n```\nusage: pegomant [-h] [-c CLASS_NAME] [-o OUTPUT_FILE] grammar_file\n\npositional arguments:\n  grammar_file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CLASS_NAME, --class_name CLASS_NAME\n  -o OUTPUT_FILE, --output-file OUTPUT_FILE\n```\n\n### As a library\n\nThe `pegomancy` module can be used as a library to fully control grammars and how code is generated.\n\n## Grammar syntax\n\nPegomancy grammars look like regular PEG grammars, with a dash of sugar syntax. Here is an example grammar specification that can be used to parse arithmetic expressions:\n\n```\ninteger: r\"[0-9]+\"\n\nexpr: left:expr op:'+' right:term\n    | left:expr op:'-' right:term\n    | term\n\nterm: left:term op:'*' right:atom\n    | left:term op:'/' right:atom\n    | atom\n\natom: integer | '(' expr ')'\n```\n\nIn case the syntax isn't familiar, let's provide a bit of information.\n\n### Rules\n\nA grammar is made of one or several rules. Each rule is specified with the following syntax:\n\n```\nrule_name: expression\n```\n\nIn the grammar above, `integer`, `expr`, `term` and `atom` are the rules.\n\n### Expressions\n\n#### Atoms\n\nAtoms are the most primitive constructs used in an expression: they match a simple portion of the source text.\n\nIn the example grammar given above, we have different kinds of atoms:\n- `'('`, `')'`, `'+'` (and others), each matching a raw string of text\n- `r\"[0-9]+\"`, matching a regular expression\n- `integer` (in the `atom` rule), matching what the `integer` rule matches\n\nNote that atoms can be concatenated: `'(' expr ')'` will match an opening parenthesis, then what the `expr` rule matches, then a closing parenthesis.\n\n#### Items\n\nItems are more complex expressions and introduce modifiers to repeat or make expressions optional:\n- the `*` operator can be used to allow repeating an expression zero or more times\n- the `+` operator can be used to allow repeating an expression one or more times\n- the `?` operator can be used to make an expression optional\n\nItems are unnamed by default, but can be named using the `:` operator, as in `op:'+'`, which gives the name `op` to the `'+'` atom.\n\n#### Alternatives\n\nSome rules might allow multiple possibilities: for example, the `atom` rule in the above grammar can match either an integer or a parenthesized expression.\nThe notion of alternative is expressed in the grammar using the `|` operator.\n\n## Parse results\n\n### Default AST\n\nBy default, parsers generated with `pegomant` will produce AST nodes that are either:\n- a single value, if the matched expression has only one component\n- a list, if the matched expression has multiple components\n- a dictionary, if the matched expression has named items (unnamed items are discarded from the result)\n\n### Customizing the AST\n\nThe default AST can be enough, but in some cases it is useful to transform it into a custom data structure.\nWhen using a Pegomancy parser, you can specify an object whose methods will be invoked when a rule matches some input.\n\nThat object must be given as the `rule_handler` parameter when initializing the parser.\n\nHere is a possible rule handler for the example grammar given in previous sections.\n\n```python\nclass RuleHandler:\n    def integer(self, node):\n        return int(node)\n\n    def expr(self, node):\n        if isinstance(node, dict):\n            if node[\"op\"] == \"+\":\n                return node[\"left\"] + node[\"right\"]\n            else:\n                return node[\"left\"] - node[\"right\"]\n        else:\n            return node\n\n    def term(self, node):\n        if isinstance(node, dict):\n            if node[\"op\"] == \"*\":\n                return node[\"left\"] * node[\"right\"]\n            else:\n                return node[\"left\"] / node[\"right\"]\n        else:\n            return node\n\n    def atom(self, node):\n        if isinstance(node, list):\n            return node[1]\n        return node\n```\n\n> The methods can raise a `ParseError` to indicate a parse failure for the rule being handled.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/doom/pegomancy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pegomancy",
    "package_url": "https://pypi.org/project/pegomancy/",
    "platform": "",
    "project_url": "https://pypi.org/project/pegomancy/",
    "project_urls": {
      "Homepage": "https://github.com/doom/pegomancy"
    },
    "release_url": "https://pypi.org/project/pegomancy/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Yet another parsing thingy",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12451987,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8d64637c7e172ffb548daa81d6d72bb4be978a23af48066bac41df710f54d8d",
          "md5": "d1ac9ed1b0645caec8dd9c3437a67bd6",
          "sha256": "a3b3460df154be598b266b89f4cb1827be39571179bda9d44991f4bf013704a7"
        },
        "downloads": -1,
        "filename": "pegomancy-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1ac9ed1b0645caec8dd9c3437a67bd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13965,
        "upload_time": "2022-01-01T10:27:25",
        "upload_time_iso_8601": "2022-01-01T10:27:25.230997Z",
        "url": "https://files.pythonhosted.org/packages/c8/d6/4637c7e172ffb548daa81d6d72bb4be978a23af48066bac41df710f54d8d/pegomancy-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8d64637c7e172ffb548daa81d6d72bb4be978a23af48066bac41df710f54d8d",
        "md5": "d1ac9ed1b0645caec8dd9c3437a67bd6",
        "sha256": "a3b3460df154be598b266b89f4cb1827be39571179bda9d44991f4bf013704a7"
      },
      "downloads": -1,
      "filename": "pegomancy-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1ac9ed1b0645caec8dd9c3437a67bd6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13965,
      "upload_time": "2022-01-01T10:27:25",
      "upload_time_iso_8601": "2022-01-01T10:27:25.230997Z",
      "url": "https://files.pythonhosted.org/packages/c8/d6/4637c7e172ffb548daa81d6d72bb4be978a23af48066bac41df710f54d8d/pegomancy-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}