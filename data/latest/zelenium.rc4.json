{
  "info": {
    "author": "Parviz Khavari",
    "author_email": "me@parviz.pw",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Browsers",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# zelenium\nNew Selenium framework for Python with base pages and elements\n\n# Installation\n\n```bash\npip install zelenium\n```\n\n# Usage\n\nZelenium offers several features that could be combined with classical\nselenium usage:\n\n* Driver singleton configuration;\n* BasePage with BaseElements;\n* Suffix and formatting mechanisms for BaseElements;\n* It also should be useful for Appium testing.\n\n## zelenium configuration\n\nTo setup configuration for zelenium you could just use `Config`:\n\n```python\nfrom selenium import webdriver\nfrom zelenium import Config\n\nconfig = Config.get_instance()\nconfig.driver = webdriver.Chrome()\n```\n\nBecause Config is singleton - you could not use it with two different\nwebdrivers at one moment. But if you need it, you could use private class:\n\n```python\nfrom zelenium import Config\nfrom zelenium.base.config import _Config\n\nconfig1 = Config.get_instance()\nconfig2 = _Config()\n\nassert not (config1 is config2)  # No assertion\n```\n\n## BasePage and BaseElement\n\nWhat offers you BasePage:\n\n* No need to pass webdriver instance - it would be passed from\nconfiguration automatically\n* Some predefined methods, which are useful in testing\n* Suffix mechanism\n\n### Define new Page\n\nLet's imagine that we have already setup webdriver for Config,\nand starting to create new page:\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom zelenium import BasePage\n\nclass LoginPage(BasePage):\n    title = (By.CSS_SELECTOR, \"[data-test='title']\")\n    username = (By.CSS_SELECTOR, \"[data-test='username']\")\n    password = (By.CSS_SELECTOR, \"[data-test='password']\")\n    submit = (By.CSS_SELECTOR, \"[data-test='submit']\")\n\ndef main():\n    login_page = LoginPage()\n    print(login_page.title().text)\n\nmain()\n```\n\nIf we execute it after opening something in browser - it will find\nelement and print text inside of it.\n\nHow it works?\n\nWell, BasePage also has a `metaclass` that will go all over page class\nfields and if field is tuple with two strings - it would replace it with\n`BaseElement`.\n\n`BaseElement` itself has magic `__call__` method,  which executes when\nyou 'call' class instance:\n```python\nfrom zelenium import BE\nelem = BE(\"by\", \"selector\")\nweb_element = elem()  # Here you calls class instance and it will return\n                      # WebElement for you. Just classic WebElement\n```\n\n### Inherit pages\n\nFor example, you have several pages, which have same structure, but some\ndifferent logic, for example:\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom zelenium import BasePage\n\nclass LoginPage(BasePage):\n    title = (By.CSS_SELECTOR, \"[data-test='title']\")\n    username = (By.CSS_SELECTOR, \"[data-test='username']\")\n    password = (By.CSS_SELECTOR, \"[data-test='password']\")\n    submit = (By.CSS_SELECTOR, \"[data-test='submit']\")\n\n    def login(self, username, password):\n        self.username().send_keys(username)\n        self.password().send_keys(password)\n        self.submit().click()\n\n\nclass RegisterPage(LoginPage):\n    full_name = (By.CSS_SELECTOR, \"[data-test='full_name']\")\n\n    def register(self, full_name, username, password):\n        self.full_name().send_key(full_name)\n        self.username().send_keys(username)\n        self.password().send_keys(password)\n        self.submit().click()\n```\n\nUsing this - you have no need to redefine elements on different pages -\nyou could just inherit them, if they have same locators (or quite the same).\n\n### Format elements\n\nSometimes you need to define a lot of elements with similar locators.\nZelenium offers two way to solve this. First is BaseElement formatting:\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom zelenium import BasePage, BE\n\nclass DevicesPage(BasePage):\n    _cell = BE(By.CSS_SELECTOR, \"[data-test='devicesPageCell_{}']\")\n    user = _cell.format(\"user\")\n    imei = _cell.format(\"imei\")\n    iccid = _cell.format(\"iccid\")\n    model = _cell.format(\"model\")\n```\n\n`.format()` method formats locator as a string and returns new instance\nof BaseElement.\n\nSecond mechanism is suffix:\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom zelenium import BasePage\n\nclass DevicesPage(BasePage):\n    __suffix = \"devicesPageCell_\"\n    user = (By.CSS_SELECTOR, \"[data-test='{s}_user']\")\n    imei = (By.CSS_SELECTOR, \"[data-test='{s}_imei']\")\n    iccid = (By.CSS_SELECTOR, \"[data-test='{s}_iccid']\")\n    model = (By.CSS_SELECTOR, \"[data-test='{s}_model']\")\n```\n\nMain differences of this two mechanisms are:\n\n* Suffix adds to locator automatically;\n* Suffix could be inherited;\n* Format could be used anywhere outside classes - you could format\nelement in some functions according to changes on page.\n* Format requires usage of BaseElement class itself\n\nExample of suffix inheritance:\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom zelenium import BasePage\n\n\nclass LoginPage(BasePage):\n    __suffix = \"loginPageForm_\"\n\n    title = (By.CSS_SELECTOR, \"[data-test='{s}title']\")\n    username = (By.CSS_SELECTOR, \"[data-test='{s}username']\")\n    password = (By.CSS_SELECTOR, \"[data-test='{s}password']\")\n    submit = (By.CSS_SELECTOR, \"[data-test='{s}submit']\")\n\n\nclass RegisterPage(LoginPage):\n    __suffix = \"registerPageForm_\"\n\n    email = (By.CSS_SELECTOR, \"[data-test='{s}email']\")\n    confirm = (By.CSS_SELECTOR, \"[data-test='{s}confirm']\")\n\n\nclass RenamedRegisterPage(RegisterPage):\n    __suffix = \"renamedRegisterPageForm_\"\n\n\ndef main():\n    log = LoginPage()\n    reg = RegisterPage()\n    ren = RenamedRegisterPage()\n\n    print(log.title)\n    print(log.username)\n    print(log.password)\n    print(log.submit)\n    print(reg.title)\n    print(reg.username)\n    print(reg.password)\n    print(reg.submit)\n    print(reg.email)\n    print(reg.confirm)\n    print(ren.title)\n    print(ren.username)\n    print(ren.password)\n    print(ren.submit)\n    print(ren.email)\n    print(ren.confirm)\n\n\nif __name__ == '__main__':\n    main()\n```\n\nThis code will output:\n\n```text\nElement [data-test='loginPageForm_title'] (css selector)\nElement [data-test='loginPageForm_username'] (css selector)\nElement [data-test='loginPageForm_password'] (css selector)\nElement [data-test='loginPageForm_submit'] (css selector)\nElement [data-test='registerPageForm_title'] (css selector)\nElement [data-test='registerPageForm_username'] (css selector)\nElement [data-test='registerPageForm_password'] (css selector)\nElement [data-test='registerPageForm_submit'] (css selector)\nElement [data-test='registerPageForm_email'] (css selector)\nElement [data-test='registerPageForm_confirm'] (css selector)\nElement [data-test='renamedRegisterPageForm_title'] (css selector)\nElement [data-test='renamedRegisterPageForm_username'] (css selector)\nElement [data-test='renamedRegisterPageForm_password'] (css selector)\nElement [data-test='renamedRegisterPageForm_submit'] (css selector)\nElement [data-test='renamedRegisterPageForm_email'] (css selector)\nElement [data-test='renamedRegisterPageForm_confirm'] (css selector)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zeburek/zelenium",
    "keywords": "",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zelenium",
    "package_url": "https://pypi.org/project/zelenium/",
    "platform": "",
    "project_url": "https://pypi.org/project/zelenium/",
    "project_urls": {
      "Homepage": "https://github.com/zeburek/zelenium"
    },
    "release_url": "https://pypi.org/project/zelenium/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "New Selenium framework for Python with base pages and elements",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7104510,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28835b579be41b445d7570afa747f06af54eec2d03c860ef4d7d1afbbfe9f898",
          "md5": "76da770de70704da68dd764b58c5c7b4",
          "sha256": "4a0a68d5dbec06b7c044cf79d02116cc3a00d54ac7ecbc7c1a855173d9ca930c"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76da770de70704da68dd764b58c5c7b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16266,
        "upload_time": "2020-04-25T13:57:00",
        "upload_time_iso_8601": "2020-04-25T13:57:00.036144Z",
        "url": "https://files.pythonhosted.org/packages/28/83/5b579be41b445d7570afa747f06af54eec2d03c860ef4d7d1afbbfe9f898/zelenium-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afa5a745c0e3e48330d7f6ae987e840ef02ed28f8056920227c2afb285eeeeb6",
          "md5": "af40bc2a33b4354a0df0e23aec7f2aa4",
          "sha256": "e176d8dac7d7508cd8a4be8b715138c3237f2f9529c240c7307ceaa7d17896c0"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "af40bc2a33b4354a0df0e23aec7f2aa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5482,
        "upload_time": "2020-04-25T13:57:01",
        "upload_time_iso_8601": "2020-04-25T13:57:01.757641Z",
        "url": "https://files.pythonhosted.org/packages/af/a5/a745c0e3e48330d7f6ae987e840ef02ed28f8056920227c2afb285eeeeb6/zelenium-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "464d3cc2c42914f141ce4c5222892ed62d92125762aafa7d6720cafca124332c",
          "md5": "94818b4676e6a03c0efcf7bd2d579651",
          "sha256": "caf72920978b1cdd4bc50dabacf46c1665d02b6885e2ef35119b7fddf3520814"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94818b4676e6a03c0efcf7bd2d579651",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16270,
        "upload_time": "2020-04-25T18:13:49",
        "upload_time_iso_8601": "2020-04-25T18:13:49.074126Z",
        "url": "https://files.pythonhosted.org/packages/46/4d/3cc2c42914f141ce4c5222892ed62d92125762aafa7d6720cafca124332c/zelenium-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b692f31aad27c96f7ed10b68c90b9ab74e86cd9e70e5b6b1c124b5a603ac7532",
          "md5": "e30ed9522d5efd9d362ac6e5feffa8e4",
          "sha256": "44c892166a542612c0f04fc1db88724bdf4c8ec880508cf0378d5153a51c7f9c"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e30ed9522d5efd9d362ac6e5feffa8e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5473,
        "upload_time": "2020-04-25T18:13:50",
        "upload_time_iso_8601": "2020-04-25T18:13:50.133993Z",
        "url": "https://files.pythonhosted.org/packages/b6/92/f31aad27c96f7ed10b68c90b9ab74e86cd9e70e5b6b1c124b5a603ac7532/zelenium-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd6b6ff183931f350962cea6e52559d1e86a1c200d1e448c89ea50b4372e1044",
          "md5": "c49b79cb2e0cb17e223912cb32ada703",
          "sha256": "245ff603196c413acedde91f3f4661add43d7094112ac397404e16ff77a5715c"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c49b79cb2e0cb17e223912cb32ada703",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18826,
        "upload_time": "2020-04-26T11:14:12",
        "upload_time_iso_8601": "2020-04-26T11:14:12.025532Z",
        "url": "https://files.pythonhosted.org/packages/bd/6b/6ff183931f350962cea6e52559d1e86a1c200d1e448c89ea50b4372e1044/zelenium-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "491453b537d0ca05889cdc534d4fbb8343c23eb83fab666120cc26acec4127b7",
          "md5": "66654f1f55201e6dff3e8106040c9e93",
          "sha256": "b58fbb045c03a9116e994dbb950e6a047eb2f777ce1f7f7d93f54fb59378162d"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66654f1f55201e6dff3e8106040c9e93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8347,
        "upload_time": "2020-04-26T11:14:13",
        "upload_time_iso_8601": "2020-04-26T11:14:13.020058Z",
        "url": "https://files.pythonhosted.org/packages/49/14/53b537d0ca05889cdc534d4fbb8343c23eb83fab666120cc26acec4127b7/zelenium-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4e9fabdd4da5e6a7964007584056fc301dc2fb58eb1e19e83cf9a94bc2159a4",
          "md5": "c1cd91d9e3e354bb0b939a3b6387d135",
          "sha256": "42a8e239ec86b392f76b8fba0d52cf59bfea24b9ee1ad5661a6d2c0f70f1f1ba"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1cd91d9e3e354bb0b939a3b6387d135",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18830,
        "upload_time": "2020-04-26T11:38:35",
        "upload_time_iso_8601": "2020-04-26T11:38:35.611797Z",
        "url": "https://files.pythonhosted.org/packages/a4/e9/fabdd4da5e6a7964007584056fc301dc2fb58eb1e19e83cf9a94bc2159a4/zelenium-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a78b7ca56fc44d5be60be382e938481380d20aa3430e9059e2fd4b30b96171d",
          "md5": "ab3056e75f215e8beb7f9d01fcce80ea",
          "sha256": "b68784fb9cc25c0df1097cb6a939b3f9b7d3f94f92e40d34de21e0a7238b454b"
        },
        "downloads": -1,
        "filename": "zelenium-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ab3056e75f215e8beb7f9d01fcce80ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8353,
        "upload_time": "2020-04-26T11:38:36",
        "upload_time_iso_8601": "2020-04-26T11:38:36.658234Z",
        "url": "https://files.pythonhosted.org/packages/8a/78/b7ca56fc44d5be60be382e938481380d20aa3430e9059e2fd4b30b96171d/zelenium-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4e9fabdd4da5e6a7964007584056fc301dc2fb58eb1e19e83cf9a94bc2159a4",
        "md5": "c1cd91d9e3e354bb0b939a3b6387d135",
        "sha256": "42a8e239ec86b392f76b8fba0d52cf59bfea24b9ee1ad5661a6d2c0f70f1f1ba"
      },
      "downloads": -1,
      "filename": "zelenium-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c1cd91d9e3e354bb0b939a3b6387d135",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18830,
      "upload_time": "2020-04-26T11:38:35",
      "upload_time_iso_8601": "2020-04-26T11:38:35.611797Z",
      "url": "https://files.pythonhosted.org/packages/a4/e9/fabdd4da5e6a7964007584056fc301dc2fb58eb1e19e83cf9a94bc2159a4/zelenium-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a78b7ca56fc44d5be60be382e938481380d20aa3430e9059e2fd4b30b96171d",
        "md5": "ab3056e75f215e8beb7f9d01fcce80ea",
        "sha256": "b68784fb9cc25c0df1097cb6a939b3f9b7d3f94f92e40d34de21e0a7238b454b"
      },
      "downloads": -1,
      "filename": "zelenium-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ab3056e75f215e8beb7f9d01fcce80ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8353,
      "upload_time": "2020-04-26T11:38:36",
      "upload_time_iso_8601": "2020-04-26T11:38:36.658234Z",
      "url": "https://files.pythonhosted.org/packages/8a/78/b7ca56fc44d5be60be382e938481380d20aa3430e9059e2fd4b30b96171d/zelenium-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}