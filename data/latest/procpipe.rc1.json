{
  "info": {
    "author": "Christian Daudt",
    "author_email": "csd@fixthebug.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Python package](https://github.com/cdaudt/pipeline/workflows/Python%20package/badge.svg)\n\n# Simple data processing pipelines\n\nCreate simple data pipelines with sink/source modules that can \nprocess or drop elements. Each pipeline step receives a dictionary\nof metadata+data for the element, and it can add/remove fields\nto the element, or terminate processing of the element.\n\nAn example pipeline would be a generator (the **source**) which reads image files from a directory, followed by a pipe that resizes each image, followed by a pipe that saves each image. \n# Stages\n\nEach stage can contain a **source**, a **sink**, or both. Sources generate elements, while sinks process and optionally drop elements from the pipeline.\n\n## Source Stage\n\nA source stage is defined by creating a subclass of 'Pipeline' class with a 'source' function at a minimum, as the example below.\n\n```python\nclass ArraySource(pipeline.Pipeline):\n    def __init__(self, sink, arr):\n        self.arr = arr\n        super(ArraySource, self).__init__(sink)\n\n    def source(self):\n        for i in range(len(self.arr)):\n\n            element = {\n                \"word_id\": i,\n                \"word\": self.arr[i]\n            }\n\n            yield (element)\n```\n## Sink Stage\nA sink stage is define by creating a subclass of 'Pipeline' class with a sink function at a minimum, as in the example below\n```python\nclass DropSmallWord(pipeline.Pipeline):\n    def __init__(self, sink, min):\n        self.min = min\n        super(DropSmallWord, self).__init__(sink)\n\n    def sink(self, element):\n        if len(element['word']) < self.min:\n            return None\n        else:\n            return element\n\n```\n\n# Elements\n\nElements are the units of data passed through the processing pipeline. An element is a dictionary that can contain any number of fields. Both data and meta-data about the data unit can be contained in the element.\n\n# Creating the Pipeline\nIn order to create a pipeline, the stages are created and linked to each other, starting from the final stage and working back to the source, as follows:\n```python\n    pw = PrintWord(None) # Save image\n    ds = DropSmallWord(pw, 5)\n    a = ArraySource(ds, words)\n```\nAs can be seen, the final stage is initiated with ```None``` as sink, while all other stages receive their subsequent stage as sink\n\n# Examples\nLook in the examples subdirectory for these examples\n   * feeder.py: Feeds an array of words into a filter stage that drops small words, followed by a stage that prints the remaining words\n   * resizer.py: Reads image files from the command-line, passes them through a resizer stage, followed by an image-save stage.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cdaudt/pipeline",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "procpipe",
    "package_url": "https://pypi.org/project/procpipe/",
    "platform": "",
    "project_url": "https://pypi.org/project/procpipe/",
    "project_urls": {
      "Homepage": "https://github.com/cdaudt/pipeline"
    },
    "release_url": "https://pypi.org/project/procpipe/2020.10/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple data processing pipelines",
    "version": "2020.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8436739,
  "releases": {
    "2020.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d644f6193d15fcb01d10bae9cc45a1bc4df7ee5aec65ca13a3bcae5587823e7e",
          "md5": "d0c0f283cfa51cdb3ed9db98c2703c63",
          "sha256": "761d2e12332f4293365d8ac383fe41a34794eb712e81dda1071dcc7dd8d3f3ca"
        },
        "downloads": -1,
        "filename": "procpipe-2020.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0c0f283cfa51cdb3ed9db98c2703c63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3721,
        "upload_time": "2020-10-17T21:39:01",
        "upload_time_iso_8601": "2020-10-17T21:39:01.007118Z",
        "url": "https://files.pythonhosted.org/packages/d6/44/f6193d15fcb01d10bae9cc45a1bc4df7ee5aec65ca13a3bcae5587823e7e/procpipe-2020.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f86a3c35dab82830eafefedd2739957de2c140ff1b2a3c6709044b9c35bc4d49",
          "md5": "cc419c3dbbb6392db9b1f27e82345fb4",
          "sha256": "919b34a33b421bbcdac196fb3049d40564ca9a4d9ec4c9be299ad1d8d3939c2d"
        },
        "downloads": -1,
        "filename": "procpipe-2020.10.tar.gz",
        "has_sig": false,
        "md5_digest": "cc419c3dbbb6392db9b1f27e82345fb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2825,
        "upload_time": "2020-10-17T21:39:03",
        "upload_time_iso_8601": "2020-10-17T21:39:03.293462Z",
        "url": "https://files.pythonhosted.org/packages/f8/6a/3c35dab82830eafefedd2739957de2c140ff1b2a3c6709044b9c35bc4d49/procpipe-2020.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d644f6193d15fcb01d10bae9cc45a1bc4df7ee5aec65ca13a3bcae5587823e7e",
        "md5": "d0c0f283cfa51cdb3ed9db98c2703c63",
        "sha256": "761d2e12332f4293365d8ac383fe41a34794eb712e81dda1071dcc7dd8d3f3ca"
      },
      "downloads": -1,
      "filename": "procpipe-2020.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0c0f283cfa51cdb3ed9db98c2703c63",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3721,
      "upload_time": "2020-10-17T21:39:01",
      "upload_time_iso_8601": "2020-10-17T21:39:01.007118Z",
      "url": "https://files.pythonhosted.org/packages/d6/44/f6193d15fcb01d10bae9cc45a1bc4df7ee5aec65ca13a3bcae5587823e7e/procpipe-2020.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f86a3c35dab82830eafefedd2739957de2c140ff1b2a3c6709044b9c35bc4d49",
        "md5": "cc419c3dbbb6392db9b1f27e82345fb4",
        "sha256": "919b34a33b421bbcdac196fb3049d40564ca9a4d9ec4c9be299ad1d8d3939c2d"
      },
      "downloads": -1,
      "filename": "procpipe-2020.10.tar.gz",
      "has_sig": false,
      "md5_digest": "cc419c3dbbb6392db9b1f27e82345fb4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2825,
      "upload_time": "2020-10-17T21:39:03",
      "upload_time_iso_8601": "2020-10-17T21:39:03.293462Z",
      "url": "https://files.pythonhosted.org/packages/f8/6a/3c35dab82830eafefedd2739957de2c140ff1b2a3c6709044b9c35bc4d49/procpipe-2020.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}