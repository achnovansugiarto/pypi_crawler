{
  "info": {
    "author": "Alvaro Santos Laserna Lopez",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "# Py-TestUI Framework\n\n# Installation\n\nPy-TestUI can be installed via `pip`\n\n```bash\npip3 install git+https://github.com/testdevlab/Py-TestUI@v1.0.6\n```\n\nOr if you prefer `requirements.txt`, you can add the following dependency\n\n```\ngit+https://github.com/testdevlab/Py-TestUI@v1.0.6\n```\n\n# Appium driver\n\nYou can create `TestUIDriver` for Appium automation like so:\n\n```py\ndriver: TestUIDriver = (\n    NewDriver()\n    .set_app_path(\"app.apk\")\n    .set_app_package_activity(\"com.package.package\", \"com.activity.Activity\")\n    .set_logger(\"pytest\")\n    .set_appium_driver()\n)\n```\n\nBy default it takes the first connected device to your machine, but you can\nspecify device by calling `.set_udid(\"udid\")` before the `.set_appium_driver()`\ncall.\n\n# Selenium Desktop driver\n\nPy-TestUI supports the following browser drivers:\n\n- Google Chrome (`'chrome'`)\n- Mozilla Firefox (`'firefox'`)\n- Safari (`'safari'`)\n- Microsoft Edge (`'edge'`)\n- Microsoft Internet Explorer (`'ie'`)\n- Opera (`'opera'`)\n\n> All these drivers must be installed and added to you `$PATH` variable\n\n> Mozilla Firefox is downloaded automatically and added to `$PATH` but\n> double-check that you have installed\n> [Python certificates if you are using macOS](https://stackoverflow.com/a/53310545/13179904)\n\nYou can create `TestUIDriver` for Selenium Desktop automation like so\n\n```python\ndriver: TestUIDriver = (\n    NewDriver()\n    .set_logger(\"pytest\")\n    .set_soft_assert(True)\n    .set_selenium_driver()\n)\n```\n\n# Configuration\n\nPy-TestUI allows configuring the following default global parameters\n\n- `screenshot_path: str` - sets default path where screenshot will be saved\n  (default: project root directory).\n- `save_screenshot_on_fail: bool` - sets whether save screenshot on failure\n  (default: `True`)\n- `save_full_stacktrace: bool` - sets whether save full stacktrace for error\n  (default: `True`)\n\n## Configuration via `NewDriver()`\n\nConfiguration parameters can be set while creating a new `TestUIDriver` object\nlike this\n\n```py\ndriver: TestUIDriver = (\n    NewDriver()\n    .set_screenshot_path(\"path/to/default/screenshot/location\")\n    .set_save_screenshot_on_fail(False)\n    .set_save_full_stacktrace(False)\n    .set_selenium_driver()\n)\n```\n\n## Configuration via `driver.configuration`\n\nAnother possible way to change default global parameters is to use\n`configuration` attribute located under `driver: TestUIDriver` object. These\nparameters can be changed like this at any point of the execution:\n\n```py\ndriver.configuration.screenshot_path = \"path/to/default/screenshot/location\"\ndriver.configuration.save_screenshot_on_fail = False\ndriver.configuration.save_full_stacktrace = False\n```\n\n# Scripts\n\nThe automation infrastructure implements the Page Object Model (POM) pattern.\nThis pattern calls for application elements and methods specific to a given\nscreen to be included in the same Class. This improves maintainability as well\nas usability since any changes to elements in the application would only have to\nbe edited in one place. This is an example:\n\n```py\n    class LoggedInScreen:\n        #  Page Element Definitions\n        def __init__(self, driver: TestUIDriver):\n            self.driver = driver\n            # Settings drawer\n            self.__settings_button = e(driver, \"accessibility\", \"Settings\")\n            self.__edit_profile = e(driver, \"id\", \"textview_settings\")\n            self.__log_out_button = e(driver, \"id\", \"textview_settings_drawer\")\n            .\n            .\n            .\n\n       def click_and_check_settings(self):\n            self.__settings_button.wait_until_visible().click()\n            self.__log_out_button.wait_until_visible()\n            self.__edit_profile.wait_until_visible()\n            .\n            .\n            .\n```\n\nThe test case scripts are in a different class. The scripts import the\nrespective screen package along with additional packages such as PyTest. Each\nclass has any amount of tests. All test methods start with the word \"test\\_\"\nsuch as:\n\n```py\n    def test_add_existing_contact(self, appium_driver):\n        from tests.tests_signup import TestSignUp\n        username = TestSignUp().test_sign_up_flow(appium_driver)\n        logged_in_page = LoggedInScreen(appium_driver)\n        logged_in_page.log_out()\n        .\n        .\n        .\n```\n\n### Element Locators Methods:\n\nThe class \"Elements\" implements default locator methods that are part of the\nAppium WedDriver package. It adds additional functionality to wait for a\nconfigurable amount of time for an element to appear and provides improved error\nlogging. It also implements methods for scrolling and swiping. Example of\nlocators:\n\n```py\n    def e(driver, locator_type, locator):\n        \"\"\"locator types: id, css, className, name, xpath,\n        accessibility, uiautomator, classChain, predicate\"\"\"\n\n        return Elements(driver, locator_type, locator)\n```\n\nOnce you create the definition of the element with the static method e(driver,\nl_type, locator) you can start using a series of action/assertion methods that\nare built-in within Elements class.\n\nAction methods are the ones meant to do something over the UI. In case they\ncannot be performed, an error will be raised that will show all the information\nneeded for debugging:\n\n```py\n    element = e(driver, 'id', 'some_id')\n    element.click()\n    element.send_keys('send some text to input')\n    element.swipe(end_y=end_y, end_x=end_x)\n    element.press_hold_for(milliseconds)\n    element.click_by_coordinates(x, y)\n    # swipes from element to the element 2\n    element.swipe_until_text(text='some_text', el=e(driver, 'id', 'id_2'))\n```\n\nAssertion methods are the ones meant to check whether the UI is presented with\nthe correct elements and values:\n\n```py\n    element = e(driver, 'id', 'some_id')\n    element.wait_until_visible(seconds=10)\n    element.wait_until_attribute(attr='text', text='something', seconds=10)\n    element.wait_until_contains_attribute(attr='text', text='something')\n    element.wait_until_contains_sensitive_attribute(\n        attr='text', text='something'\n    )\n    # Checks if visible along the set amount of time\n    element.visible_for(seconds=1)\n    # Takes screenshot of the element and compares with the provided image\n    element.find_image_match('relative/path/image.png', threshold)\n```\n\nThis methods will rise a ElementException in case the conditions are not met.\n\nThere is one last method to check whether an element is visible or not which\nwill not rise an error but return a boolean value which is element.is_visible().\n\nSometimes one locator identifies more that one single element, in which case you\ncan choose among them by using element.get(index=0).\n\n### Collection Methods:\n\nCollections are defined as a list of elements, and you can perform different\nkind of actions over them, which will improve in performance or functionality.\nSuch methods include finding element within the collection by visibility, or\nchecking their visibility in parallel to improve performance or to check page\nload time:\n\n```py\n    collection = ee(e(driver, 'id', 'some_id'), e(driver, 'id', 'some_id_2'))\n    collection.find_visible(seconds) # Returns the first found visible element\n    collection.wait_until_all_visible(seconds)\n    collection.wait_until_attribute([attr_1, attr_2],[value_1, value_2])\n    collection.get(0) # Returns first element\n```\n\n### Image Recognition:\n\nIn some cases it is useful to check or assert whether a specific element or view\nis present during the automation, and for this reason, Py-TestUI includes OpenCV\nas one of the dependencies. You can use directly the methods from OpenCV\ndirectly, but you have also built-in methods from testUI:\n\n```py\n    # First field is the image path with which you want to compare the device \n    # screenshot.\n    # Second field is the Threshold or how much alike the images should be \n    # (0.75-1 is considere high)\n    # Third is if you want to rise an exception when the image is not found\n    # The forth is if you want to keep the image of the matched region, which \n    # will be marked with a rectangle\n    testui_driver.find_image_match(\n        'relative/path/image.png', 0.95, True, 'path/matched/image.png'\n    )\n\n    testui_driver.click_by_image('relative/path/image.png', threshold)\n```\n\n![Image Recognition](resources/image_reco.png)\n\nIf you want to use the compare method by using your own two images, you can use\nthe following methods:\n\n```\n    ImageRecognition(original, comparison, threshold, device_name).compare()\n    ImageRecognition(original, comparison, threshold, device_name).draw_image_match()\n    ImageRecognition(original, comparison, threshold, device_name).image_original_size()\n    ImageRecognition(original, comparison, threshold, device_name).image_comparison_size()\n    ImageRecognition(original, comparison, threshold, device_name).get_middle_point()\n```\n\nNote: the image that you use for comparison can be a small portion of the\nscreenshot/bigger one\n\n### Drivers:\n\nThe testui_driver.py declares the TestUIDriver class which implements methods\nfrom the Elements class. It also implements methods such as \"touch_actions\"\ninherited from Selenium WebDriver TouchActions class.\n\nThe appium_driver.py declares the NewDriver class which implements TestUIDriver.\nIt also implements the desired capabilities such as the location of the .apk.,\nthe Chrome or iOS drivers, and others such as the Android version.\n\nNewDriver class is meant to generate appium or selenium drivers in a simple way,\nusing default values when not specified, and starting appium server or\nretrieving chrome drivers automatically if necessary. An example of minimum code\nto start an appium session for Android app:\n\n```py\n    driver = NewDriver().set_app_path('app.apk') \\\n        .set_app_package_activity('package', 'activity') \\\n        .set_appium_driver()\n```\n\nAndroid chrome browser:\n\n```py\n    driver = NewDriver().set_chrome_driver('78.0.3904.70') \\\n        .set_appium_driver()\n```\n\nIOS app:\n\n```py\n    driver = NewDriver().set_platform('iOS').set_udid('udid') \\\n        .set_appium_driver()\n```\n\nChrome desktop browser:\n\n```py\n    driver = NewDriver() \\\n        .set_selenium_driver()\n```\n\nBefore setting the driver you can choose among a different stacks of class\nmethods to add different capabilities or functionality out-of-the-box from the\nframework such as \"soft asserts\" or \"log types\". Soft asserts make the\nautomation run even when element assertions find errors, but in the end of said\nautomation you can include the following line to rise the errors found:\n\n```py\n    driver = NewDriver() \\\n        .soft_assert(true).set_selenium_driver()\n    e(driver, 'id', 'fake_id').wait_until_visible(5)  # time in seconds\n    driver.raise_errors()  # raise the error found with previous command\n```\n\nThe driver creation and stop should be located under pytest fixtures, which\nworks as before/after hooks. This fixtures are located under conftest.py file\nand you can call those functions by passing them as variables in the test cases.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/testdevlab/Py-TestUI",
    "keywords": "Py-TestUI,mobile automation,browser automation",
    "license": "Apache LICENSE 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-testui",
    "package_url": "https://pypi.org/project/python-testui/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-testui/",
    "project_urls": {
      "Homepage": "https://github.com/testdevlab/Py-TestUI",
      "Source": "https://github.com/testdevlab/Py-TestUI",
      "TestDevLab": "https://www.testdevlab.com/",
      "Tracker": "https://github.com/testdevlab/Py-TestUI/issues"
    },
    "release_url": "https://pypi.org/project/python-testui/1.1.1/",
    "requires_dist": [
      "pytest (==6.2.5)",
      "Appium-Python-Client (==2.6.0)",
      "selenium (==4.1.0)",
      "opencv-python (==4.6.0.66)",
      "geckodriver-autoinstaller (==0.1.0)",
      "value (==0.1.0)",
      "pytest-xdist (==2.5.0)",
      "pytest-testrail (==2.9.0)",
      "pure-python-adb (==0.3.0.dev0)",
      "webdriver-manager (==3.6.3)",
      "numpy (==1.22.0)",
      "imutils (==0.5.4)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Browser and Mobile automation framework",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15163154,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d0d890158290004b14b957e809d4592aadfad0c418c32951f53d805c3c2f4de",
          "md5": "fe4455ef77ac528f1f7a136005dc829e",
          "sha256": "e3328e795dca5b252fc08ec8eca3d34a999d37c97ee4c61995fc2397d0d1f8f1"
        },
        "downloads": -1,
        "filename": "python_testui-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe4455ef77ac528f1f7a136005dc829e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 35477,
        "upload_time": "2022-09-21T07:00:29",
        "upload_time_iso_8601": "2022-09-21T07:00:29.232391Z",
        "url": "https://files.pythonhosted.org/packages/3d/0d/890158290004b14b957e809d4592aadfad0c418c32951f53d805c3c2f4de/python_testui-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c122c146d896d574242bf65e9a9d15a7593d8c12ecd88bbbd62079d012a56a88",
          "md5": "905f83e4cb636c2e4c5c101886b6de74",
          "sha256": "590cdd23f1fa3ad2f9189851eb01518d39b26cba8cbaaa160c429f62434c52db"
        },
        "downloads": -1,
        "filename": "python-testui-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "905f83e4cb636c2e4c5c101886b6de74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 29045,
        "upload_time": "2022-09-21T07:00:31",
        "upload_time_iso_8601": "2022-09-21T07:00:31.384597Z",
        "url": "https://files.pythonhosted.org/packages/c1/22/c146d896d574242bf65e9a9d15a7593d8c12ecd88bbbd62079d012a56a88/python-testui-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d0d890158290004b14b957e809d4592aadfad0c418c32951f53d805c3c2f4de",
        "md5": "fe4455ef77ac528f1f7a136005dc829e",
        "sha256": "e3328e795dca5b252fc08ec8eca3d34a999d37c97ee4c61995fc2397d0d1f8f1"
      },
      "downloads": -1,
      "filename": "python_testui-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe4455ef77ac528f1f7a136005dc829e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 35477,
      "upload_time": "2022-09-21T07:00:29",
      "upload_time_iso_8601": "2022-09-21T07:00:29.232391Z",
      "url": "https://files.pythonhosted.org/packages/3d/0d/890158290004b14b957e809d4592aadfad0c418c32951f53d805c3c2f4de/python_testui-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c122c146d896d574242bf65e9a9d15a7593d8c12ecd88bbbd62079d012a56a88",
        "md5": "905f83e4cb636c2e4c5c101886b6de74",
        "sha256": "590cdd23f1fa3ad2f9189851eb01518d39b26cba8cbaaa160c429f62434c52db"
      },
      "downloads": -1,
      "filename": "python-testui-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "905f83e4cb636c2e4c5c101886b6de74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 29045,
      "upload_time": "2022-09-21T07:00:31",
      "upload_time_iso_8601": "2022-09-21T07:00:31.384597Z",
      "url": "https://files.pythonhosted.org/packages/c1/22/c146d896d574242bf65e9a9d15a7593d8c12ecd88bbbd62079d012a56a88/python-testui-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}