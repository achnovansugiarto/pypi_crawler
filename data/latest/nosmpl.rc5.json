{
  "info": {
    "author": "Lucas Jin",
    "author_email": "11@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# NoSMPL\r\n\r\nAn enchanced and accelerated SMPL operation which commonly used in 3D human mesh generation. It takes a poses, shapes, cam_trans as inputs, outputs a high-dimensional 3D mesh verts.\r\n\r\nHowever, SMPL codes and models are so messy out there, they have a lot of codes do calculation, some of them can not be easily deployed or accerlarated. So we have `nosmpl` here, it provides:\r\n\r\n- build on smplx, but with onnx support;\r\n- can be inference via onnx;\r\n- we also demantrated some using scenarios infer with `nosmpl` but without any model, only onnx.\r\n\r\nThis packages provides:\r\n\r\n- [ ] Highly optimized pytorch acceleration with FP16 infer enabled;\r\n- [x] Supported ONNX export and infer via ort, so that it might able used into TensorRT or OpenVINO on cpu;\r\n- [x] Support STAR, next generation of SMPL.\r\n- [x] Provide commonly used geoemtry built-in support without torchgeometry or kornia.\r\n\r\nSTAR model download from: https://star.is.tue.mpg.de/downloads\r\n\r\n## Updates\r\n\r\n- **`2023.02.28`**: An SMPL-H ONNX model released! Now You can using ONNXRuntime to get a 3D SMPL Mesh from a pose!\r\n- **`2022.05.16`**: Now added `human_prior` inside `nosmpl`, you don't need install that lib anymore, or install torchgeometry either:\r\n  ```python\r\n  from nosmpl.vpose.tools.model_loader import load_vposer\r\n  self.vposer, _ = load_vposer(VPOSER_PATH, vp_model=\"snapshot\")\r\n  ```\r\n  then you can load vpose to use.\r\n- **`2022.05.10`**: Add BHV reader, you can now read and write bvh file:\r\n\r\n  ```python\r\n  from nosmpl.parsers import bvh_io\r\n  import sys\r\n\r\n\r\n  animation = bvh_io.load(sys.argv[1])\r\n  print(animation.names)\r\n  print(animation.frametime)\r\n  print(animation.parent)\r\n  print(animation.offsets)\r\n  print(animation.shape)\r\n  ```\r\n\r\n- **`2022.05.07`**: Added a visualization for Human36m GT, you can using like this to visualize h36m data now:\r\n\r\n  ```\r\n  import nosmpl.datasets.h36m_data_utils as data_utils\r\n  from nosmpl.datasets.h36m_vis import h36m_vis_on_gt_file\r\n  import sys\r\n\r\n  if __name__ == \"__main__\":\r\n      h36m_vis_on_gt_file(sys.argv[1])\r\n  ```\r\n\r\n  Just send a h36m txt annotation file, and you can see the animation result. Also, you can using `from nosmpl.datasets.h36m_vis import h36m_load_gt_3d_data` to load 3d data in 3D space.\r\n\r\n- **`2022.03.03`**: I add some `box_transform` code into `nosmpl`, no we can get box_scale info when recover cropped img predicted 3d vertices back to original image. This is helpful when you project 3d vertices back to original image when using `realrender`.\r\n  the usage like:\r\n  ```\r\n  from nosmpl.box_trans import get_box_scale_info, convert_vertices_to_ori_img\r\n  box_scale_o2n, box_topleft, _ = get_box_scale_info(img, bboxes)\r\n  frame_verts = convert_vertices_to_ori_img(\r\n            frame_verts, s, t, box_scale_o2n, box_topleft\r\n        )\r\n  ```\r\n- **`2022.03.05`**: More to go.\r\n\r\n## Features\r\n\r\nThe most exciting feature in `nosmpl` is **you don't need download any SMPL files anymore**, you just need to download my exported `SMPL.onnx` or `SMPLH.onnx`, then you can using numpy to generate a Mesh!!!\r\n\r\n`nosmpl` also provided a script to visualize it~!\r\n\r\n```python\r\n\r\nimport onnxruntime as rt\r\nimport torch\r\nimport numpy as np\r\nfrom nosmpl.vis.vis_o3d import vis_mesh_o3d\r\n\r\n\r\ndef gen():\r\n    sess = rt.InferenceSession(\"smplh_sim.onnx\")\r\n\r\n    for i in range(5):\r\n        body_pose = (\r\n            torch.randn([1, 63], dtype=torch.float32).clamp(0, 0.4).cpu().numpy()\r\n        )\r\n        left_hand_pose = (\r\n            torch.randn([1, 6], dtype=torch.float32).clamp(0, 0.4).cpu().numpy()\r\n        )\r\n        right_hand_pose = (\r\n            torch.randn([1, 6], dtype=torch.float32).clamp(0, 0.4).cpu().numpy()\r\n        )\r\n\r\n        outputs = sess.run(\r\n            None, {\"body\": body_pose, \"lhand\": left_hand_pose, \"rhand\": right_hand_pose}\r\n        )\r\n\r\n        vertices, joints, faces = outputs\r\n        vertices = vertices[0].squeeze()\r\n        joints = joints[0].squeeze()\r\n\r\n        faces = faces.astype(np.int32)\r\n        vis_mesh_o3d(vertices, faces)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    gen()\r\n```\r\n\r\nYou will see a mesh with your pose, generated:\r\n\r\n![](https://s1.ax1x.com/2023/03/01/ppim6EV.png)\r\n\r\nAs you can see, we are using a single ONNX model, by some randome poses, you can generated a visualized mesh.\r\n\r\n**this is useful when you wanna test your predict pose is right or not!**\r\n\r\nIf you using this in your project, your code will be decrease 190%, if it helps, consider cite `nosmpl` in your project!\r\n\r\nMore details you can join our Metaverse Wechat group for discussion! QQ join link:\r\n\r\n## Examples\r\n\r\nan example to call `nosmlp`:\r\n\r\n```python\r\nfrom nosmpl.smpl import SMPL\r\n\r\nsmpl = SMPL(smplModelPath, extra_regressor='extra_data/body_module/data_from_spin/J_regressor_extra.npy').to(device)\r\n\r\n# get your betas and rotmat\r\npred_vertices, pred_joints_3d, faces = smpl(\r\n                    pred_betas, pred_rotmat\r\n                )\r\n\r\n# note that we returned faces in SMPL model, you can use for visualization\r\n# joints3d will add extra joints if you have extra_regressor like in SPIN or VIBE\r\n\r\n```\r\n\r\nThe output shape of onnx model like:\r\n\r\n```\r\n                    basicModel_neutral_lbs_10_207_0_v1.0.0.onnx Detail\r\n╭───────────────┬────────────────────────────┬──────────────────────────┬────────────────╮\r\n│ Name          │ Shape                      │ Input/Output             │ Dtype          │\r\n├───────────────┼────────────────────────────┼──────────────────────────┼────────────────┤\r\n│ 0             │ [1, 10]                    │ input                    │ float32        │\r\n│ 1             │ [1, 24, 3, 3]              │ input                    │ float32        │\r\n│ verts         │ [-1, -1, -1]               │ output                   │ float32        │\r\n│ joints        │ [-1, -1, -1]               │ output                   │ float32        │\r\n│ faces         │ [13776, 3]                 │ output                   │ int32          │\r\n╰───────────────┴────────────────────────────┴──────────────────────────┴────────────────╯\r\n                             Table generated by onnxexplorer\r\n```\r\n\r\n## Notes\r\n\r\n1. About quaternion\r\n\r\nthe `aa2quat` function, will converts quaternion in `wxyz` as default order. This is **different** from scipy. It's consistent as mostly 3d software such as Blender or UE.\r\n\r\n## Results\r\n\r\nSome pipelines build with `nosmpl` support.\r\n\r\n![](https://s4.ax1x.com/2022/02/20/HLGD00.gif)\r\n\r\n## Copyrights\r\n\r\nCopyrights belongs to Copyright (C) 2020 Max-Planck-Gesellschaft zur Förderung der Wissenschaften e.V. (MPG) and Lucas Jin\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jinfagang/nosmpl",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nosmpl",
    "package_url": "https://pypi.org/project/nosmpl/",
    "platform": null,
    "project_url": "https://pypi.org/project/nosmpl/",
    "project_urls": {
      "Homepage": "https://github.com/jinfagang/nosmpl"
    },
    "release_url": "https://pypi.org/project/nosmpl/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "NoSMPL: Optimized common used SMPL operation.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17106431,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6ec2737649c575c70cc55df7ef7d09ba1467d59050ae3f34ad796881cf41d17",
          "md5": "76b6955f793fb6b5997c5fafc81327ef",
          "sha256": "4e61bdccff12547ddf3ae35aa99bb2370295482dd8de272f308b9ad73fb8fc3f"
        },
        "downloads": -1,
        "filename": "nosmpl-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "76b6955f793fb6b5997c5fafc81327ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14395,
        "upload_time": "2022-03-03T13:20:46",
        "upload_time_iso_8601": "2022-03-03T13:20:46.843494Z",
        "url": "https://files.pythonhosted.org/packages/f6/ec/2737649c575c70cc55df7ef7d09ba1467d59050ae3f34ad796881cf41d17/nosmpl-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f42bc7bba56d1043a43055aade710c9a12567e847561d5b43825ae8cfe77ca2d",
          "md5": "1ba3004b147bd80ffffe2f3c57cc761d",
          "sha256": "b1d886813cd1402450ac12d97125640fba8c81ca77889c91de3f0e678177156b"
        },
        "downloads": -1,
        "filename": "nosmpl-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1ba3004b147bd80ffffe2f3c57cc761d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26700,
        "upload_time": "2022-05-16T03:24:57",
        "upload_time_iso_8601": "2022-05-16T03:24:57.328649Z",
        "url": "https://files.pythonhosted.org/packages/f4/2b/c7bba56d1043a43055aade710c9a12567e847561d5b43825ae8cfe77ca2d/nosmpl-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb93b3881cfbefd1e0d84e0b78470039b4cc652d4005535a4e838e7e1acab493",
          "md5": "e36ba8fc291534419c7aef16dfb645cf",
          "sha256": "d6e46cdfe4bc8c458fecf1f505c41b518a171ac0894ba54e53654eb628e0272b"
        },
        "downloads": -1,
        "filename": "nosmpl-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e36ba8fc291534419c7aef16dfb645cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39340,
        "upload_time": "2022-08-13T02:44:45",
        "upload_time_iso_8601": "2022-08-13T02:44:45.602031Z",
        "url": "https://files.pythonhosted.org/packages/eb/93/b3881cfbefd1e0d84e0b78470039b4cc652d4005535a4e838e7e1acab493/nosmpl-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1feeca5b730f34abcbe0be1d4fd4b012e943e818ba4e67d49c9cc92ef4eddf47",
          "md5": "a00670cc1a90b1cc0f3f8cc0c841a5d0",
          "sha256": "602abe0a2036c817e7cc68382b14a9bf5ce30f8df909d562950112708a2d09f6"
        },
        "downloads": -1,
        "filename": "nosmpl-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a00670cc1a90b1cc0f3f8cc0c841a5d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45558,
        "upload_time": "2022-09-01T08:20:35",
        "upload_time_iso_8601": "2022-09-01T08:20:35.565552Z",
        "url": "https://files.pythonhosted.org/packages/1f/ee/ca5b730f34abcbe0be1d4fd4b012e943e818ba4e67d49c9cc92ef4eddf47/nosmpl-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "946abf13ec55352e77c520b224240af1f88066d47b1fee8a0d4d5ba2e2bc4e3c",
          "md5": "8ada943d43758b21fab5acead87f693f",
          "sha256": "327c0c1cdf48f01039369c55b99e8e140b98093ac03d75c83a1992e9df0c30de"
        },
        "downloads": -1,
        "filename": "nosmpl-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ada943d43758b21fab5acead87f693f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65433,
        "upload_time": "2023-03-01T03:40:33",
        "upload_time_iso_8601": "2023-03-01T03:40:33.113102Z",
        "url": "https://files.pythonhosted.org/packages/94/6a/bf13ec55352e77c520b224240af1f88066d47b1fee8a0d4d5ba2e2bc4e3c/nosmpl-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "946abf13ec55352e77c520b224240af1f88066d47b1fee8a0d4d5ba2e2bc4e3c",
        "md5": "8ada943d43758b21fab5acead87f693f",
        "sha256": "327c0c1cdf48f01039369c55b99e8e140b98093ac03d75c83a1992e9df0c30de"
      },
      "downloads": -1,
      "filename": "nosmpl-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8ada943d43758b21fab5acead87f693f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 65433,
      "upload_time": "2023-03-01T03:40:33",
      "upload_time_iso_8601": "2023-03-01T03:40:33.113102Z",
      "url": "https://files.pythonhosted.org/packages/94/6a/bf13ec55352e77c520b224240af1f88066d47b1fee8a0d4d5ba2e2bc4e3c/nosmpl-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}