{
  "info": {
    "author": "cst",
    "author_email": "nicolae.natrapeiu@cyber-solutions.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "## Cst-Micro-Chassis\n\n---\n\nCst-Micro-Chassis is a [chassis framework](https://microservices.io/patterns/microservice-chassis.html) for creating REST-ful APIs based on Flask and Flask-Restful. \n\nThe main topics covered are: \n\n 1. A uniform API response format\n 2. API pagination\n 3. Logging\n 4. Health check\n\n---\n#### Installation\n```shell\npip install cst-micro-chassis\n```\n\n---\n#### Usage\n\n\nImport and initialize with a flask app (as you would usually do with any other flask extension)\n\n```python\nfrom flask import Flask\nfrom cst_micro_chassis import CstMicroChassis\n\napp = Flask('my-first-cst-app')\nCstMicroChassis.init_app(app)\n```\n\ndoing this will initialize the CstMicroChassis core class, setting up the default logging format across your app together with a ready-to-use health check endpoint.\n\nThe default url route for the health check endpoint is `/status`, so doing a `curl localhost/status ` should return \n```json\n{\n  \"name\": \"My-First-Cst-App\",\n  \"version\": \"N/A\"\n}\n```\nwith `Content-Type: application/json`\n\nSetting a custom name and version for the application can be done by setting the `CST_PROJECT_NAME` and `CST_PROJECT_VERSION`, either as environment variables or flask config variables. \n\nYou may also want to set a custom url route instead of the standard `/status` ; this can be done setting `CST_HEALTH_CHECK_ENDPOINT=/my-custom-status` environment or flask variable.\n\nIf the flask application also uses Flask-SQLAlchemy + migrate and alembic, you can also provide the Flask-SQLAlchemy instance as an optional argument to the chassis init_app method like this\n\n```python\n# import Flask, SQLAlchemy, Migrate, CstMicroChassis \napp = Flask('my-first-cst-app-with-db')\ndb = SQLAlchemy()\nmigrate = Migrate()\ndb.init_app()\nmigrate.init_app(app, db)\n\nCstMicroChassis.init_app(app, db)\n\n```\ndoing now a `curl localhost/status ` should return also the latest migration from the `alembic_version` database table:\n\n```json\n{\n  \"name\": \"My-First-Cst-App-With-DB\",\n  \"version\": \"N/A\",\n  \"last_migration\": \"ef123ae24f13\"\n}\n```\n\n##### LOGGING\n\nAs mentioned above, a custom logging configuration was set for your flask application, so when using the logging module: \n```python\nimport logging \nlogger = logging.getLogger(__name__)\nlogger.warning('Hello CST')\n```\n\nthe stdout output will be:\n\n    2021-02-22 16:42:54,923 [WARNING][No operation_id] myapp: Hello CST\nmatching the format  \n\n    <datetime> [<log_level>][<operation_id>] <module_name>: <message>\n\nBy default, all messages with a severity of `INFO` or above (`WARNING`, `ERROR` or `CRITICAL`) will reach stdout. In order to reduce the verbosity of the application, one can set `CST_STREAM_LOG_LEVEL` environment variable to a higher severity level i.e. setting `CST_STREAM_LOG_LEVEL=ERROR` will only display `ERROR` and `CRITICAL` log records.\n\n\nProbably the less obvious section in the logger format above is the `operation_id` part. This is a custom logging attribute bound to the flask application context, more details about it in the RESOURCES section below.\n\n\n##### RESOURCES \n\nApiResource is an enhanced version of [Flask-RESTful's resource](https://flask-restful.readthedocs.io/en/latest/quickstart.html#resourceful-routing) building block.\nOne would use it in the same manner as a Flask-RESTful resource: \n```python\nimport logging\nfrom flask import Flask\nfrom flask_restful import Api\n\nfrom cst_micro_chassis import CstMicroChassis\nfrom cst_micro_chassis.resources import ApiResource\n\napp = Flask('new-app')\nCstMicroChassis().init_app(app)\nlogger = logging.getLogger(__name__)\n\napi = Api(app)\n\n\nclass MySimpleResource(ApiResource):\n    def get(self, simple_id):\n        logger.info(f'I received a GET request for {simple_id}')\n        return f'It works for {simple_id}'\n\n\napi.add_resource(MySimpleResource, '/simple/<string:simple_id>')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n\nmaking a get request to this _\"/simple\"_ endpoint, will return :\n```shell\ncurl localhost:5000/simple/123\n{\n    \"meta\": {\n        \"operation_id\": \"79bfcecd-55ba-4f97-b175-b104962cafa2\"\n    },\n    \"data\": \"It works for 123\"\n}\n```\nThe most obvious difference (compared to a standard response expected from a flask-RESTful resource get method) is the response body, which has two main sections: `\"meta\"` and `\"data\"`. \n\n - The `\"data\"` section contains the actual result of the get operation, which in our naive example, is adding the \"It works for \" prefix to the simple_id argument which has a value of 123.\n - The `\"meta\"` section contains by default an `operation_id`, which is a unique uuid4 identifier assigned to each http request. Also looking at flask servers logs, one can notice that between the log level `[INFO]` and the application name \"new-app\", also the logging entry's operation_id section was populated with the same value of `79bfcecd-55ba-4f97-b175-b104962cafa2`\n\n    ```shell\n    2021-01-01 11:35:01,419 [INFO][79bfcecd-55ba-4f97-b175-b104962cafa2] new-app: I received a GET request for 123\n    ```\n\n    This unique identifier eases debugging by allowing log grouping, aggregation and overall a better tracking on each operation made via the API endpoints.\n\n - More metadata can be added to this `meta` section, like: filtering, sorting or pagination params - as it will be detailed in the following section\n\n\n##### PAGINATION\n\nAssuming the application uses SQLAlchemy ORM, one can use the cst-micro-chassis pagination mixin like this:\n\n```python\n#assuming there is a model Product, which has at least a few tens of rows saved in db\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\n\nclass Product(db.Model):\n    id = db.Column(db.String, unique=True, primary_key=True, default=lambda x: str(uuid4()))\n    name = db.Column(db.String)\n    created_at = db.Column(db.DateTime)\n```\ncreating a paginated endpoint to expose all these products, its as easy as: \n```python\nfrom cst_micro_chassis.resources import ApiResource, ApiPaginatedMixin\nclass ProductsResource(ApiPaginatedMixin, ApiResource):\n    def get(self):\n        products = self.get_paginated_query_result(\n            Product.query.order_by(Product.created_at.asc())\n        )\n        serialized = [{'name': p.name, 'created': p.created_at.isoformat()} for p in products]\n        return serialized, 200\napi = Api(app)\napi.add_resource(ProductsResource, '/products')\n```\nBehind the scene, this will setup a basic pagination with a default of 25 items per page, which will automatically slice the results of `Product.query.order_by(Product.created_at.asc())` query , and populate the meta section in the response accordingly with a `next` and `prev` link:\n`curl localhost/products/` will return\n```json\n{\n    \"meta\": {\n        \"operation_id\": \"32013480-c882-46dd-a9d6-a931a8535cbe\",\n        \"pagination\": {\n            \"next\": \"http://localhost:5000/products/?offset=25&limit=25\",\n            \"prev\": null\n        }\n    },\n    \"data\": [ ...]\n}\n```\nThe default number of items per page, which defaults to 25 , can be changed by setting the `CST_API_DEFAULT_PAGE_SIZE` environment variable.\n\nFull code example for pagination (manual installation of flask_sqlalchemy is needed)\n```python\n#app.py\nimport datetime\nfrom flask import Flask\nfrom flask_restful import Api\nfrom flask_sqlalchemy import SQLAlchemy\nfrom uuid import uuid4\nfrom cst_micro_chassis import CstMicroChassis\nfrom cst_micro_chassis.resources import ApiResource, ApiPaginatedMixin\n\napp = Flask('new-app')\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///new-app.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy()\nchassis = CstMicroChassis()\n\ndb.init_app(app)\nchassis.init_app(app)\n\napi = Api(app)\n\n\nclass Product(db.Model):\n    id = db.Column(db.String, unique=True, \n                   primary_key=True, default=lambda x: str(uuid4()))\n    name = db.Column(db.String)\n    # ..\n    created_at = db.Column(db.DateTime)\n\n\nclass ProductsResource(ApiPaginatedMixin, ApiResource):\n    def get(self):\n        products = self.get_paginated_query_result(\n            Product.query.order_by(Product.created_at.asc())\n        )\n        serialized = [\n           {'name': p.name, 'created': p.created_at.isoformat()}\n           for p in products\n        ]\n        return serialized, 200\n\n\napi.add_resource(ProductsResource, '/products')\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n        if Product.query.count() == 0:\n            for i in range(107):\n                db.session.add(\n                    Product(\n                       name=f'product No.{i}',\n                       created_at=datetime.datetime.utcnow()\n                    )\n                )\n            db.session.commit()\n\n    app.run(debug=True)\n```\n---\n#### Contributing\n - run the tests: \n```shell\nmake test\n```\nthis will set up a virtual environment with [tox](https://tox.readthedocs.io) and run the unittest on Python3.9 \n\nIf one wants to run the test using a different interpreter version, one can use the pyversion argument for the `make` command like this:\n`make pyversion=py38 test` (clearly, that interpreter version must be installed on the host otherwise tox will raise an `ERROR: InterpreterNotFound: python..` )\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/cst-micro-chassis/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cst-micro-chassis",
    "package_url": "https://pypi.org/project/cst-micro-chassis/",
    "platform": "",
    "project_url": "https://pypi.org/project/cst-micro-chassis/",
    "project_urls": {
      "Homepage": "https://pypi.org/project/cst-micro-chassis/"
    },
    "release_url": "https://pypi.org/project/cst-micro-chassis/0.1.0/",
    "requires_dist": [
      "flask (==1.1.*)",
      "flask-restful (==0.3.*)"
    ],
    "requires_python": ">=3.7",
    "summary": "Microservices chassis pattern library",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9888980,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f37a62fd9a190aea988841e232ccde0df6a4fa19c32da98bc8ebe24b605da3a",
          "md5": "63ca0453cf0f494174d2da2129eb57eb",
          "sha256": "13ca96638d8153329c75fe213f9955a3d04f03d5e24204ca7630e02915647380"
        },
        "downloads": -1,
        "filename": "cst_micro_chassis-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63ca0453cf0f494174d2da2129eb57eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10280,
        "upload_time": "2021-03-26T10:29:00",
        "upload_time_iso_8601": "2021-03-26T10:29:00.139156Z",
        "url": "https://files.pythonhosted.org/packages/1f/37/a62fd9a190aea988841e232ccde0df6a4fa19c32da98bc8ebe24b605da3a/cst_micro_chassis-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48adcc488920e84f67f29f63741e76c4a5c77e82dc4f864f7a5fb725a956b38b",
          "md5": "57b5e86db3c855c1f4f24254cbbcdddd",
          "sha256": "c004e3cce0335e0cd877e426632fc68913cc5988f1c175050b5f71e5a271c286"
        },
        "downloads": -1,
        "filename": "cst-micro-chassis-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "57b5e86db3c855c1f4f24254cbbcdddd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13074,
        "upload_time": "2021-03-26T10:29:01",
        "upload_time_iso_8601": "2021-03-26T10:29:01.684210Z",
        "url": "https://files.pythonhosted.org/packages/48/ad/cc488920e84f67f29f63741e76c4a5c77e82dc4f864f7a5fb725a956b38b/cst-micro-chassis-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f37a62fd9a190aea988841e232ccde0df6a4fa19c32da98bc8ebe24b605da3a",
        "md5": "63ca0453cf0f494174d2da2129eb57eb",
        "sha256": "13ca96638d8153329c75fe213f9955a3d04f03d5e24204ca7630e02915647380"
      },
      "downloads": -1,
      "filename": "cst_micro_chassis-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63ca0453cf0f494174d2da2129eb57eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10280,
      "upload_time": "2021-03-26T10:29:00",
      "upload_time_iso_8601": "2021-03-26T10:29:00.139156Z",
      "url": "https://files.pythonhosted.org/packages/1f/37/a62fd9a190aea988841e232ccde0df6a4fa19c32da98bc8ebe24b605da3a/cst_micro_chassis-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48adcc488920e84f67f29f63741e76c4a5c77e82dc4f864f7a5fb725a956b38b",
        "md5": "57b5e86db3c855c1f4f24254cbbcdddd",
        "sha256": "c004e3cce0335e0cd877e426632fc68913cc5988f1c175050b5f71e5a271c286"
      },
      "downloads": -1,
      "filename": "cst-micro-chassis-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "57b5e86db3c855c1f4f24254cbbcdddd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13074,
      "upload_time": "2021-03-26T10:29:01",
      "upload_time_iso_8601": "2021-03-26T10:29:01.684210Z",
      "url": "https://files.pythonhosted.org/packages/48/ad/cc488920e84f67f29f63741e76c4a5c77e82dc4f864f7a5fb725a956b38b/cst-micro-chassis-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}