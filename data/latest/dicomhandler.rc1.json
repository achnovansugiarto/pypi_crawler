{
  "info": {
    "author": "",
    "author_email": "Jerónimo Fotinós <jerofoti@gmail.com>, Alejandro Rojas <alexrojas@ciencias.unam.mx>, Nicola Maddalozzo <nicolamaddalozzo95@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# dicomhandler\n\n<!-- BODY -->\n\nDicomhandler is a Python tool for integrating [DICOM](https://www.dicomstandard.org/) information and processing DICOM radiotherapy structures. It allows to modify the structures (expand, contract, rotate, translate) and to obtain statistics from these modifications without the need to use CT or MRI images and to create new objects with this information, which are compatible with the commercial systems of treatment planning such as [Eclipse](https://www.varian.com/es/products/radiotherapy/treatment-planning/eclipse) and [Brainlab Elements](https://www.brainlab.com/es/productos-de-cirugia/relacion-de-productos-de-neurocirugia/brainlab-elements/). It is possible to extract the information from the structures in an easy *csv-able* form.\n\nDicomhandler uses DICOM files that belongs to different stages of treatment planning (structures, dose, and plan), by grouping the files of a patient in a single object. DICOM objects have to be created with [Pydicom](https://pydicom.github.io/pydicom/stable/). Also, it allows for the extraction of related information, such as the Cartesian coordinates of structures and multileaf collimator (MLC) positions for each control point in the treatment plan. This is achieved by using the `DicomInfo` class. It receives as input the DICOM radiotherapy structures (RS), dose (RD), and plan (RP) files (or a subset of these) and constructs a single object that contains all the information for a patient.\n\nDicomhandler is built on [NumPy](https://numpy.org/). NumPy provides an efficient implementation of numerical computations in a high-level language like Python but completely compiled in C, resulting in a significant improvement in speed and code that is clear and easy to maintain.\n\n## Table of Contents\n* [Features](#id1)\n* [Examples](#id2)\n* [Access](#id4)\n* [Open and run the project](#id5)\n* [Libraries and pre-requisites](#id6)\n* [Authors](#id9)\n* [License](#id10)\n* [Project Status](#id11)\n* [Room for Improvement](#id12)\n* [Acknowledgements](#id13)\n* [More information for potential applications](#id14)\n* [Expressions of gratitude](#id15)\n<!-- * [License](#license) -->\n\n## Features\nThe functionalities provided by the package could be divided into three main categories.\n\n- **File transformation:** To modify the files’ information in some\n  meaningful way.\n\n- **Format conversion:** DICOM files are neither optimized for data analysis, nor straightforward review by clinical staff, but for hardware. For that reason, the package provides means for both scientific manipulation of data and effortless conversion to clinical-friendly formats.\n\n- **Report data:** To summarize different DICOM files, or even about the comparison between files.\n\n## Examples\n\n### Register DICOM files\nIt is required to operate on a DICOM object by [Pydicom](https://pydicom.github.io/pydicom/stable/). You can use the DICOM files examples by default in the [repository](https://github.com/alxrojas/dicom2handle/tree/main/Examples)).\n\nYou can construct an object with different DICOM files from the same patient as:\n```python\ndi = DicomInfo(dicom_structure, dicom_plan)\n```\n\n### Anonymize the information\nYou can choose the information that it has to be anonymized:\n```python\ndi.anonymize(name=True, birth=True, operator=False, creation=False)\n```\n\n### Expand or contract margins\nYou can expand or subtract margins for a single structure. If you want to expand, the input parameter must be positive. Otherwise, negative.\n```python\nexpanded = di.add_margin('5 GTV', 1.5)\ncontracted = di.add_margin('5 GTV', -1.5)\n```\n\n### Rotate or translate\nYou can [rotate](https://simple.wikipedia.org/wiki/Pitch,_yaw,_and_roll) or [translate](https://en.wikipedia.org/wiki/Transformation_matrix) a structure (organ or lesion) in an specific direction with respect to an arbitary point or to the isocentre. The keys are: roll, pitch, and yaw (for rotations) and x, y, and z (for translations).\n\nFor the isocenter:\n```python\ndi_rotated = di.move('5 GTV', 0.5, 'pitch')\ndi_translated = di.move('5 GTV', 1.0, 'x')\n```\nOr for an arbritary point:\n```python\ndi_rotated = di.move('5 GTV', 0.5, 'pitch', [4.0, -50.0, 20.0])\ndi_translated = di.move('5 GTV', 1.0, 'x', [4.0, -50.0, 20.0])\n```\n\n### Summary in dataframe\nA dataframe is generated with the main information of the plan, relevant for clinical statistics. Also, you can obtain the calculated areas of multileaf collimator (MLC) modulation.\n\nTo obtain general plan information:\n```python\ndi.summarize_to_dataframe(area=False)\n```\nTo obtain the MLC areas:\n```python\ndi.summarize_to_dataframe(area=True)\n```\n\n### CSV files\nA csv file is generated with some information.\n\n#### Structures\n The output file provides the information on the coordinates (x, y, z) of all or some structures of a patient. By default the report is generated for all structures.\n\nFor all structures this process takes several minutes.\n```python\ndi.struct_to_csv(path_or_buff='output.csv')\n```\nOr you can select some structures to obtain the csv file in a particular path:\n```python\ndi.struct_to_csv(path_or_buff='output.csv', names=['Structure1', 'Structure2'])\n```\nOr in buffer:\n```python\ndi.struct_to_csv(path_or_buff=StringIO(), names=['Structure1', 'Structure2'])\n```\nAlso, the output file can provide the information of gantry angle, gantry direction, table angles, and MLC positions for each checkpoint.\n```python\ndi.mlc_to_csv(path_or_buff=\"output.csv\")\n```\nOr in buffer:\n```python\ndi.mlc_to_csv(path_or_buff=StringIO())\n```\n\n## Access\nWe encourage the practice of using virtual environments to avoid dependency incompatibilities. The most convenient way to do this, is by using virtualenv, virtualenvwrapper, and pip.\n\n### Install with pip\nAfter setting up and activating the virtualenv, run the following command:\n```console\npip install dicomhandler\n```\n### Install the development version\nIn case you’d like to be able to update the package code occasionally with the latest bug fixes and improvements, see the source code, or even make your own changes, you can always clone the code directly from the repository:\n```console\ngit clone https://github.com/alxrojas/dicomhandler\ncd dicomhandler\npip install -e .\n```\n\n## Open and run the project\nRun the project as:\n```python\nfrom dicomhandler.dicom_info import DicomInfo\nfrom dicomhandler.report import report\n```\n\n## Libraries and pre-requisites\nThe dependencies of the package, that will be automatically installed with the software, are the following:\n\n- [numpy](https://numpy.org/): Data analysis and calculation.\n- [pandas](https://pandas.pydata.org/): Report statistics.\n- [pydicom](https://pydicom.github.io/pydicom/stable/): DICOM file reader.\n\n## Authors\n- [Alejandro Rojas](https://github.com/alxrojas)\n- [Jerónimo Fotinós](https://github.com/JeroFotinos)\n- [Nicola Maddalozzo](https://github.com/nicolaMaddalozzo)\n\n## License\nThis project is licensed under (MIT) - Look the file [LICENSE.md](https://github.com/alxrojas/dicomhandler/blob/main/LICENSE) for details.\n\n## Project Status\nVersion 0.0.1a1 is _complete_\n\n## Room for Improvement\nFor future work and improvement:\n- A method to provide the assignment of variable margin to a lesion.\n- A method to evaluate the dose-volume histogram for the displaced structures.\n- The possibility to deform structures.\n\n## Acknowledgements\nMany thanks to\n- Daniel Venencia, PhD. and Instituto Zunino to provide the resources and the access to data.\n- Juan Cabral, PhD. to evaluate and review this project.\n\n## More information for potential applications\n- [Beltrán et al. Radiat and Onc (2012)](https://www.sciencedirect.com/science/article/abs/pii/S0167814011003240)\n- [Rojas López et al. Phys Med (2021)](https://www.sciencedirect.com/science/article/abs/pii/S1120179721002131)\n- [Venencia et al. J Rad in Pract (2022)](https://www.cambridge.org/core/journals/journal-of-radiotherapy-in-practice/article/abs/rotational-effect-and-dosimetric-impact-hdmlc-vs-5mm-mlc-leaf-width-in-single-isocenter-multiple-metastases-radiosurgery-with-brainlab-elements/EFBC35342D49298190BA8381BC729AB1)\n- [Zhang et al. SpringerPlus (2016)](https://springerplus.springeropen.com/articles/10.1186/s40064-016-1796-2)\n\n## Expressions of gratitude\n* Tell others about this project.\n* Cite our project in your paper.\n* Invite someone from the team a beer or a coffee.\n* Give thanks publicly.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dicomhandler,dicom,dcm,cancer,radiotherapy",
    "license": "MIT License  Copyright (c) 2022 AlejandroRojas  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dicomhandler",
    "package_url": "https://pypi.org/project/dicomhandler/",
    "platform": null,
    "project_url": "https://pypi.org/project/dicomhandler/",
    "project_urls": {
      "Homepage": "https://github.com/alxrojas/dicom2handle",
      "Repository": "https://github.com/alxrojas/dicom2handle"
    },
    "release_url": "https://pypi.org/project/dicomhandler/0.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "pydicom",
      "toml"
    ],
    "requires_python": ">=3.7",
    "summary": "dicomhandler is a package for wrapping many pydicom objects of the same patient, performing transformations in structures and comparing them with the originals.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16926197,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31366fc437bd23dbb184223a57c0a26db3092ec5212108b235334179899eaa95",
          "md5": "5b6a7f38fa3809e4a23a5bf21c35f9de",
          "sha256": "fed92b828fcfaa6982f6619ec8af0208a979b13114b10d3bb4886131dba5dba2"
        },
        "downloads": -1,
        "filename": "dicomhandler-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b6a7f38fa3809e4a23a5bf21c35f9de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16322,
        "upload_time": "2023-02-19T08:33:51",
        "upload_time_iso_8601": "2023-02-19T08:33:51.066863Z",
        "url": "https://files.pythonhosted.org/packages/31/36/6fc437bd23dbb184223a57c0a26db3092ec5212108b235334179899eaa95/dicomhandler-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fde384e44e8ea0536d7ec90b7222572b189a500db406a7a645fb2738d7a1c6b6",
          "md5": "c858eb218104dc663ac9971eb4464ea6",
          "sha256": "ef89a4abadf22f009931d6c50866a3432b3090ad78fe4097e20f0ba7f2bcf76d"
        },
        "downloads": -1,
        "filename": "dicomhandler-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c858eb218104dc663ac9971eb4464ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21151949,
        "upload_time": "2023-02-19T08:34:20",
        "upload_time_iso_8601": "2023-02-19T08:34:20.148366Z",
        "url": "https://files.pythonhosted.org/packages/fd/e3/84e44e8ea0536d7ec90b7222572b189a500db406a7a645fb2738d7a1c6b6/dicomhandler-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31366fc437bd23dbb184223a57c0a26db3092ec5212108b235334179899eaa95",
        "md5": "5b6a7f38fa3809e4a23a5bf21c35f9de",
        "sha256": "fed92b828fcfaa6982f6619ec8af0208a979b13114b10d3bb4886131dba5dba2"
      },
      "downloads": -1,
      "filename": "dicomhandler-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b6a7f38fa3809e4a23a5bf21c35f9de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16322,
      "upload_time": "2023-02-19T08:33:51",
      "upload_time_iso_8601": "2023-02-19T08:33:51.066863Z",
      "url": "https://files.pythonhosted.org/packages/31/36/6fc437bd23dbb184223a57c0a26db3092ec5212108b235334179899eaa95/dicomhandler-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fde384e44e8ea0536d7ec90b7222572b189a500db406a7a645fb2738d7a1c6b6",
        "md5": "c858eb218104dc663ac9971eb4464ea6",
        "sha256": "ef89a4abadf22f009931d6c50866a3432b3090ad78fe4097e20f0ba7f2bcf76d"
      },
      "downloads": -1,
      "filename": "dicomhandler-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c858eb218104dc663ac9971eb4464ea6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21151949,
      "upload_time": "2023-02-19T08:34:20",
      "upload_time_iso_8601": "2023-02-19T08:34:20.148366Z",
      "url": "https://files.pythonhosted.org/packages/fd/e3/84e44e8ea0536d7ec90b7222572b189a500db406a7a645fb2738d7a1c6b6/dicomhandler-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}