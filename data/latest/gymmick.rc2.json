{
  "info": {
    "author": "Abhay Raj",
    "author_email": "abhraj.work@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Gymmick\n\nA library offering simple functionality for the creation of simple visuals-based OpenAI Gym environments.\n\n## Description\n\nThe purpose of this library is to create an easier way for users to make custom visual-based environments compatible with OpenAI Gym. Along with the basics of any Gym environment (ENV class and defining functions), the library will contain special functions to make\nstate handling (for observation creation) easier as well as a predefined visualization tool which can be activated upon request \n(by changing a default argument when creating an environment instance). If the user does not want a visual/physics-based environment, \nthey can opt to add their own variables to an optional argument dictionary when instantiating the class and have complete freedom\nwith the manipulation of the values in said dictionary as the states of the environment change.\n\nThis library is not an advanced tool, but provides users freedom to do (almost) whatever they want in their environment. Flexibility for some environment functions is a priority and pending features include:\n\n - `Functions for Collision Detection`\n - `Gravity for Members of the Environment`\n - `Visibility and \"Tangibility\" of Environment Members`\n - `Support for Irregular Polygons`\n - `Rotation of Environment Members`\n\n## Installation\n\nTo install, simply use the command:\n```python\npip install gymmick\n```\n\n## Usage\n\n### Import\n\n```python\nfrom gymmick import creategym\nfrom gymmick import members\n```\n\n### Create an Environment\n\nTo create an environment, you must also have created a ```handler``` function and know the details of the environment (action/observation space, episode length, using a screen, etc.). Here is the ```__init__()``` function's parameters for the ```creategym.FreeSpaceEnv``` class:\n```python\ndef __init__(self, action_space, observation_space, length, _handler, color = (0, 0, 0), scr=False, **kwargs)\n```\n\nNote: If you wish to be able to utilize the screen for the above class, then initialize the environment with ```scr=(<screen width>, <screen height>)```.\n\nand here is the ```GridworldEnv.__init__()``` parameters:\n\n```python\ndef __init__(self, action_space, observation_space, length, _handler, table_dim, color = (0, 0, 0), **kwargs)\n```\n\nNote: If you wish to be able to utilize the screen for the above class, then initialize the ```table_dim``` parameter with ```((<number of rows>, <row height>), (<number of columns>, <column width>))```. Both ```<number of rows>``` and ```<number of columns>``` must be at least 1. If ```<row height>``` or ```<column width>``` is 0, then the environment will not be instantiated with a screen, but the grid (and its variables) will still be accessible.\n\nHere are examples of instantiating both environments, with handler functions, and other class parameters already in place:\n\n```python\ndef first(action):\n    prev = agent1.x\n    agent1.change_attr(x=agent1.x+(action-1))\n    done = False\n    if agent1.x == goal1.x:\n        reward = 1\n        done = True\n    elif (abs(agent1.x-goal1.x)<abs(prev-goal1.x)):\n        reward = 1\n    else:\n        reward = -1 \n    observation = goal1.x-agent1.x\n    return observation, reward, done, {}\n\ndef second(action):\n    prev = agent2.col\n    agent2.change_attr(col = agent2.col+(action-1))\n    done = False\n    if agent2.col == goal2.col:\n        reward = 1\n        done = True\n    elif abs(agent2.col-goal2.col)<abs(prev-goal2.col):\n        reward = 1\n    else:\n        reward = -1\n    observation = goal2.col-agent2.col\n    return observation, reward, done, {}\n\naction = spaces.Discrete(3)\nobservation1 = spaces.Box(low = np.array([-1500]), high = np.array([1500]))\nobservation2 = spaces.Box(low = np.array([-15]), high = np.array([15]))\nenv = FreeSpaceEnv(action, observation1, 1500, first, scr = (1000, 1000))\ngrid = GridworldEnv(action, observation2, 100, second, ((20, 25), (15, 37)))\n```\n\n### Adding members to environments\n\nTo add members to environments, instantiate them from the ```gymmick.members``` class with appropriate init parameters:\n\n```python\ngymmick.members.FreeSpaceRect(<x>, <y>, <width>, <height>, <horizontal  velocity>, <vertical velocity>, <mass>, <RGB color tuple>)\ngymmick.members.CellRect(<row>, <column>, <horizontal  velocity>, <vertical velocity>, <mass>, <RGB color tuple>)\ngymmick.members.Circle(<x>, <y>, <radius>, <horizontal  velocity>, <vertical velocity>, <mass>, <RGB color tuple>)\n```\n\nNote: Currently, the velocity parameter does not have any effect on the environment or object. Therefore, whatever ```vy``` or ```vx``` is instantiated is irrelevant, unless the user is using these variables in their own handler functions. Functionality for velocity is coming soon.\n\nNote: ```FreeSpaceRect``` and ```Circle``` can only be used in the ```FreeSpaceEnv``` environment, while ```CellRect``` can only be used in the ```GridEnv``` environment.\n\nNote: ```CellRect``` can have ```<row>``` and ```<col>``` values outside the bounds of its environment (they will just remain in a seperate array outside of the main table). Depending on how the user manipulates this object, it can switch its presence between ```GridEnv.table``` and ```GridEnv.outside```.\n\nAlso, make sure to create a copy of the member variables so that they can be reset at the end of each episode. There will be future updates to the library in which users will not have to continuously re-add these members to the environment:\n\n```python\nagent1_copy = FreeSpaceRect(0, 500, 50, 50, 0, 0, 0, (255, 0, 0))\nagent2_copy = CellRect(10, 0, 0, 0, 0, (255, 0, 0))\ngoal1_copy = FreeSpaceRect(427, 500, 50, 50, 0, 0, 0, (0, 255, 0))\ngoal2_copy = CellRect(10, 11, 0, 0, 0, (0, 255, 0))\n```\nTo add a member to the environt, use the environment's built-in method:\n\n```python\nenv.add_member(agent1)\nenv.add_member(goal1)\ngrid.add_member(agent2)\ngrid.add_member(goal2)\n```\n\n### Run the environment\n\nTo run (and view) the ```grid``` environment, run the following code:\n\n```python\nfor _ in range(<number of episodes>):\n    total_reward = 0\n    while True:\n        action = grid.action_space.sample()\n        obs, reward, done, info = grid.step(action)\n        total_reward += reward\n        grid.render()\n        if done == True:\n            break\n    print(total_reward)\n    grid.reset()\n    agent2 = agent2_copy\n    goal2 = goal2_copy\n    grid.add_member(agent2)\n    grid.add_member(goal2)\n```\nSimilarly, you can run the ```env``` environment by substituting its name for ```grid``` in the above example.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/gymmick/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GithubDev939/gymmick",
    "keywords": "Gym,OpenAI,Environment,ReinforcementLearning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gymmick",
    "package_url": "https://pypi.org/project/gymmick/",
    "platform": null,
    "project_url": "https://pypi.org/project/gymmick/",
    "project_urls": {
      "Download": "https://pypi.org/project/gymmick/",
      "Homepage": "https://github.com/GithubDev939/gymmick"
    },
    "release_url": "https://pypi.org/project/gymmick/1.0.0/",
    "requires_dist": [
      "pygame",
      "numpy",
      "gym"
    ],
    "requires_python": "",
    "summary": "Simple functionality for the creation of visuals-based OpenAI Gym environments.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14343175,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcf3c5744ef1c14cd360300e94bc0822028460a6770c84f34e5806523bb99559",
          "md5": "5d55e102baa2c62609dea303e6f4c1ef",
          "sha256": "2d6a09c272b11776283a00a4767def44c4bae5b2f4617578a45fdcc2d4b45665"
        },
        "downloads": -1,
        "filename": "gymmick-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d55e102baa2c62609dea303e6f4c1ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4423,
        "upload_time": "2022-06-26T15:05:52",
        "upload_time_iso_8601": "2022-06-26T15:05:52.285786Z",
        "url": "https://files.pythonhosted.org/packages/dc/f3/c5744ef1c14cd360300e94bc0822028460a6770c84f34e5806523bb99559/gymmick-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06d7bdca2c00c0db234f96519edf54eb3ec3468a1f4a0e8c1ac954600185e7e0",
          "md5": "0b6ca32c4ec3d789e0b0f2b28eb316c3",
          "sha256": "3c09288bac90499c51e9a7432cb2b9cd7356f3587dbbc13530b57088b682a184"
        },
        "downloads": -1,
        "filename": "gymmick-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0b6ca32c4ec3d789e0b0f2b28eb316c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4126,
        "upload_time": "2022-06-26T15:05:54",
        "upload_time_iso_8601": "2022-06-26T15:05:54.552798Z",
        "url": "https://files.pythonhosted.org/packages/06/d7/bdca2c00c0db234f96519edf54eb3ec3468a1f4a0e8c1ac954600185e7e0/gymmick-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a295f359474af7c3552292c06af4b892977318a35fec7b84833b014bccadb469",
          "md5": "9925a7e45838f771910ddba43055cdd7",
          "sha256": "d16444511c197d785f76e147b6f44dfcb52ecb64d2ed0ad841cc75f866d0bfd3"
        },
        "downloads": -1,
        "filename": "gymmick-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9925a7e45838f771910ddba43055cdd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6514,
        "upload_time": "2022-07-05T18:32:20",
        "upload_time_iso_8601": "2022-07-05T18:32:20.253773Z",
        "url": "https://files.pythonhosted.org/packages/a2/95/f359474af7c3552292c06af4b892977318a35fec7b84833b014bccadb469/gymmick-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dff9fd45d247bc4648f0bcec8bca1d5dff57a09d9b10ae9fa0a1350d5be2940",
          "md5": "1886dcc5b7fd1c19bef5dd7ab99b18dd",
          "sha256": "23dad0aa8ffcc61e902ae3519fd452a35d027845ee55781dc7e5ac36b76d325d"
        },
        "downloads": -1,
        "filename": "gymmick-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1886dcc5b7fd1c19bef5dd7ab99b18dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6302,
        "upload_time": "2022-07-05T18:32:23",
        "upload_time_iso_8601": "2022-07-05T18:32:23.776305Z",
        "url": "https://files.pythonhosted.org/packages/8d/ff/9fd45d247bc4648f0bcec8bca1d5dff57a09d9b10ae9fa0a1350d5be2940/gymmick-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a295f359474af7c3552292c06af4b892977318a35fec7b84833b014bccadb469",
        "md5": "9925a7e45838f771910ddba43055cdd7",
        "sha256": "d16444511c197d785f76e147b6f44dfcb52ecb64d2ed0ad841cc75f866d0bfd3"
      },
      "downloads": -1,
      "filename": "gymmick-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9925a7e45838f771910ddba43055cdd7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6514,
      "upload_time": "2022-07-05T18:32:20",
      "upload_time_iso_8601": "2022-07-05T18:32:20.253773Z",
      "url": "https://files.pythonhosted.org/packages/a2/95/f359474af7c3552292c06af4b892977318a35fec7b84833b014bccadb469/gymmick-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dff9fd45d247bc4648f0bcec8bca1d5dff57a09d9b10ae9fa0a1350d5be2940",
        "md5": "1886dcc5b7fd1c19bef5dd7ab99b18dd",
        "sha256": "23dad0aa8ffcc61e902ae3519fd452a35d027845ee55781dc7e5ac36b76d325d"
      },
      "downloads": -1,
      "filename": "gymmick-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1886dcc5b7fd1c19bef5dd7ab99b18dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6302,
      "upload_time": "2022-07-05T18:32:23",
      "upload_time_iso_8601": "2022-07-05T18:32:23.776305Z",
      "url": "https://files.pythonhosted.org/packages/8d/ff/9fd45d247bc4648f0bcec8bca1d5dff57a09d9b10ae9fa0a1350d5be2940/gymmick-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}